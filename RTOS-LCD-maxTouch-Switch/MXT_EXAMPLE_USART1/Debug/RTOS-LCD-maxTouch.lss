
RTOS-LCD-maxTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007478  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407478  00407478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00407480  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bed8  204009c0  00407e40  000209c0  2**2
                  ALLOC
  4 .stack        00002000  2040c898  00413d18  000209c0  2**0
                  ALLOC
  5 .heap         00000200  2040e898  00415d18  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002abfa  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000059b4  00000000  00000000  0004b641  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000dcb9  00000000  00000000  00050ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012c0  00000000  00000000  0005ecae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001570  00000000  00000000  0005ff6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ee62  00000000  00000000  000614de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000171de  00000000  00000000  00070340  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009e872  00000000  00000000  0008751e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003c14  00000000  00000000  00125d90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 e8 40 20 a1 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@ ..@...@...@.
  400010:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	79 20 40 00 9f 1c 40 00 00 00 00 00 19 21 40 00     y @...@......!@.
  40003c:	81 21 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     .!@...@...@...@.
  40004c:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  40005c:	9f 1c 40 00 9f 1c 40 00 00 00 00 00 19 16 40 00     ..@...@.......@.
  40006c:	2d 16 40 00 41 16 40 00 9f 1c 40 00 9f 1c 40 00     -.@.A.@...@...@.
  40007c:	9f 1c 40 00 55 16 40 00 69 16 40 00 9f 1c 40 00     ..@.U.@.i.@...@.
  40008c:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  40009c:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  4000ac:	9f 1c 40 00 9f 1c 40 00 5d 02 40 00 9f 1c 40 00     ..@...@.].@...@.
  4000bc:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  4000cc:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  4000dc:	9f 1c 40 00 71 02 40 00 9f 1c 40 00 9f 1c 40 00     ..@.q.@...@...@.
  4000ec:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  4000fc:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  40010c:	9f 1c 40 00 9f 1c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ......@...@...@.
  40012c:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  40013c:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  40014c:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00 9f 1c 40 00     ..@...@...@...@.
  40015c:	9f 1c 40 00 9f 1c 40 00 9f 1c 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00407480 	.word	0x00407480

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00407480 	.word	0x00407480
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00407480 	.word	0x00407480
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c790 	.word	0x2040c790
  400258:	40064000 	.word	0x40064000

0040025c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40025c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40025e:	4802      	ldr	r0, [pc, #8]	; (400268 <AFEC0_Handler+0xc>)
  400260:	4b02      	ldr	r3, [pc, #8]	; (40026c <AFEC0_Handler+0x10>)
  400262:	4798      	blx	r3
  400264:	bd08      	pop	{r3, pc}
  400266:	bf00      	nop
  400268:	4003c000 	.word	0x4003c000
  40026c:	004001d5 	.word	0x004001d5

00400270 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400270:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400272:	4802      	ldr	r0, [pc, #8]	; (40027c <AFEC1_Handler+0xc>)
  400274:	4b02      	ldr	r3, [pc, #8]	; (400280 <AFEC1_Handler+0x10>)
  400276:	4798      	blx	r3
  400278:	bd08      	pop	{r3, pc}
  40027a:	bf00      	nop
  40027c:	40064000 	.word	0x40064000
  400280:	004001d5 	.word	0x004001d5

00400284 <mxt_init>:
* to the maXTouch Xplained Pro.
*
* \param device Pointer to mxt_device struct
*/
void mxt_init(struct mxt_device *device)
{
  400284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400288:	b09c      	sub	sp, #112	; 0x70
  40028a:	4604      	mov	r4, r0
  enum status_code status;

  /* T8 configuration object data */
  uint8_t t8_object[] = {
  40028c:	4d48      	ldr	r5, [pc, #288]	; (4003b0 <mxt_init+0x12c>)
  40028e:	ab19      	add	r3, sp, #100	; 0x64
  400290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400294:	c303      	stmia	r3!, {r0, r1}
  400296:	801a      	strh	r2, [r3, #0]
    0x0d, 0x00, 0x05, 0x0a, 0x4b, 0x00, 0x00,
    0x00, 0x32, 0x19
  };

  /* T9 configuration object data */
  uint8_t t9_object[] = {
  400298:	ae10      	add	r6, sp, #64	; 0x40
  40029a:	f105 070c 	add.w	r7, r5, #12
  40029e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4002a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4002a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002a6:	683b      	ldr	r3, [r7, #0]
  4002a8:	6033      	str	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02,
    0x02
  };

  /* T46 configuration object data */
  uint8_t t46_object[] = {
  4002aa:	ab0d      	add	r3, sp, #52	; 0x34
  4002ac:	f105 0230 	add.w	r2, r5, #48	; 0x30
  4002b0:	ca07      	ldmia	r2, {r0, r1, r2}
  4002b2:	c303      	stmia	r3!, {r0, r1}
  4002b4:	701a      	strb	r2, [r3, #0]
    0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03,
    0x00, 0x00
  };
  
  /* T56 configuration object data */
  uint8_t t56_object[] = {
  4002b6:	ae04      	add	r6, sp, #16
  4002b8:	353c      	adds	r5, #60	; 0x3c
  4002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4002c2:	682b      	ldr	r3, [r5, #0]
  4002c4:	7033      	strb	r3, [r6, #0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
  };

  /* TWI configuration */
  twihs_master_options_t twi_opt = {
  4002c6:	2500      	movs	r5, #0
  4002c8:	9503      	str	r5, [sp, #12]
  4002ca:	4b3a      	ldr	r3, [pc, #232]	; (4003b4 <mxt_init+0x130>)
  4002cc:	9302      	str	r3, [sp, #8]
  4002ce:	274a      	movs	r7, #74	; 0x4a
  4002d0:	f88d 700c 	strb.w	r7, [sp, #12]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4002d4:	4b38      	ldr	r3, [pc, #224]	; (4003b8 <mxt_init+0x134>)
  4002d6:	9301      	str	r3, [sp, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002d8:	2013      	movs	r0, #19
  4002da:	4b38      	ldr	r3, [pc, #224]	; (4003bc <mxt_init+0x138>)
  4002dc:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4002de:	4e38      	ldr	r6, [pc, #224]	; (4003c0 <mxt_init+0x13c>)
  4002e0:	a901      	add	r1, sp, #4
  4002e2:	4630      	mov	r0, r6
  4002e4:	4b37      	ldr	r3, [pc, #220]	; (4003c4 <mxt_init+0x140>)
  4002e6:	4798      	blx	r3

  status = (enum status_code)twihs_master_setup(MAXTOUCH_TWI_INTERFACE, &twi_opt);
  Assert(status == STATUS_OK);

  /* Initialize the maXTouch device */
  status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  4002e8:	2302      	movs	r3, #2
  4002ea:	463a      	mov	r2, r7
  4002ec:	4631      	mov	r1, r6
  4002ee:	4620      	mov	r0, r4
  4002f0:	4e35      	ldr	r6, [pc, #212]	; (4003c8 <mxt_init+0x144>)
  4002f2:	47b0      	blx	r6
  MAXTOUCH_TWI_ADDRESS, MAXTOUCH_XPRO_CHG_PIO);
  Assert(status == STATUS_OK);

  /* Issue soft reset of maXTouch device by writing a non-zero value to
  * the reset register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  4002f4:	462a      	mov	r2, r5
  4002f6:	2106      	movs	r1, #6
  4002f8:	4620      	mov	r0, r4
  4002fa:	4e34      	ldr	r6, [pc, #208]	; (4003cc <mxt_init+0x148>)
  4002fc:	47b0      	blx	r6
  4002fe:	2201      	movs	r2, #1
  400300:	4601      	mov	r1, r0
  400302:	4620      	mov	r0, r4
  400304:	4f32      	ldr	r7, [pc, #200]	; (4003d0 <mxt_init+0x14c>)
  400306:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_RESET, 0x01);

  /* Wait for the reset of the device to complete */
  delay_ms(MXT_RESET_TIME);
  400308:	4832      	ldr	r0, [pc, #200]	; (4003d4 <mxt_init+0x150>)
  40030a:	4b33      	ldr	r3, [pc, #204]	; (4003d8 <mxt_init+0x154>)
  40030c:	4798      	blx	r3

  /* Write data to configuration registers in T7 configuration object */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40030e:	462a      	mov	r2, r5
  400310:	2107      	movs	r1, #7
  400312:	4620      	mov	r0, r4
  400314:	47b0      	blx	r6
  400316:	2220      	movs	r2, #32
  400318:	4601      	mov	r1, r0
  40031a:	4620      	mov	r0, r4
  40031c:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 0, 0x20);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  40031e:	462a      	mov	r2, r5
  400320:	2107      	movs	r1, #7
  400322:	4620      	mov	r0, r4
  400324:	47b0      	blx	r6
  400326:	1c41      	adds	r1, r0, #1
  400328:	2210      	movs	r2, #16
  40032a:	b289      	uxth	r1, r1
  40032c:	4620      	mov	r0, r4
  40032e:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 1, 0x10);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400330:	462a      	mov	r2, r5
  400332:	2107      	movs	r1, #7
  400334:	4620      	mov	r0, r4
  400336:	47b0      	blx	r6
  400338:	1c81      	adds	r1, r0, #2
  40033a:	224b      	movs	r2, #75	; 0x4b
  40033c:	b289      	uxth	r1, r1
  40033e:	4620      	mov	r0, r4
  400340:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 2, 0x4b);
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400342:	462a      	mov	r2, r5
  400344:	2107      	movs	r1, #7
  400346:	4620      	mov	r0, r4
  400348:	47b0      	blx	r6
  40034a:	1cc1      	adds	r1, r0, #3
  40034c:	2284      	movs	r2, #132	; 0x84
  40034e:	b289      	uxth	r1, r1
  400350:	4620      	mov	r0, r4
  400352:	47b8      	blx	r7
  MXT_GEN_POWERCONFIG_T7, 0) + 3, 0x84);

  /* Write predefined configuration data to configuration objects */
  mxt_write_config_object(device, mxt_get_object_address(device,
  400354:	462a      	mov	r2, r5
  400356:	2108      	movs	r1, #8
  400358:	4620      	mov	r0, r4
  40035a:	47b0      	blx	r6
  40035c:	aa19      	add	r2, sp, #100	; 0x64
  40035e:	4601      	mov	r1, r0
  400360:	4620      	mov	r0, r4
  400362:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4003dc <mxt_init+0x158>
  400366:	47c0      	blx	r8
  MXT_GEN_ACQUISITIONCONFIG_T8, 0), &t8_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400368:	462a      	mov	r2, r5
  40036a:	2109      	movs	r1, #9
  40036c:	4620      	mov	r0, r4
  40036e:	47b0      	blx	r6
  400370:	aa10      	add	r2, sp, #64	; 0x40
  400372:	4601      	mov	r1, r0
  400374:	4620      	mov	r0, r4
  400376:	47c0      	blx	r8
  MXT_TOUCH_MULTITOUCHSCREEN_T9, 0), &t9_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400378:	462a      	mov	r2, r5
  40037a:	212e      	movs	r1, #46	; 0x2e
  40037c:	4620      	mov	r0, r4
  40037e:	47b0      	blx	r6
  400380:	aa0d      	add	r2, sp, #52	; 0x34
  400382:	4601      	mov	r1, r0
  400384:	4620      	mov	r0, r4
  400386:	47c0      	blx	r8
  MXT_SPT_CTE_CONFIGURATION_T46, 0), &t46_object);
  mxt_write_config_object(device, mxt_get_object_address(device,
  400388:	462a      	mov	r2, r5
  40038a:	2138      	movs	r1, #56	; 0x38
  40038c:	4620      	mov	r0, r4
  40038e:	47b0      	blx	r6
  400390:	aa04      	add	r2, sp, #16
  400392:	4601      	mov	r1, r0
  400394:	4620      	mov	r0, r4
  400396:	47c0      	blx	r8
  MXT_PROCI_SHIELDLESS_T56, 0), &t56_object);

  /* Issue recalibration command to maXTouch device by writing a non-zero
  * value to the calibrate register */
  mxt_write_config_reg(device, mxt_get_object_address(device,
  400398:	462a      	mov	r2, r5
  40039a:	2106      	movs	r1, #6
  40039c:	4620      	mov	r0, r4
  40039e:	47b0      	blx	r6
  4003a0:	1c81      	adds	r1, r0, #2
  4003a2:	2201      	movs	r2, #1
  4003a4:	b289      	uxth	r1, r1
  4003a6:	4620      	mov	r0, r4
  4003a8:	47b8      	blx	r7
  MXT_GEN_COMMANDPROCESSOR_T6, 0)
  + MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
  4003aa:	b01c      	add	sp, #112	; 0x70
  4003ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003b0:	00407198 	.word	0x00407198
  4003b4:	00061a80 	.word	0x00061a80
  4003b8:	08f0d180 	.word	0x08f0d180
  4003bc:	0040179d 	.word	0x0040179d
  4003c0:	40018000 	.word	0x40018000
  4003c4:	004019e9 	.word	0x004019e9
  4003c8:	004003e1 	.word	0x004003e1
  4003cc:	00400679 	.word	0x00400679
  4003d0:	00400731 	.word	0x00400731
  4003d4:	003228d8 	.word	0x003228d8
  4003d8:	20400001 	.word	0x20400001
  4003dc:	004006b9 	.word	0x004006b9

004003e0 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4003e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003e2:	b087      	sub	sp, #28
  4003e4:	4604      	mov	r4, r0
  4003e6:	460e      	mov	r6, r1
  4003e8:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4003ea:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4003ec:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4003ee:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4003f0:	2500      	movs	r5, #0
  4003f2:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4003f4:	2007      	movs	r0, #7
  4003f6:	4b9d      	ldr	r3, [pc, #628]	; (40066c <mxt_init_device+0x28c>)
  4003f8:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4003fa:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4003fc:	9501      	str	r5, [sp, #4]
  4003fe:	9505      	str	r5, [sp, #20]
  400400:	2302      	movs	r3, #2
  400402:	9302      	str	r3, [sp, #8]
  400404:	9003      	str	r0, [sp, #12]
  400406:	2307      	movs	r3, #7
  400408:	9304      	str	r3, [sp, #16]
  40040a:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40040e:	a901      	add	r1, sp, #4
  400410:	4630      	mov	r0, r6
  400412:	4b97      	ldr	r3, [pc, #604]	; (400670 <mxt_init_device+0x290>)
  400414:	4798      	blx	r3
  400416:	1b40      	subs	r0, r0, r5
  400418:	bf18      	it	ne
  40041a:	2001      	movne	r0, #1
  40041c:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  40041e:	b108      	cbz	r0, 400424 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400420:	b007      	add	sp, #28
  400422:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400424:	6825      	ldr	r5, [r4, #0]
  400426:	79a8      	ldrb	r0, [r5, #6]
  400428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40042c:	0040      	lsls	r0, r0, #1
  40042e:	4b8f      	ldr	r3, [pc, #572]	; (40066c <mxt_init_device+0x28c>)
  400430:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400432:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400434:	2300      	movs	r3, #0
  400436:	9301      	str	r3, [sp, #4]
  400438:	9304      	str	r3, [sp, #16]
  40043a:	9305      	str	r3, [sp, #20]
  40043c:	2307      	movs	r3, #7
  40043e:	f88d 3004 	strb.w	r3, [sp, #4]
  400442:	2302      	movs	r3, #2
  400444:	9302      	str	r3, [sp, #8]
  400446:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400448:	79ab      	ldrb	r3, [r5, #6]
  40044a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40044e:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400450:	9304      	str	r3, [sp, #16]
  400452:	7b23      	ldrb	r3, [r4, #12]
  400454:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400458:	a901      	add	r1, sp, #4
  40045a:	68a0      	ldr	r0, [r4, #8]
  40045c:	4b84      	ldr	r3, [pc, #528]	; (400670 <mxt_init_device+0x290>)
  40045e:	4798      	blx	r3
  400460:	3000      	adds	r0, #0
  400462:	bf18      	it	ne
  400464:	2001      	movne	r0, #1
  400466:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400468:	2800      	cmp	r0, #0
  40046a:	d1d9      	bne.n	400420 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  40046c:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  40046e:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400470:	79bb      	ldrb	r3, [r7, #6]
  400472:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400476:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400478:	3607      	adds	r6, #7
  40047a:	b2b6      	uxth	r6, r6
  40047c:	463a      	mov	r2, r7
  40047e:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400480:	2100      	movs	r1, #0
		result ^= crcpoly;
  400482:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400674 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400486:	f892 e001 	ldrb.w	lr, [r2, #1]
  40048a:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40048c:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400490:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400494:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  400498:	bf18      	it	ne
  40049a:	ea81 010c 	eorne.w	r1, r1, ip
  40049e:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  4004a0:	42ba      	cmp	r2, r7
  4004a2:	d1f0      	bne.n	400486 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4004a4:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4004aa:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4004ae:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4004b2:	d003      	beq.n	4004bc <mxt_init_device+0xdc>
		result ^= crcpoly;
  4004b4:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4004b8:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4004bc:	f1a6 0708 	sub.w	r7, r6, #8
  4004c0:	2f01      	cmp	r7, #1
  4004c2:	dd12      	ble.n	4004ea <mxt_init_device+0x10a>
  4004c4:	2301      	movs	r3, #1
		result ^= crcpoly;
  4004c6:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400674 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4004ca:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4004cc:	784d      	ldrb	r5, [r1, #1]
  4004ce:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004d0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4004d4:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4004d8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4004dc:	bf18      	it	ne
  4004de:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4004e2:	3302      	adds	r3, #2
  4004e4:	b29b      	uxth	r3, r3
  4004e6:	42bb      	cmp	r3, r7
  4004e8:	dbef      	blt.n	4004ca <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4004ea:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4004ec:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4004f0:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4004f4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4004f8:	d003      	beq.n	400502 <mxt_init_device+0x122>
		result ^= crcpoly;
  4004fa:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4004fe:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  400502:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  400506:	2300      	movs	r3, #0
  400508:	9301      	str	r3, [sp, #4]
  40050a:	9305      	str	r3, [sp, #20]
  40050c:	f88d 6004 	strb.w	r6, [sp, #4]
  400510:	0a36      	lsrs	r6, r6, #8
  400512:	f88d 6005 	strb.w	r6, [sp, #5]
  400516:	2302      	movs	r3, #2
  400518:	9302      	str	r3, [sp, #8]
  40051a:	f8cd d00c 	str.w	sp, [sp, #12]
  40051e:	2303      	movs	r3, #3
  400520:	9304      	str	r3, [sp, #16]
  400522:	7b23      	ldrb	r3, [r4, #12]
  400524:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400528:	a901      	add	r1, sp, #4
  40052a:	68a0      	ldr	r0, [r4, #8]
  40052c:	4b50      	ldr	r3, [pc, #320]	; (400670 <mxt_init_device+0x290>)
  40052e:	4798      	blx	r3
  400530:	b328      	cbz	r0, 40057e <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400532:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400536:	42ab      	cmp	r3, r5
  400538:	f040 808b 	bne.w	400652 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40053c:	6825      	ldr	r5, [r4, #0]
  40053e:	79a8      	ldrb	r0, [r5, #6]
  400540:	b198      	cbz	r0, 40056a <mxt_init_device+0x18a>
  400542:	2300      	movs	r3, #0
  400544:	3301      	adds	r3, #1
  400546:	b2da      	uxtb	r2, r3
  400548:	4290      	cmp	r0, r2
  40054a:	d8fb      	bhi.n	400544 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  40054c:	6862      	ldr	r2, [r4, #4]
  40054e:	1e43      	subs	r3, r0, #1
  400550:	b2db      	uxtb	r3, r3
  400552:	3301      	adds	r3, #1
  400554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400558:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  40055c:	2000      	movs	r0, #0
  40055e:	7953      	ldrb	r3, [r2, #5]
  400560:	4418      	add	r0, r3
  400562:	b2c0      	uxtb	r0, r0
  400564:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400566:	4291      	cmp	r1, r2
  400568:	d1f9      	bne.n	40055e <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40056a:	0040      	lsls	r0, r0, #1
  40056c:	4b3f      	ldr	r3, [pc, #252]	; (40066c <mxt_init_device+0x28c>)
  40056e:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400570:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400572:	79ab      	ldrb	r3, [r5, #6]
  400574:	b173      	cbz	r3, 400594 <mxt_init_device+0x1b4>
  400576:	2700      	movs	r7, #0
  400578:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40057a:	46be      	mov	lr, r7
  40057c:	e037      	b.n	4005ee <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  40057e:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400582:	f89d 3000 	ldrb.w	r3, [sp]
  400586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40058a:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40058e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400592:	e7d0      	b.n	400536 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400594:	f06f 0003 	mvn.w	r0, #3
  400598:	e742      	b.n	400420 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40059a:	3001      	adds	r0, #1
  40059c:	b2c0      	uxtb	r0, r0
  40059e:	6862      	ldr	r2, [r4, #4]
  4005a0:	1953      	adds	r3, r2, r5
  4005a2:	7919      	ldrb	r1, [r3, #4]
  4005a4:	4281      	cmp	r1, r0
  4005a6:	d31c      	bcc.n	4005e2 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  4005a8:	795b      	ldrb	r3, [r3, #5]
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	d0f5      	beq.n	40059a <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4005ae:	6862      	ldr	r2, [r4, #4]
  4005b0:	442a      	add	r2, r5
  4005b2:	7953      	ldrb	r3, [r2, #5]
  4005b4:	2b00      	cmp	r3, #0
  4005b6:	d0f0      	beq.n	40059a <mxt_init_device+0x1ba>
  4005b8:	4633      	mov	r3, r6
							device->object_list[i].type;
  4005ba:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4005bc:	6962      	ldr	r2, [r4, #20]
  4005be:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4005c2:	6962      	ldr	r2, [r4, #20]
  4005c4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4005c8:	7050      	strb	r0, [r2, #1]
					id_index++;
  4005ca:	3301      	adds	r3, #1
  4005cc:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4005ce:	6862      	ldr	r2, [r4, #4]
  4005d0:	442a      	add	r2, r5
  4005d2:	1b99      	subs	r1, r3, r6
  4005d4:	f892 c005 	ldrb.w	ip, [r2, #5]
  4005d8:	b2c9      	uxtb	r1, r1
  4005da:	458c      	cmp	ip, r1
  4005dc:	d8ed      	bhi.n	4005ba <mxt_init_device+0x1da>
					id_index++;
  4005de:	461e      	mov	r6, r3
  4005e0:	e7db      	b.n	40059a <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4005e2:	3701      	adds	r7, #1
  4005e4:	b2ff      	uxtb	r7, r7
  4005e6:	6823      	ldr	r3, [r4, #0]
  4005e8:	799b      	ldrb	r3, [r3, #6]
  4005ea:	429f      	cmp	r7, r3
  4005ec:	d207      	bcs.n	4005fe <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4005ee:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4005f2:	005a      	lsls	r2, r3, #1
  4005f4:	4615      	mov	r5, r2
  4005f6:	6863      	ldr	r3, [r4, #4]
  4005f8:	4413      	add	r3, r2
  4005fa:	4670      	mov	r0, lr
  4005fc:	e7d4      	b.n	4005a8 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4005fe:	b35b      	cbz	r3, 400658 <mxt_init_device+0x278>
  400600:	4610      	mov	r0, r2
  400602:	3b01      	subs	r3, #1
  400604:	b2db      	uxtb	r3, r3
  400606:	3301      	adds	r3, #1
  400608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40060c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400610:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400612:	7943      	ldrb	r3, [r0, #5]
  400614:	4419      	add	r1, r3
  400616:	b2c9      	uxtb	r1, r1
  400618:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40061a:	4282      	cmp	r2, r0
  40061c:	d1f9      	bne.n	400612 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  40061e:	b1f1      	cbz	r1, 40065e <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400620:	6962      	ldr	r2, [r4, #20]
  400622:	7813      	ldrb	r3, [r2, #0]
  400624:	2b09      	cmp	r3, #9
  400626:	d00f      	beq.n	400648 <mxt_init_device+0x268>
  400628:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40062a:	3301      	adds	r3, #1
  40062c:	b2db      	uxtb	r3, r3
  40062e:	428b      	cmp	r3, r1
  400630:	d00c      	beq.n	40064c <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400632:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400636:	2809      	cmp	r0, #9
  400638:	d1f7      	bne.n	40062a <mxt_init_device+0x24a>
			return i;
  40063a:	b25b      	sxtb	r3, r3
	if (status == -1) {
  40063c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400640:	d010      	beq.n	400664 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400642:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400644:	2000      	movs	r0, #0
  400646:	e6eb      	b.n	400420 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400648:	2300      	movs	r3, #0
  40064a:	e7f6      	b.n	40063a <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  40064c:	f06f 0003 	mvn.w	r0, #3
  400650:	e6e6      	b.n	400420 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400652:	f06f 0003 	mvn.w	r0, #3
  400656:	e6e3      	b.n	400420 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400658:	f06f 0003 	mvn.w	r0, #3
  40065c:	e6e0      	b.n	400420 <mxt_init_device+0x40>
  40065e:	f06f 0003 	mvn.w	r0, #3
  400662:	e6dd      	b.n	400420 <mxt_init_device+0x40>
  400664:	f06f 0003 	mvn.w	r0, #3
  400668:	e6da      	b.n	400420 <mxt_init_device+0x40>
  40066a:	bf00      	nop
  40066c:	00404291 	.word	0x00404291
  400670:	00401a1d 	.word	0x00401a1d
  400674:	0080001b 	.word	0x0080001b

00400678 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  400678:	6803      	ldr	r3, [r0, #0]
  40067a:	799a      	ldrb	r2, [r3, #6]
  40067c:	b1d2      	cbz	r2, 4006b4 <mxt_get_object_address+0x3c>
{
  40067e:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400680:	6844      	ldr	r4, [r0, #4]
  400682:	7823      	ldrb	r3, [r4, #0]
  400684:	428b      	cmp	r3, r1
  400686:	d00e      	beq.n	4006a6 <mxt_get_object_address+0x2e>
  400688:	1da3      	adds	r3, r4, #6
  40068a:	3a01      	subs	r2, #1
  40068c:	b2d2      	uxtb	r2, r2
  40068e:	3201      	adds	r2, #1
  400690:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400694:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  400698:	4293      	cmp	r3, r2
  40069a:	d009      	beq.n	4006b0 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  40069c:	461c      	mov	r4, r3
  40069e:	f813 0b06 	ldrb.w	r0, [r3], #6
  4006a2:	4288      	cmp	r0, r1
  4006a4:	d1f8      	bne.n	400698 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  4006a6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  4006aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006ae:	4770      	bx	lr
	return 0;
  4006b0:	2000      	movs	r0, #0
  4006b2:	e7fa      	b.n	4006aa <mxt_get_object_address+0x32>
  4006b4:	2000      	movs	r0, #0
  4006b6:	4770      	bx	lr

004006b8 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4006b8:	b530      	push	{r4, r5, lr}
  4006ba:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4006bc:	2300      	movs	r3, #0
  4006be:	9301      	str	r3, [sp, #4]
  4006c0:	9304      	str	r3, [sp, #16]
  4006c2:	9305      	str	r3, [sp, #20]
  4006c4:	f88d 1004 	strb.w	r1, [sp, #4]
  4006c8:	0a0b      	lsrs	r3, r1, #8
  4006ca:	f88d 3005 	strb.w	r3, [sp, #5]
  4006ce:	2302      	movs	r3, #2
  4006d0:	9302      	str	r3, [sp, #8]
  4006d2:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006d4:	6803      	ldr	r3, [r0, #0]
  4006d6:	799a      	ldrb	r2, [r3, #6]
  4006d8:	b1ba      	cbz	r2, 40070a <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4006da:	6844      	ldr	r4, [r0, #4]
  4006dc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4006e0:	428b      	cmp	r3, r1
  4006e2:	d00f      	beq.n	400704 <mxt_write_config_object+0x4c>
  4006e4:	1da3      	adds	r3, r4, #6
  4006e6:	3a01      	subs	r2, #1
  4006e8:	b2d2      	uxtb	r2, r2
  4006ea:	3201      	adds	r2, #1
  4006ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4006f0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4006f4:	4293      	cmp	r3, r2
  4006f6:	d016      	beq.n	400726 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4006f8:	461c      	mov	r4, r3
  4006fa:	3306      	adds	r3, #6
  4006fc:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  400700:	428d      	cmp	r5, r1
  400702:	d1f7      	bne.n	4006f4 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  400704:	78e2      	ldrb	r2, [r4, #3]
  400706:	3201      	adds	r2, #1
  400708:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  40070a:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  40070c:	7b03      	ldrb	r3, [r0, #12]
  40070e:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400712:	a901      	add	r1, sp, #4
  400714:	6880      	ldr	r0, [r0, #8]
  400716:	4b05      	ldr	r3, [pc, #20]	; (40072c <mxt_write_config_object+0x74>)
  400718:	4798      	blx	r3
  40071a:	3000      	adds	r0, #0
  40071c:	bf18      	it	ne
  40071e:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400720:	4240      	negs	r0, r0
  400722:	b007      	add	sp, #28
  400724:	bd30      	pop	{r4, r5, pc}
	return 0;
  400726:	2200      	movs	r2, #0
  400728:	e7ef      	b.n	40070a <mxt_write_config_object+0x52>
  40072a:	bf00      	nop
  40072c:	00401ac9 	.word	0x00401ac9

00400730 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400730:	b500      	push	{lr}
  400732:	b089      	sub	sp, #36	; 0x24
  400734:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400738:	2300      	movs	r3, #0
  40073a:	9303      	str	r3, [sp, #12]
  40073c:	9307      	str	r3, [sp, #28]
  40073e:	f88d 100c 	strb.w	r1, [sp, #12]
  400742:	0a09      	lsrs	r1, r1, #8
  400744:	f88d 100d 	strb.w	r1, [sp, #13]
  400748:	2302      	movs	r3, #2
  40074a:	9304      	str	r3, [sp, #16]
  40074c:	f10d 0307 	add.w	r3, sp, #7
  400750:	9305      	str	r3, [sp, #20]
  400752:	2301      	movs	r3, #1
  400754:	9306      	str	r3, [sp, #24]
  400756:	7b03      	ldrb	r3, [r0, #12]
  400758:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  40075c:	a903      	add	r1, sp, #12
  40075e:	6880      	ldr	r0, [r0, #8]
  400760:	4b04      	ldr	r3, [pc, #16]	; (400774 <mxt_write_config_reg+0x44>)
  400762:	4798      	blx	r3
  400764:	3000      	adds	r0, #0
  400766:	bf18      	it	ne
  400768:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40076a:	4240      	negs	r0, r0
  40076c:	b009      	add	sp, #36	; 0x24
  40076e:	f85d fb04 	ldr.w	pc, [sp], #4
  400772:	bf00      	nop
  400774:	00401ac9 	.word	0x00401ac9

00400778 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  400778:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40077a:	4b07      	ldr	r3, [pc, #28]	; (400798 <mxt_is_message_pending+0x20>)
  40077c:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400780:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400782:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400784:	f002 021f 	and.w	r2, r2, #31
  400788:	2301      	movs	r3, #1
  40078a:	fa03 f202 	lsl.w	r2, r3, r2
  40078e:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400790:	bf0c      	ite	eq
  400792:	4618      	moveq	r0, r3
  400794:	2000      	movne	r0, #0
  400796:	4770      	bx	lr
  400798:	00200707 	.word	0x00200707

0040079c <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  40079c:	b530      	push	{r4, r5, lr}
  40079e:	b087      	sub	sp, #28
  4007a0:	4604      	mov	r4, r0
  4007a2:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  4007a4:	2200      	movs	r2, #0
  4007a6:	2105      	movs	r1, #5
  4007a8:	4b0d      	ldr	r3, [pc, #52]	; (4007e0 <mxt_read_message+0x44>)
  4007aa:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4007ac:	2300      	movs	r3, #0
  4007ae:	9301      	str	r3, [sp, #4]
  4007b0:	9305      	str	r3, [sp, #20]
  4007b2:	f88d 0004 	strb.w	r0, [sp, #4]
  4007b6:	0a00      	lsrs	r0, r0, #8
  4007b8:	f88d 0005 	strb.w	r0, [sp, #5]
  4007bc:	2302      	movs	r3, #2
  4007be:	9302      	str	r3, [sp, #8]
  4007c0:	9503      	str	r5, [sp, #12]
  4007c2:	2309      	movs	r3, #9
  4007c4:	9304      	str	r3, [sp, #16]
  4007c6:	7b23      	ldrb	r3, [r4, #12]
  4007c8:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4007cc:	a901      	add	r1, sp, #4
  4007ce:	68a0      	ldr	r0, [r4, #8]
  4007d0:	4b04      	ldr	r3, [pc, #16]	; (4007e4 <mxt_read_message+0x48>)
  4007d2:	4798      	blx	r3
  4007d4:	3000      	adds	r0, #0
  4007d6:	bf18      	it	ne
  4007d8:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4007da:	4240      	negs	r0, r0
  4007dc:	b007      	add	sp, #28
  4007de:	bd30      	pop	{r4, r5, pc}
  4007e0:	00400679 	.word	0x00400679
  4007e4:	00401a1d 	.word	0x00401a1d

004007e8 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4007ea:	b085      	sub	sp, #20
  4007ec:	4604      	mov	r4, r0
  4007ee:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4007f0:	4d17      	ldr	r5, [pc, #92]	; (400850 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4007f2:	4f18      	ldr	r7, [pc, #96]	; (400854 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4007f4:	4620      	mov	r0, r4
  4007f6:	47a8      	blx	r5
  4007f8:	b328      	cbz	r0, 400846 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4007fa:	a901      	add	r1, sp, #4
  4007fc:	4620      	mov	r0, r4
  4007fe:	47b8      	blx	r7
  400800:	4603      	mov	r3, r0
  400802:	bb10      	cbnz	r0, 40084a <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  400804:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400808:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  40080a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  40080e:	2a09      	cmp	r2, #9
  400810:	d1f0      	bne.n	4007f4 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400812:	7f22      	ldrb	r2, [r4, #28]
  400814:	1a9b      	subs	r3, r3, r2
  400816:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  400818:	f89d 3005 	ldrb.w	r3, [sp, #5]
  40081c:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  40081e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400822:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  400826:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  400828:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  40082c:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  40082e:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400832:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400836:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  40083a:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  40083c:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400840:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400842:	2300      	movs	r3, #0
  400844:	e001      	b.n	40084a <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400846:	f06f 0303 	mvn.w	r3, #3
}
  40084a:	4618      	mov	r0, r3
  40084c:	b005      	add	sp, #20
  40084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400850:	00400779 	.word	0x00400779
  400854:	0040079d 	.word	0x0040079d

00400858 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400858:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40085a:	4810      	ldr	r0, [pc, #64]	; (40089c <sysclk_init+0x44>)
  40085c:	4b10      	ldr	r3, [pc, #64]	; (4008a0 <sysclk_init+0x48>)
  40085e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400860:	213e      	movs	r1, #62	; 0x3e
  400862:	2000      	movs	r0, #0
  400864:	4b0f      	ldr	r3, [pc, #60]	; (4008a4 <sysclk_init+0x4c>)
  400866:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400868:	4c0f      	ldr	r4, [pc, #60]	; (4008a8 <sysclk_init+0x50>)
  40086a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40086c:	2800      	cmp	r0, #0
  40086e:	d0fc      	beq.n	40086a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400870:	4b0e      	ldr	r3, [pc, #56]	; (4008ac <sysclk_init+0x54>)
  400872:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400874:	4a0e      	ldr	r2, [pc, #56]	; (4008b0 <sysclk_init+0x58>)
  400876:	4b0f      	ldr	r3, [pc, #60]	; (4008b4 <sysclk_init+0x5c>)
  400878:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40087a:	4c0f      	ldr	r4, [pc, #60]	; (4008b8 <sysclk_init+0x60>)
  40087c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40087e:	2800      	cmp	r0, #0
  400880:	d0fc      	beq.n	40087c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400882:	2002      	movs	r0, #2
  400884:	4b0d      	ldr	r3, [pc, #52]	; (4008bc <sysclk_init+0x64>)
  400886:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400888:	2000      	movs	r0, #0
  40088a:	4b0d      	ldr	r3, [pc, #52]	; (4008c0 <sysclk_init+0x68>)
  40088c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40088e:	4b0d      	ldr	r3, [pc, #52]	; (4008c4 <sysclk_init+0x6c>)
  400890:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400892:	480d      	ldr	r0, [pc, #52]	; (4008c8 <sysclk_init+0x70>)
  400894:	4b02      	ldr	r3, [pc, #8]	; (4008a0 <sysclk_init+0x48>)
  400896:	4798      	blx	r3
  400898:	bd10      	pop	{r4, pc}
  40089a:	bf00      	nop
  40089c:	07270e00 	.word	0x07270e00
  4008a0:	00401e75 	.word	0x00401e75
  4008a4:	00401719 	.word	0x00401719
  4008a8:	0040176d 	.word	0x0040176d
  4008ac:	0040177d 	.word	0x0040177d
  4008b0:	20183f01 	.word	0x20183f01
  4008b4:	400e0600 	.word	0x400e0600
  4008b8:	0040178d 	.word	0x0040178d
  4008bc:	0040167d 	.word	0x0040167d
  4008c0:	004016b5 	.word	0x004016b5
  4008c4:	00401d69 	.word	0x00401d69
  4008c8:	11e1a300 	.word	0x11e1a300

004008cc <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4008cc:	b510      	push	{r4, lr}
  4008ce:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4008d0:	4b10      	ldr	r3, [pc, #64]	; (400914 <spi_master_init+0x48>)
  4008d2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4008d4:	2380      	movs	r3, #128	; 0x80
  4008d6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008d8:	6863      	ldr	r3, [r4, #4]
  4008da:	f043 0301 	orr.w	r3, r3, #1
  4008de:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4008e0:	6863      	ldr	r3, [r4, #4]
  4008e2:	f043 0310 	orr.w	r3, r3, #16
  4008e6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4008e8:	6863      	ldr	r3, [r4, #4]
  4008ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4008ee:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4008f0:	2100      	movs	r1, #0
  4008f2:	4620      	mov	r0, r4
  4008f4:	4b08      	ldr	r3, [pc, #32]	; (400918 <spi_master_init+0x4c>)
  4008f6:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4008f8:	6863      	ldr	r3, [r4, #4]
  4008fa:	f023 0302 	bic.w	r3, r3, #2
  4008fe:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400900:	6863      	ldr	r3, [r4, #4]
  400902:	f023 0304 	bic.w	r3, r3, #4
  400906:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400908:	2100      	movs	r1, #0
  40090a:	4620      	mov	r0, r4
  40090c:	4b03      	ldr	r3, [pc, #12]	; (40091c <spi_master_init+0x50>)
  40090e:	4798      	blx	r3
  400910:	bd10      	pop	{r4, pc}
  400912:	bf00      	nop
  400914:	004017bd 	.word	0x004017bd
  400918:	004017e9 	.word	0x004017e9
  40091c:	004017ff 	.word	0x004017ff

00400920 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400924:	4604      	mov	r4, r0
  400926:	460d      	mov	r5, r1
  400928:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  40092a:	4915      	ldr	r1, [pc, #84]	; (400980 <spi_master_setup_device+0x60>)
  40092c:	4618      	mov	r0, r3
  40092e:	4b15      	ldr	r3, [pc, #84]	; (400984 <spi_master_setup_device+0x64>)
  400930:	4798      	blx	r3
  400932:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400934:	2300      	movs	r3, #0
  400936:	461a      	mov	r2, r3
  400938:	6829      	ldr	r1, [r5, #0]
  40093a:	4620      	mov	r0, r4
  40093c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 40099c <spi_master_setup_device+0x7c>
  400940:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400942:	2208      	movs	r2, #8
  400944:	6829      	ldr	r1, [r5, #0]
  400946:	4620      	mov	r0, r4
  400948:	4b0f      	ldr	r3, [pc, #60]	; (400988 <spi_master_setup_device+0x68>)
  40094a:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  40094c:	b2fa      	uxtb	r2, r7
  40094e:	6829      	ldr	r1, [r5, #0]
  400950:	4620      	mov	r0, r4
  400952:	4b0e      	ldr	r3, [pc, #56]	; (40098c <spi_master_setup_device+0x6c>)
  400954:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400956:	2208      	movs	r2, #8
  400958:	6829      	ldr	r1, [r5, #0]
  40095a:	4620      	mov	r0, r4
  40095c:	4b0c      	ldr	r3, [pc, #48]	; (400990 <spi_master_setup_device+0x70>)
  40095e:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400960:	0872      	lsrs	r2, r6, #1
  400962:	6829      	ldr	r1, [r5, #0]
  400964:	4620      	mov	r0, r4
  400966:	4b0b      	ldr	r3, [pc, #44]	; (400994 <spi_master_setup_device+0x74>)
  400968:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40096a:	f086 0201 	eor.w	r2, r6, #1
  40096e:	f002 0201 	and.w	r2, r2, #1
  400972:	6829      	ldr	r1, [r5, #0]
  400974:	4620      	mov	r0, r4
  400976:	4b08      	ldr	r3, [pc, #32]	; (400998 <spi_master_setup_device+0x78>)
  400978:	4798      	blx	r3
  40097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40097e:	bf00      	nop
  400980:	08f0d180 	.word	0x08f0d180
  400984:	004018db 	.word	0x004018db
  400988:	004018c7 	.word	0x004018c7
  40098c:	004018f1 	.word	0x004018f1
  400990:	00401881 	.word	0x00401881
  400994:	00401845 	.word	0x00401845
  400998:	00401863 	.word	0x00401863
  40099c:	00401919 	.word	0x00401919

004009a0 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4009a0:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4009a2:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4009a4:	f013 0f04 	tst.w	r3, #4
  4009a8:	d006      	beq.n	4009b8 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4009aa:	6809      	ldr	r1, [r1, #0]
  4009ac:	290f      	cmp	r1, #15
  4009ae:	d900      	bls.n	4009b2 <spi_select_device+0x12>
  4009b0:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4009b2:	4b06      	ldr	r3, [pc, #24]	; (4009cc <spi_select_device+0x2c>)
  4009b4:	4798      	blx	r3
  4009b6:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4009b8:	6809      	ldr	r1, [r1, #0]
  4009ba:	2903      	cmp	r1, #3
  4009bc:	d8f8      	bhi.n	4009b0 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4009be:	2301      	movs	r3, #1
  4009c0:	fa03 f101 	lsl.w	r1, r3, r1
  4009c4:	43c9      	mvns	r1, r1
  4009c6:	4b01      	ldr	r3, [pc, #4]	; (4009cc <spi_select_device+0x2c>)
  4009c8:	4798      	blx	r3
		}
	}
}
  4009ca:	e7f1      	b.n	4009b0 <spi_select_device+0x10>
  4009cc:	004017e9 	.word	0x004017e9

004009d0 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4009d0:	b11a      	cbz	r2, 4009da <spi_write_packet+0xa>
{
  4009d2:	b410      	push	{r4}
  4009d4:	460c      	mov	r4, r1
  4009d6:	4411      	add	r1, r2
  4009d8:	e006      	b.n	4009e8 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4009da:	2000      	movs	r0, #0
  4009dc:	4770      	bx	lr
		val = data[i];
  4009de:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4009e2:	60c3      	str	r3, [r0, #12]
	while (len) {
  4009e4:	42a1      	cmp	r1, r4
  4009e6:	d00c      	beq.n	400a02 <spi_write_packet+0x32>
{
  4009e8:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4009ec:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4009ee:	f012 0f02 	tst.w	r2, #2
  4009f2:	d1f4      	bne.n	4009de <spi_write_packet+0xe>
			if (!timeout--) {
  4009f4:	3b01      	subs	r3, #1
  4009f6:	d1f9      	bne.n	4009ec <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4009f8:	f06f 0002 	mvn.w	r0, #2
}
  4009fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a00:	4770      	bx	lr
	return STATUS_OK;
  400a02:	2000      	movs	r0, #0
  400a04:	e7fa      	b.n	4009fc <spi_write_packet+0x2c>

00400a06 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400a06:	b13a      	cbz	r2, 400a18 <spi_read_packet+0x12>
{
  400a08:	b470      	push	{r4, r5, r6}
  400a0a:	4615      	mov	r5, r2
  400a0c:	460c      	mov	r4, r1
  400a0e:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a10:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400a12:	f240 2101 	movw	r1, #513	; 0x201
  400a16:	e012      	b.n	400a3e <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400a18:	2000      	movs	r0, #0
  400a1a:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a1c:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400a1e:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400a22:	6902      	ldr	r2, [r0, #16]
  400a24:	ea31 0202 	bics.w	r2, r1, r2
  400a28:	d004      	beq.n	400a34 <spi_read_packet+0x2e>
			if (!timeout--) {
  400a2a:	3b01      	subs	r3, #1
  400a2c:	d1f9      	bne.n	400a22 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400a2e:	f06f 0002 	mvn.w	r0, #2
  400a32:	e00e      	b.n	400a52 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400a34:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400a36:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400a3a:	42a5      	cmp	r5, r4
  400a3c:	d00b      	beq.n	400a56 <spi_read_packet+0x50>
{
  400a3e:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400a42:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400a44:	f012 0f02 	tst.w	r2, #2
  400a48:	d1e8      	bne.n	400a1c <spi_read_packet+0x16>
			if (!timeout--) {
  400a4a:	3b01      	subs	r3, #1
  400a4c:	d1f9      	bne.n	400a42 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400a4e:	f06f 0002 	mvn.w	r0, #2
}
  400a52:	bc70      	pop	{r4, r5, r6}
  400a54:	4770      	bx	lr
	return STATUS_OK;
  400a56:	2000      	movs	r0, #0
  400a58:	e7fb      	b.n	400a52 <spi_read_packet+0x4c>
	...

00400a5c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400a60:	b980      	cbnz	r0, 400a84 <_read+0x28>
  400a62:	460c      	mov	r4, r1
  400a64:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400a66:	2a00      	cmp	r2, #0
  400a68:	dd0f      	ble.n	400a8a <_read+0x2e>
  400a6a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400a6c:	4e08      	ldr	r6, [pc, #32]	; (400a90 <_read+0x34>)
  400a6e:	4d09      	ldr	r5, [pc, #36]	; (400a94 <_read+0x38>)
  400a70:	6830      	ldr	r0, [r6, #0]
  400a72:	4621      	mov	r1, r4
  400a74:	682b      	ldr	r3, [r5, #0]
  400a76:	4798      	blx	r3
		ptr++;
  400a78:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400a7a:	42bc      	cmp	r4, r7
  400a7c:	d1f8      	bne.n	400a70 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400a7e:	4640      	mov	r0, r8
  400a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a84:	f04f 38ff 	mov.w	r8, #4294967295
  400a88:	e7f9      	b.n	400a7e <_read+0x22>
	for (; len > 0; --len) {
  400a8a:	4680      	mov	r8, r0
  400a8c:	e7f7      	b.n	400a7e <_read+0x22>
  400a8e:	bf00      	nop
  400a90:	2040c818 	.word	0x2040c818
  400a94:	2040c810 	.word	0x2040c810

00400a98 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400a98:	3801      	subs	r0, #1
  400a9a:	2802      	cmp	r0, #2
  400a9c:	d815      	bhi.n	400aca <_write+0x32>
{
  400a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400aa2:	460e      	mov	r6, r1
  400aa4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400aa6:	b19a      	cbz	r2, 400ad0 <_write+0x38>
  400aa8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400aaa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400ae4 <_write+0x4c>
  400aae:	4f0c      	ldr	r7, [pc, #48]	; (400ae0 <_write+0x48>)
  400ab0:	f8d8 0000 	ldr.w	r0, [r8]
  400ab4:	f815 1b01 	ldrb.w	r1, [r5], #1
  400ab8:	683b      	ldr	r3, [r7, #0]
  400aba:	4798      	blx	r3
  400abc:	2800      	cmp	r0, #0
  400abe:	db0a      	blt.n	400ad6 <_write+0x3e>
  400ac0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400ac2:	3c01      	subs	r4, #1
  400ac4:	d1f4      	bne.n	400ab0 <_write+0x18>
  400ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400aca:	f04f 30ff 	mov.w	r0, #4294967295
  400ace:	4770      	bx	lr
	for (; len != 0; --len) {
  400ad0:	4610      	mov	r0, r2
  400ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400ad6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ade:	bf00      	nop
  400ae0:	2040c814 	.word	0x2040c814
  400ae4:	2040c818 	.word	0x2040c818

00400ae8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400aec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400af0:	4b9e      	ldr	r3, [pc, #632]	; (400d6c <board_init+0x284>)
  400af2:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400af8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400afc:	4b9c      	ldr	r3, [pc, #624]	; (400d70 <board_init+0x288>)
  400afe:	2200      	movs	r2, #0
  400b00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400b04:	695a      	ldr	r2, [r3, #20]
  400b06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400b0a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b10:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400b14:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400b18:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400b1c:	f007 0007 	and.w	r0, r7, #7
  400b20:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400b22:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400b26:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400b2a:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400b2e:	f3bf 8f4f 	dsb	sy
  400b32:	f04f 34ff 	mov.w	r4, #4294967295
  400b36:	fa04 fc00 	lsl.w	ip, r4, r0
  400b3a:	fa06 f000 	lsl.w	r0, r6, r0
  400b3e:	fa04 f40e 	lsl.w	r4, r4, lr
  400b42:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400b46:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400b48:	463a      	mov	r2, r7
  400b4a:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400b4c:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400b50:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400b54:	3a01      	subs	r2, #1
  400b56:	4423      	add	r3, r4
  400b58:	f1b2 3fff 	cmp.w	r2, #4294967295
  400b5c:	d1f6      	bne.n	400b4c <board_init+0x64>
        } while(sets--);
  400b5e:	3e01      	subs	r6, #1
  400b60:	4460      	add	r0, ip
  400b62:	f1b6 3fff 	cmp.w	r6, #4294967295
  400b66:	d1ef      	bne.n	400b48 <board_init+0x60>
  400b68:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400b6c:	4b80      	ldr	r3, [pc, #512]	; (400d70 <board_init+0x288>)
  400b6e:	695a      	ldr	r2, [r3, #20]
  400b70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400b74:	615a      	str	r2, [r3, #20]
  400b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b7a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b7e:	4a7d      	ldr	r2, [pc, #500]	; (400d74 <board_init+0x28c>)
  400b80:	497d      	ldr	r1, [pc, #500]	; (400d78 <board_init+0x290>)
  400b82:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b84:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400b88:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400b8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b8e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b92:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b96:	f022 0201 	bic.w	r2, r2, #1
  400b9a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400b9e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ba2:	f022 0201 	bic.w	r2, r2, #1
  400ba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400baa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bae:	f3bf 8f6f 	isb	sy
  400bb2:	200a      	movs	r0, #10
  400bb4:	4c71      	ldr	r4, [pc, #452]	; (400d7c <board_init+0x294>)
  400bb6:	47a0      	blx	r4
  400bb8:	200b      	movs	r0, #11
  400bba:	47a0      	blx	r4
  400bbc:	200c      	movs	r0, #12
  400bbe:	47a0      	blx	r4
  400bc0:	2010      	movs	r0, #16
  400bc2:	47a0      	blx	r4
  400bc4:	2011      	movs	r0, #17
  400bc6:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bc8:	4e6d      	ldr	r6, [pc, #436]	; (400d80 <board_init+0x298>)
  400bca:	f44f 7880 	mov.w	r8, #256	; 0x100
  400bce:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bd2:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bd6:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bda:	4c6a      	ldr	r4, [pc, #424]	; (400d84 <board_init+0x29c>)
  400bdc:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400be0:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400be2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400be6:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400be8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bec:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400bee:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400bf0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400bf4:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400bfa:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bfc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400c02:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400c04:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400c08:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400c0c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400c14:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c16:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c1a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c1c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c1e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c22:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400c24:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c28:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c2a:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400c2c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c30:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c32:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400c34:	4a54      	ldr	r2, [pc, #336]	; (400d88 <board_init+0x2a0>)
  400c36:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400c3a:	f043 0310 	orr.w	r3, r3, #16
  400c3e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400c42:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400c46:	2310      	movs	r3, #16
  400c48:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c4e:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c50:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400c56:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400c58:	4319      	orrs	r1, r3
  400c5a:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c5c:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c5e:	4319      	orrs	r1, r3
  400c60:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c62:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400c64:	2208      	movs	r2, #8
  400c66:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c68:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c6c:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c6e:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c70:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c74:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400c76:	f021 0108 	bic.w	r1, r1, #8
  400c7a:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c7c:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400c7e:	f021 0108 	bic.w	r1, r1, #8
  400c82:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c84:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400c86:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c88:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c8c:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c8e:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c90:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c94:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400c96:	f022 0210 	bic.w	r2, r2, #16
  400c9a:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c9c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400c9e:	f022 0210 	bic.w	r2, r2, #16
  400ca2:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ca4:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400ca6:	2300      	movs	r3, #0
  400ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400cac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cb0:	4630      	mov	r0, r6
  400cb2:	4f36      	ldr	r7, [pc, #216]	; (400d8c <board_init+0x2a4>)
  400cb4:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400cb6:	2300      	movs	r3, #0
  400cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400cbc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cc0:	4630      	mov	r0, r6
  400cc2:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400cc4:	2301      	movs	r3, #1
  400cc6:	22ff      	movs	r2, #255	; 0xff
  400cc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ccc:	4630      	mov	r0, r6
  400cce:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400cd0:	2301      	movs	r3, #1
  400cd2:	223f      	movs	r2, #63	; 0x3f
  400cd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cd8:	482d      	ldr	r0, [pc, #180]	; (400d90 <board_init+0x2a8>)
  400cda:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400cdc:	2301      	movs	r3, #1
  400cde:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400ce2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ce6:	4620      	mov	r0, r4
  400ce8:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400cea:	2301      	movs	r3, #1
  400cec:	4642      	mov	r2, r8
  400cee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cf2:	4630      	mov	r0, r6
  400cf4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400cf6:	2301      	movs	r3, #1
  400cf8:	462a      	mov	r2, r5
  400cfa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cfe:	4630      	mov	r0, r6
  400d00:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400d02:	2301      	movs	r3, #1
  400d04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d0c:	4821      	ldr	r0, [pc, #132]	; (400d94 <board_init+0x2ac>)
  400d0e:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400d10:	2300      	movs	r3, #0
  400d12:	f44f 7200 	mov.w	r2, #512	; 0x200
  400d16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d1a:	4630      	mov	r0, r6
  400d1c:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
  400d22:	4630      	mov	r0, r6
  400d24:	4b1c      	ldr	r3, [pc, #112]	; (400d98 <board_init+0x2b0>)
  400d26:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400d28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d2c:	2074      	movs	r0, #116	; 0x74
  400d2e:	4c1b      	ldr	r4, [pc, #108]	; (400d9c <board_init+0x2b4>)
  400d30:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400d32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d36:	2075      	movs	r0, #117	; 0x75
  400d38:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400d3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d3e:	2076      	movs	r0, #118	; 0x76
  400d40:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400d42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d46:	207b      	movs	r0, #123	; 0x7b
  400d48:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400d4a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d4e:	2018      	movs	r0, #24
  400d50:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400d52:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d56:	2006      	movs	r0, #6
  400d58:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400d5a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d5e:	2053      	movs	r0, #83	; 0x53
  400d60:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400d62:	2053      	movs	r0, #83	; 0x53
  400d64:	4b0e      	ldr	r3, [pc, #56]	; (400da0 <board_init+0x2b8>)
  400d66:	4798      	blx	r3
  400d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d6c:	400e1850 	.word	0x400e1850
  400d70:	e000ed00 	.word	0xe000ed00
  400d74:	400e0c00 	.word	0x400e0c00
  400d78:	5a00080c 	.word	0x5a00080c
  400d7c:	0040179d 	.word	0x0040179d
  400d80:	400e1200 	.word	0x400e1200
  400d84:	400e0e00 	.word	0x400e0e00
  400d88:	40088000 	.word	0x40088000
  400d8c:	004013c9 	.word	0x004013c9
  400d90:	400e1600 	.word	0x400e1600
  400d94:	400e1400 	.word	0x400e1400
  400d98:	004012d5 	.word	0x004012d5
  400d9c:	00401499 	.word	0x00401499
  400da0:	00401461 	.word	0x00401461

00400da4 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400da4:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400da6:	6804      	ldr	r4, [r0, #0]
  400da8:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400dac:	d302      	bcc.n	400db4 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400dae:	f240 143f 	movw	r4, #319	; 0x13f
  400db2:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400db4:	6814      	ldr	r4, [r2, #0]
  400db6:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400dba:	d302      	bcc.n	400dc2 <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400dbc:	f240 143f 	movw	r4, #319	; 0x13f
  400dc0:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400dc2:	680c      	ldr	r4, [r1, #0]
  400dc4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400dc8:	d302      	bcc.n	400dd0 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400dca:	f240 14df 	movw	r4, #479	; 0x1df
  400dce:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400dd0:	681c      	ldr	r4, [r3, #0]
  400dd2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400dd6:	d302      	bcc.n	400dde <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400dd8:	f240 14df 	movw	r4, #479	; 0x1df
  400ddc:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400dde:	6804      	ldr	r4, [r0, #0]
  400de0:	6815      	ldr	r5, [r2, #0]
  400de2:	42ac      	cmp	r4, r5
  400de4:	d901      	bls.n	400dea <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400de6:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400de8:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400dea:	680a      	ldr	r2, [r1, #0]
  400dec:	6818      	ldr	r0, [r3, #0]
  400dee:	4282      	cmp	r2, r0
  400df0:	d901      	bls.n	400df6 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400df2:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400df4:	601a      	str	r2, [r3, #0]
	}
}
  400df6:	bc30      	pop	{r4, r5}
  400df8:	4770      	bx	lr
	...

00400dfc <ili9488_write_ram_prepare>:
{
  400dfc:	b510      	push	{r4, lr}
  400dfe:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400e00:	2006      	movs	r0, #6
  400e02:	4b0a      	ldr	r3, [pc, #40]	; (400e2c <ili9488_write_ram_prepare+0x30>)
  400e04:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400e06:	2300      	movs	r3, #0
  400e08:	2203      	movs	r2, #3
  400e0a:	212c      	movs	r1, #44	; 0x2c
  400e0c:	4808      	ldr	r0, [pc, #32]	; (400e30 <ili9488_write_ram_prepare+0x34>)
  400e0e:	4c09      	ldr	r4, [pc, #36]	; (400e34 <ili9488_write_ram_prepare+0x38>)
  400e10:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400e12:	2300      	movs	r3, #0
  400e14:	9301      	str	r3, [sp, #4]
  400e16:	9b01      	ldr	r3, [sp, #4]
  400e18:	2bfe      	cmp	r3, #254	; 0xfe
  400e1a:	d805      	bhi.n	400e28 <ili9488_write_ram_prepare+0x2c>
  400e1c:	9b01      	ldr	r3, [sp, #4]
  400e1e:	3301      	adds	r3, #1
  400e20:	9301      	str	r3, [sp, #4]
  400e22:	9b01      	ldr	r3, [sp, #4]
  400e24:	2bfe      	cmp	r3, #254	; 0xfe
  400e26:	d9f9      	bls.n	400e1c <ili9488_write_ram_prepare+0x20>
}
  400e28:	b002      	add	sp, #8
  400e2a:	bd10      	pop	{r4, pc}
  400e2c:	0040147d 	.word	0x0040147d
  400e30:	40008000 	.word	0x40008000
  400e34:	00401811 	.word	0x00401811

00400e38 <ili9488_write_register>:
{
  400e38:	b570      	push	{r4, r5, r6, lr}
  400e3a:	b082      	sub	sp, #8
  400e3c:	4605      	mov	r5, r0
  400e3e:	460e      	mov	r6, r1
  400e40:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400e42:	2006      	movs	r0, #6
  400e44:	4b14      	ldr	r3, [pc, #80]	; (400e98 <ili9488_write_register+0x60>)
  400e46:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400e48:	2300      	movs	r3, #0
  400e4a:	2203      	movs	r2, #3
  400e4c:	4629      	mov	r1, r5
  400e4e:	4813      	ldr	r0, [pc, #76]	; (400e9c <ili9488_write_register+0x64>)
  400e50:	4d13      	ldr	r5, [pc, #76]	; (400ea0 <ili9488_write_register+0x68>)
  400e52:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400e54:	2300      	movs	r3, #0
  400e56:	9301      	str	r3, [sp, #4]
  400e58:	9b01      	ldr	r3, [sp, #4]
  400e5a:	2bfe      	cmp	r3, #254	; 0xfe
  400e5c:	d805      	bhi.n	400e6a <ili9488_write_register+0x32>
  400e5e:	9b01      	ldr	r3, [sp, #4]
  400e60:	3301      	adds	r3, #1
  400e62:	9301      	str	r3, [sp, #4]
  400e64:	9b01      	ldr	r3, [sp, #4]
  400e66:	2bfe      	cmp	r3, #254	; 0xfe
  400e68:	d9f9      	bls.n	400e5e <ili9488_write_register+0x26>
	if(size > 0) {
  400e6a:	b90c      	cbnz	r4, 400e70 <ili9488_write_register+0x38>
}
  400e6c:	b002      	add	sp, #8
  400e6e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400e70:	2006      	movs	r0, #6
  400e72:	4b0c      	ldr	r3, [pc, #48]	; (400ea4 <ili9488_write_register+0x6c>)
  400e74:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400e76:	4622      	mov	r2, r4
  400e78:	4631      	mov	r1, r6
  400e7a:	4808      	ldr	r0, [pc, #32]	; (400e9c <ili9488_write_register+0x64>)
  400e7c:	4b0a      	ldr	r3, [pc, #40]	; (400ea8 <ili9488_write_register+0x70>)
  400e7e:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400e80:	2300      	movs	r3, #0
  400e82:	9301      	str	r3, [sp, #4]
  400e84:	9b01      	ldr	r3, [sp, #4]
  400e86:	2b5e      	cmp	r3, #94	; 0x5e
  400e88:	d8f0      	bhi.n	400e6c <ili9488_write_register+0x34>
  400e8a:	9b01      	ldr	r3, [sp, #4]
  400e8c:	3301      	adds	r3, #1
  400e8e:	9301      	str	r3, [sp, #4]
  400e90:	9b01      	ldr	r3, [sp, #4]
  400e92:	2b5e      	cmp	r3, #94	; 0x5e
  400e94:	d9f9      	bls.n	400e8a <ili9488_write_register+0x52>
  400e96:	e7e9      	b.n	400e6c <ili9488_write_register+0x34>
  400e98:	0040147d 	.word	0x0040147d
  400e9c:	40008000 	.word	0x40008000
  400ea0:	00401811 	.word	0x00401811
  400ea4:	00401461 	.word	0x00401461
  400ea8:	004009d1 	.word	0x004009d1

00400eac <ili9488_write_ram_buffer>:
{
  400eac:	b530      	push	{r4, r5, lr}
  400eae:	b083      	sub	sp, #12
  400eb0:	4604      	mov	r4, r0
  400eb2:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400eb4:	2006      	movs	r0, #6
  400eb6:	4b0a      	ldr	r3, [pc, #40]	; (400ee0 <ili9488_write_ram_buffer+0x34>)
  400eb8:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400eba:	462a      	mov	r2, r5
  400ebc:	4621      	mov	r1, r4
  400ebe:	4809      	ldr	r0, [pc, #36]	; (400ee4 <ili9488_write_ram_buffer+0x38>)
  400ec0:	4b09      	ldr	r3, [pc, #36]	; (400ee8 <ili9488_write_ram_buffer+0x3c>)
  400ec2:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400ec4:	2300      	movs	r3, #0
  400ec6:	9301      	str	r3, [sp, #4]
  400ec8:	9b01      	ldr	r3, [sp, #4]
  400eca:	2bfe      	cmp	r3, #254	; 0xfe
  400ecc:	d805      	bhi.n	400eda <ili9488_write_ram_buffer+0x2e>
  400ece:	9b01      	ldr	r3, [sp, #4]
  400ed0:	3301      	adds	r3, #1
  400ed2:	9301      	str	r3, [sp, #4]
  400ed4:	9b01      	ldr	r3, [sp, #4]
  400ed6:	2bfe      	cmp	r3, #254	; 0xfe
  400ed8:	d9f9      	bls.n	400ece <ili9488_write_ram_buffer+0x22>
}
  400eda:	b003      	add	sp, #12
  400edc:	bd30      	pop	{r4, r5, pc}
  400ede:	bf00      	nop
  400ee0:	00401461 	.word	0x00401461
  400ee4:	40008000 	.word	0x40008000
  400ee8:	004009d1 	.word	0x004009d1

00400eec <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400eec:	4601      	mov	r1, r0
  400eee:	b130      	cbz	r0, 400efe <ili9488_delay+0x12>
  400ef0:	4a03      	ldr	r2, [pc, #12]	; (400f00 <ili9488_delay+0x14>)
{
  400ef2:	4b04      	ldr	r3, [pc, #16]	; (400f04 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400ef4:	3b01      	subs	r3, #1
  400ef6:	d1fd      	bne.n	400ef4 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400ef8:	4291      	cmp	r1, r2
  400efa:	d8fa      	bhi.n	400ef2 <ili9488_delay+0x6>
  400efc:	4770      	bx	lr
  400efe:	4770      	bx	lr
  400f00:	000186a1 	.word	0x000186a1
  400f04:	000186a0 	.word	0x000186a0

00400f08 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400f08:	b500      	push	{lr}
  400f0a:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400f0c:	b958      	cbnz	r0, 400f26 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400f0e:	2348      	movs	r3, #72	; 0x48
  400f10:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400f14:	2201      	movs	r2, #1
  400f16:	f10d 0107 	add.w	r1, sp, #7
  400f1a:	2036      	movs	r0, #54	; 0x36
  400f1c:	4b04      	ldr	r3, [pc, #16]	; (400f30 <ili9488_set_display_direction+0x28>)
  400f1e:	4798      	blx	r3
}
  400f20:	b003      	add	sp, #12
  400f22:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400f26:	23e8      	movs	r3, #232	; 0xe8
  400f28:	f88d 3007 	strb.w	r3, [sp, #7]
  400f2c:	e7f2      	b.n	400f14 <ili9488_set_display_direction+0xc>
  400f2e:	bf00      	nop
  400f30:	00400e39 	.word	0x00400e39

00400f34 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400f34:	b510      	push	{r4, lr}
  400f36:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400f38:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400f3c:	3a01      	subs	r2, #1
  400f3e:	4402      	add	r2, r0
  400f40:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400f44:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400f48:	3b01      	subs	r3, #1
  400f4a:	4419      	add	r1, r3
  400f4c:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400f50:	0a03      	lsrs	r3, r0, #8
  400f52:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400f56:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400f5a:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400f5e:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400f62:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400f66:	2204      	movs	r2, #4
  400f68:	eb0d 0102 	add.w	r1, sp, r2
  400f6c:	202a      	movs	r0, #42	; 0x2a
  400f6e:	4c10      	ldr	r4, [pc, #64]	; (400fb0 <ili9488_set_window+0x7c>)
  400f70:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400f72:	2200      	movs	r2, #0
  400f74:	4611      	mov	r1, r2
  400f76:	4610      	mov	r0, r2
  400f78:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400f7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400f7e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400f82:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400f86:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400f8a:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400f8e:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400f92:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400f96:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400f9a:	2204      	movs	r2, #4
  400f9c:	eb0d 0102 	add.w	r1, sp, r2
  400fa0:	202b      	movs	r0, #43	; 0x2b
  400fa2:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400fa4:	2200      	movs	r2, #0
  400fa6:	4611      	mov	r1, r2
  400fa8:	4610      	mov	r0, r2
  400faa:	47a0      	blx	r4
}
  400fac:	b004      	add	sp, #16
  400fae:	bd10      	pop	{r4, pc}
  400fb0:	00400e39 	.word	0x00400e39

00400fb4 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400fb4:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400fb6:	2200      	movs	r2, #0
  400fb8:	4611      	mov	r1, r2
  400fba:	2029      	movs	r0, #41	; 0x29
  400fbc:	4b01      	ldr	r3, [pc, #4]	; (400fc4 <ili9488_display_on+0x10>)
  400fbe:	4798      	blx	r3
  400fc0:	bd08      	pop	{r3, pc}
  400fc2:	bf00      	nop
  400fc4:	00400e39 	.word	0x00400e39

00400fc8 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400fc8:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400fca:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400fce:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400fd2:	4b06      	ldr	r3, [pc, #24]	; (400fec <ili9488_set_foreground_color+0x24>)
  400fd4:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400fd8:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400fda:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400fdc:	7098      	strb	r0, [r3, #2]
  400fde:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400fe0:	4293      	cmp	r3, r2
  400fe2:	d1f9      	bne.n	400fd8 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop
  400fec:	204009dc 	.word	0x204009dc

00400ff0 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400ff0:	b510      	push	{r4, lr}
  400ff2:	b084      	sub	sp, #16
  400ff4:	f8ad 0006 	strh.w	r0, [sp, #6]
  400ff8:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400ffc:	0a03      	lsrs	r3, r0, #8
  400ffe:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  401002:	b2c0      	uxtb	r0, r0
  401004:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  401008:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  40100c:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401010:	2204      	movs	r2, #4
  401012:	a903      	add	r1, sp, #12
  401014:	202a      	movs	r0, #42	; 0x2a
  401016:	4c0e      	ldr	r4, [pc, #56]	; (401050 <ili9488_set_cursor_position+0x60>)
  401018:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40101a:	2200      	movs	r2, #0
  40101c:	4611      	mov	r1, r2
  40101e:	4610      	mov	r0, r2
  401020:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  401022:	f89d 2005 	ldrb.w	r2, [sp, #5]
  401026:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  40102a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40102e:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  401032:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  401036:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  40103a:	2204      	movs	r2, #4
  40103c:	a903      	add	r1, sp, #12
  40103e:	202b      	movs	r0, #43	; 0x2b
  401040:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401042:	2200      	movs	r2, #0
  401044:	4611      	mov	r1, r2
  401046:	4610      	mov	r0, r2
  401048:	47a0      	blx	r4
}
  40104a:	b004      	add	sp, #16
  40104c:	bd10      	pop	{r4, pc}
  40104e:	bf00      	nop
  401050:	00400e39 	.word	0x00400e39

00401054 <ili9488_init>:
{
  401054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401058:	b087      	sub	sp, #28
  40105a:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  40105c:	2703      	movs	r7, #3
  40105e:	ae06      	add	r6, sp, #24
  401060:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  401064:	4d5d      	ldr	r5, [pc, #372]	; (4011dc <ili9488_init+0x188>)
  401066:	4628      	mov	r0, r5
  401068:	4b5d      	ldr	r3, [pc, #372]	; (4011e0 <ili9488_init+0x18c>)
  40106a:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  40106c:	2400      	movs	r4, #0
  40106e:	9400      	str	r4, [sp, #0]
  401070:	4b5c      	ldr	r3, [pc, #368]	; (4011e4 <ili9488_init+0x190>)
  401072:	463a      	mov	r2, r7
  401074:	4631      	mov	r1, r6
  401076:	4628      	mov	r0, r5
  401078:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401214 <ili9488_init+0x1c0>
  40107c:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  40107e:	4622      	mov	r2, r4
  401080:	4639      	mov	r1, r7
  401082:	4628      	mov	r0, r5
  401084:	4b58      	ldr	r3, [pc, #352]	; (4011e8 <ili9488_init+0x194>)
  401086:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  401088:	4631      	mov	r1, r6
  40108a:	4628      	mov	r0, r5
  40108c:	4b57      	ldr	r3, [pc, #348]	; (4011ec <ili9488_init+0x198>)
  40108e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401090:	2001      	movs	r0, #1
  401092:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  401094:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  401096:	4622      	mov	r2, r4
  401098:	4621      	mov	r1, r4
  40109a:	4e55      	ldr	r6, [pc, #340]	; (4011f0 <ili9488_init+0x19c>)
  40109c:	47b0      	blx	r6
	ili9488_delay(200);
  40109e:	20c8      	movs	r0, #200	; 0xc8
  4010a0:	4d54      	ldr	r5, [pc, #336]	; (4011f4 <ili9488_init+0x1a0>)
  4010a2:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4010a4:	4622      	mov	r2, r4
  4010a6:	4621      	mov	r1, r4
  4010a8:	2011      	movs	r0, #17
  4010aa:	47b0      	blx	r6
	ili9488_delay(200);
  4010ac:	20c8      	movs	r0, #200	; 0xc8
  4010ae:	47a8      	blx	r5
	reg = 0x81;
  4010b0:	2381      	movs	r3, #129	; 0x81
  4010b2:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  4010b6:	f88d 400b 	strb.w	r4, [sp, #11]
  4010ba:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4010bc:	f04f 0801 	mov.w	r8, #1
  4010c0:	4f4b      	ldr	r7, [pc, #300]	; (4011f0 <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  4010c2:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4010c4:	4642      	mov	r2, r8
  4010c6:	f10d 010a 	add.w	r1, sp, #10
  4010ca:	20fb      	movs	r0, #251	; 0xfb
  4010cc:	47b8      	blx	r7
		reg++;
  4010ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4010d2:	3301      	adds	r3, #1
  4010d4:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  4010d8:	9503      	str	r5, [sp, #12]
  4010da:	9b03      	ldr	r3, [sp, #12]
  4010dc:	2bfe      	cmp	r3, #254	; 0xfe
  4010de:	d805      	bhi.n	4010ec <ili9488_init+0x98>
  4010e0:	9b03      	ldr	r3, [sp, #12]
  4010e2:	3301      	adds	r3, #1
  4010e4:	9303      	str	r3, [sp, #12]
  4010e6:	9b03      	ldr	r3, [sp, #12]
  4010e8:	2bfe      	cmp	r3, #254	; 0xfe
  4010ea:	d9f9      	bls.n	4010e0 <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  4010ec:	462a      	mov	r2, r5
  4010ee:	4629      	mov	r1, r5
  4010f0:	20d3      	movs	r0, #211	; 0xd3
  4010f2:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  4010f4:	2006      	movs	r0, #6
  4010f6:	4b40      	ldr	r3, [pc, #256]	; (4011f8 <ili9488_init+0x1a4>)
  4010f8:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  4010fa:	4642      	mov	r2, r8
  4010fc:	f10d 0109 	add.w	r1, sp, #9
  401100:	4836      	ldr	r0, [pc, #216]	; (4011dc <ili9488_init+0x188>)
  401102:	4b3e      	ldr	r3, [pc, #248]	; (4011fc <ili9488_init+0x1a8>)
  401104:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  401106:	9503      	str	r5, [sp, #12]
  401108:	9b03      	ldr	r3, [sp, #12]
  40110a:	2bfe      	cmp	r3, #254	; 0xfe
  40110c:	d805      	bhi.n	40111a <ili9488_init+0xc6>
  40110e:	9b03      	ldr	r3, [sp, #12]
  401110:	3301      	adds	r3, #1
  401112:	9303      	str	r3, [sp, #12]
  401114:	9b03      	ldr	r3, [sp, #12]
  401116:	2bfe      	cmp	r3, #254	; 0xfe
  401118:	d9f9      	bls.n	40110e <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  40111a:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40111e:	40b3      	lsls	r3, r6
  401120:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  401122:	4642      	mov	r2, r8
  401124:	f10d 010b 	add.w	r1, sp, #11
  401128:	20fb      	movs	r0, #251	; 0xfb
  40112a:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  40112c:	9503      	str	r5, [sp, #12]
  40112e:	9a03      	ldr	r2, [sp, #12]
  401130:	f640 73fe 	movw	r3, #4094	; 0xffe
  401134:	429a      	cmp	r2, r3
  401136:	d806      	bhi.n	401146 <ili9488_init+0xf2>
  401138:	461a      	mov	r2, r3
  40113a:	9b03      	ldr	r3, [sp, #12]
  40113c:	3301      	adds	r3, #1
  40113e:	9303      	str	r3, [sp, #12]
  401140:	9b03      	ldr	r3, [sp, #12]
  401142:	4293      	cmp	r3, r2
  401144:	d9f9      	bls.n	40113a <ili9488_init+0xe6>
  401146:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401148:	f116 0f08 	cmn.w	r6, #8
  40114c:	d1ba      	bne.n	4010c4 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40114e:	f249 4388 	movw	r3, #38024	; 0x9488
  401152:	429c      	cmp	r4, r3
  401154:	d003      	beq.n	40115e <ili9488_init+0x10a>
		return 1;
  401156:	2001      	movs	r0, #1
}
  401158:	b007      	add	sp, #28
  40115a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40115e:	ad06      	add	r5, sp, #24
  401160:	2348      	movs	r3, #72	; 0x48
  401162:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401166:	2201      	movs	r2, #1
  401168:	4629      	mov	r1, r5
  40116a:	2036      	movs	r0, #54	; 0x36
  40116c:	4e20      	ldr	r6, [pc, #128]	; (4011f0 <ili9488_init+0x19c>)
  40116e:	47b0      	blx	r6
	ili9488_delay(100);
  401170:	2064      	movs	r0, #100	; 0x64
  401172:	4c20      	ldr	r4, [pc, #128]	; (4011f4 <ili9488_init+0x1a0>)
  401174:	47a0      	blx	r4
	param = 0x04;
  401176:	2304      	movs	r3, #4
  401178:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  40117c:	2201      	movs	r2, #1
  40117e:	4629      	mov	r1, r5
  401180:	20cf      	movs	r0, #207	; 0xcf
  401182:	47b0      	blx	r6
	ili9488_delay(100);
  401184:	2064      	movs	r0, #100	; 0x64
  401186:	47a0      	blx	r4
	param = 0x06;
  401188:	2306      	movs	r3, #6
  40118a:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40118e:	2201      	movs	r2, #1
  401190:	4629      	mov	r1, r5
  401192:	203a      	movs	r0, #58	; 0x3a
  401194:	47b0      	blx	r6
	ili9488_delay(100);
  401196:	2064      	movs	r0, #100	; 0x64
  401198:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  40119a:	2200      	movs	r2, #0
  40119c:	4611      	mov	r1, r2
  40119e:	2013      	movs	r0, #19
  4011a0:	47b0      	blx	r6
	ili9488_delay(100);
  4011a2:	2064      	movs	r0, #100	; 0x64
  4011a4:	47a0      	blx	r4
	ili9488_display_on();
  4011a6:	4b16      	ldr	r3, [pc, #88]	; (401200 <ili9488_init+0x1ac>)
  4011a8:	4798      	blx	r3
	ili9488_delay(100);
  4011aa:	2064      	movs	r0, #100	; 0x64
  4011ac:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  4011ae:	2000      	movs	r0, #0
  4011b0:	4b14      	ldr	r3, [pc, #80]	; (401204 <ili9488_init+0x1b0>)
  4011b2:	4798      	blx	r3
	ili9488_delay(100);
  4011b4:	2064      	movs	r0, #100	; 0x64
  4011b6:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4011b8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  4011bc:	f8b9 2000 	ldrh.w	r2, [r9]
  4011c0:	2100      	movs	r1, #0
  4011c2:	4608      	mov	r0, r1
  4011c4:	4c10      	ldr	r4, [pc, #64]	; (401208 <ili9488_init+0x1b4>)
  4011c6:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  4011c8:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4011cc:	4b0f      	ldr	r3, [pc, #60]	; (40120c <ili9488_init+0x1b8>)
  4011ce:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  4011d0:	2100      	movs	r1, #0
  4011d2:	4608      	mov	r0, r1
  4011d4:	4b0e      	ldr	r3, [pc, #56]	; (401210 <ili9488_init+0x1bc>)
  4011d6:	4798      	blx	r3
	return 0;
  4011d8:	2000      	movs	r0, #0
  4011da:	e7bd      	b.n	401158 <ili9488_init+0x104>
  4011dc:	40008000 	.word	0x40008000
  4011e0:	004008cd 	.word	0x004008cd
  4011e4:	01312d00 	.word	0x01312d00
  4011e8:	00401881 	.word	0x00401881
  4011ec:	004009a1 	.word	0x004009a1
  4011f0:	00400e39 	.word	0x00400e39
  4011f4:	00400eed 	.word	0x00400eed
  4011f8:	00401461 	.word	0x00401461
  4011fc:	00400a07 	.word	0x00400a07
  401200:	00400fb5 	.word	0x00400fb5
  401204:	00400f09 	.word	0x00400f09
  401208:	00400f35 	.word	0x00400f35
  40120c:	00400fc9 	.word	0x00400fc9
  401210:	00400ff1 	.word	0x00400ff1
  401214:	00400921 	.word	0x00400921

00401218 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40121c:	b084      	sub	sp, #16
  40121e:	9003      	str	r0, [sp, #12]
  401220:	9102      	str	r1, [sp, #8]
  401222:	9201      	str	r2, [sp, #4]
  401224:	aa04      	add	r2, sp, #16
  401226:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  40122a:	4613      	mov	r3, r2
  40122c:	aa01      	add	r2, sp, #4
  40122e:	a902      	add	r1, sp, #8
  401230:	a803      	add	r0, sp, #12
  401232:	4c22      	ldr	r4, [pc, #136]	; (4012bc <ili9488_draw_filled_rectangle+0xa4>)
  401234:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401236:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40123a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40123e:	9b00      	ldr	r3, [sp, #0]
  401240:	3301      	adds	r3, #1
  401242:	1a5b      	subs	r3, r3, r1
  401244:	9a01      	ldr	r2, [sp, #4]
  401246:	3201      	adds	r2, #1
  401248:	1a12      	subs	r2, r2, r0
  40124a:	b29b      	uxth	r3, r3
  40124c:	b292      	uxth	r2, r2
  40124e:	4c1c      	ldr	r4, [pc, #112]	; (4012c0 <ili9488_draw_filled_rectangle+0xa8>)
  401250:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401252:	4b1c      	ldr	r3, [pc, #112]	; (4012c4 <ili9488_draw_filled_rectangle+0xac>)
  401254:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401256:	9903      	ldr	r1, [sp, #12]
  401258:	9d01      	ldr	r5, [sp, #4]
  40125a:	1a69      	subs	r1, r5, r1
  40125c:	9d00      	ldr	r5, [sp, #0]
  40125e:	3501      	adds	r5, #1
  401260:	9b02      	ldr	r3, [sp, #8]
  401262:	1aed      	subs	r5, r5, r3
  401264:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401268:	4b17      	ldr	r3, [pc, #92]	; (4012c8 <ili9488_draw_filled_rectangle+0xb0>)
  40126a:	fba3 2305 	umull	r2, r3, r3, r5
  40126e:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  401270:	b163      	cbz	r3, 40128c <ili9488_draw_filled_rectangle+0x74>
  401272:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401274:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4012d0 <ili9488_draw_filled_rectangle+0xb8>
  401278:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  40127c:	4e13      	ldr	r6, [pc, #76]	; (4012cc <ili9488_draw_filled_rectangle+0xb4>)
  40127e:	4639      	mov	r1, r7
  401280:	4640      	mov	r0, r8
  401282:	47b0      	blx	r6
	while (blocks--) {
  401284:	3c01      	subs	r4, #1
  401286:	f1b4 3fff 	cmp.w	r4, #4294967295
  40128a:	d1f8      	bne.n	40127e <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  40128c:	490e      	ldr	r1, [pc, #56]	; (4012c8 <ili9488_draw_filled_rectangle+0xb0>)
  40128e:	fba1 3105 	umull	r3, r1, r1, r5
  401292:	0a09      	lsrs	r1, r1, #8
  401294:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401298:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  40129c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4012a0:	480b      	ldr	r0, [pc, #44]	; (4012d0 <ili9488_draw_filled_rectangle+0xb8>)
  4012a2:	4b0a      	ldr	r3, [pc, #40]	; (4012cc <ili9488_draw_filled_rectangle+0xb4>)
  4012a4:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4012a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4012aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4012ae:	2100      	movs	r1, #0
  4012b0:	4608      	mov	r0, r1
  4012b2:	4c03      	ldr	r4, [pc, #12]	; (4012c0 <ili9488_draw_filled_rectangle+0xa8>)
  4012b4:	47a0      	blx	r4

}
  4012b6:	b004      	add	sp, #16
  4012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012bc:	00400da5 	.word	0x00400da5
  4012c0:	00400f35 	.word	0x00400f35
  4012c4:	00400dfd 	.word	0x00400dfd
  4012c8:	cccccccd 	.word	0xcccccccd
  4012cc:	00400ead 	.word	0x00400ead
  4012d0:	204009dc 	.word	0x204009dc

004012d4 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4012d4:	6301      	str	r1, [r0, #48]	; 0x30
  4012d6:	4770      	bx	lr

004012d8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4012d8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4012da:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4012de:	d03a      	beq.n	401356 <pio_set_peripheral+0x7e>
  4012e0:	d813      	bhi.n	40130a <pio_set_peripheral+0x32>
  4012e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4012e6:	d025      	beq.n	401334 <pio_set_peripheral+0x5c>
  4012e8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4012ec:	d10a      	bne.n	401304 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4012ee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4012f0:	4313      	orrs	r3, r2
  4012f2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4012f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4012f6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4012f8:	400b      	ands	r3, r1
  4012fa:	ea23 0302 	bic.w	r3, r3, r2
  4012fe:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401300:	6042      	str	r2, [r0, #4]
  401302:	4770      	bx	lr
	switch (ul_type) {
  401304:	2900      	cmp	r1, #0
  401306:	d1fb      	bne.n	401300 <pio_set_peripheral+0x28>
  401308:	4770      	bx	lr
  40130a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40130e:	d021      	beq.n	401354 <pio_set_peripheral+0x7c>
  401310:	d809      	bhi.n	401326 <pio_set_peripheral+0x4e>
  401312:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401316:	d1f3      	bne.n	401300 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401318:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40131a:	4313      	orrs	r3, r2
  40131c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40131e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401320:	4313      	orrs	r3, r2
  401322:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401324:	e7ec      	b.n	401300 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401326:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40132a:	d013      	beq.n	401354 <pio_set_peripheral+0x7c>
  40132c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401330:	d010      	beq.n	401354 <pio_set_peripheral+0x7c>
  401332:	e7e5      	b.n	401300 <pio_set_peripheral+0x28>
{
  401334:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401336:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401338:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40133a:	43d3      	mvns	r3, r2
  40133c:	4021      	ands	r1, r4
  40133e:	461c      	mov	r4, r3
  401340:	4019      	ands	r1, r3
  401342:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401344:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401346:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401348:	400b      	ands	r3, r1
  40134a:	4023      	ands	r3, r4
  40134c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40134e:	6042      	str	r2, [r0, #4]
}
  401350:	f85d 4b04 	ldr.w	r4, [sp], #4
  401354:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401356:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401358:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40135a:	400b      	ands	r3, r1
  40135c:	ea23 0302 	bic.w	r3, r3, r2
  401360:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401362:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401364:	4313      	orrs	r3, r2
  401366:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401368:	e7ca      	b.n	401300 <pio_set_peripheral+0x28>

0040136a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40136a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40136c:	f012 0f01 	tst.w	r2, #1
  401370:	d10d      	bne.n	40138e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401372:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401374:	f012 0f0a 	tst.w	r2, #10
  401378:	d00b      	beq.n	401392 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40137a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40137c:	f012 0f02 	tst.w	r2, #2
  401380:	d109      	bne.n	401396 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401382:	f012 0f08 	tst.w	r2, #8
  401386:	d008      	beq.n	40139a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401388:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40138c:	e005      	b.n	40139a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40138e:	6641      	str	r1, [r0, #100]	; 0x64
  401390:	e7f0      	b.n	401374 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401392:	6241      	str	r1, [r0, #36]	; 0x24
  401394:	e7f2      	b.n	40137c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401396:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40139a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40139c:	6001      	str	r1, [r0, #0]
  40139e:	4770      	bx	lr

004013a0 <pio_set_output>:
{
  4013a0:	b410      	push	{r4}
  4013a2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4013a4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4013a6:	b94c      	cbnz	r4, 4013bc <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4013a8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4013aa:	b14b      	cbz	r3, 4013c0 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4013ac:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4013ae:	b94a      	cbnz	r2, 4013c4 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4013b0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4013b2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4013b4:	6001      	str	r1, [r0, #0]
}
  4013b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013ba:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4013bc:	6641      	str	r1, [r0, #100]	; 0x64
  4013be:	e7f4      	b.n	4013aa <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4013c0:	6541      	str	r1, [r0, #84]	; 0x54
  4013c2:	e7f4      	b.n	4013ae <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4013c4:	6301      	str	r1, [r0, #48]	; 0x30
  4013c6:	e7f4      	b.n	4013b2 <pio_set_output+0x12>

004013c8 <pio_configure>:
{
  4013c8:	b570      	push	{r4, r5, r6, lr}
  4013ca:	b082      	sub	sp, #8
  4013cc:	4605      	mov	r5, r0
  4013ce:	4616      	mov	r6, r2
  4013d0:	461c      	mov	r4, r3
	switch (ul_type) {
  4013d2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4013d6:	d014      	beq.n	401402 <pio_configure+0x3a>
  4013d8:	d90a      	bls.n	4013f0 <pio_configure+0x28>
  4013da:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4013de:	d024      	beq.n	40142a <pio_configure+0x62>
  4013e0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4013e4:	d021      	beq.n	40142a <pio_configure+0x62>
  4013e6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4013ea:	d017      	beq.n	40141c <pio_configure+0x54>
		return 0;
  4013ec:	2000      	movs	r0, #0
  4013ee:	e01a      	b.n	401426 <pio_configure+0x5e>
	switch (ul_type) {
  4013f0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4013f4:	d005      	beq.n	401402 <pio_configure+0x3a>
  4013f6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4013fa:	d002      	beq.n	401402 <pio_configure+0x3a>
  4013fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401400:	d1f4      	bne.n	4013ec <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401402:	4632      	mov	r2, r6
  401404:	4628      	mov	r0, r5
  401406:	4b11      	ldr	r3, [pc, #68]	; (40144c <pio_configure+0x84>)
  401408:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40140a:	f014 0f01 	tst.w	r4, #1
  40140e:	d102      	bne.n	401416 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401410:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401412:	2001      	movs	r0, #1
  401414:	e007      	b.n	401426 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401416:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401418:	2001      	movs	r0, #1
  40141a:	e004      	b.n	401426 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40141c:	461a      	mov	r2, r3
  40141e:	4631      	mov	r1, r6
  401420:	4b0b      	ldr	r3, [pc, #44]	; (401450 <pio_configure+0x88>)
  401422:	4798      	blx	r3
	return 1;
  401424:	2001      	movs	r0, #1
}
  401426:	b002      	add	sp, #8
  401428:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40142a:	f004 0301 	and.w	r3, r4, #1
  40142e:	9300      	str	r3, [sp, #0]
  401430:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401434:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401438:	bf14      	ite	ne
  40143a:	2200      	movne	r2, #0
  40143c:	2201      	moveq	r2, #1
  40143e:	4631      	mov	r1, r6
  401440:	4628      	mov	r0, r5
  401442:	4c04      	ldr	r4, [pc, #16]	; (401454 <pio_configure+0x8c>)
  401444:	47a0      	blx	r4
	return 1;
  401446:	2001      	movs	r0, #1
		break;
  401448:	e7ed      	b.n	401426 <pio_configure+0x5e>
  40144a:	bf00      	nop
  40144c:	004012d9 	.word	0x004012d9
  401450:	0040136b 	.word	0x0040136b
  401454:	004013a1 	.word	0x004013a1

00401458 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401458:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40145a:	4770      	bx	lr

0040145c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40145c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40145e:	4770      	bx	lr

00401460 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401460:	4b05      	ldr	r3, [pc, #20]	; (401478 <pio_set_pin_high+0x18>)
  401462:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401466:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401468:	f000 001f 	and.w	r0, r0, #31
  40146c:	2201      	movs	r2, #1
  40146e:	fa02 f000 	lsl.w	r0, r2, r0
  401472:	6318      	str	r0, [r3, #48]	; 0x30
  401474:	4770      	bx	lr
  401476:	bf00      	nop
  401478:	00200707 	.word	0x00200707

0040147c <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40147c:	4b05      	ldr	r3, [pc, #20]	; (401494 <pio_set_pin_low+0x18>)
  40147e:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401482:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401484:	f000 001f 	and.w	r0, r0, #31
  401488:	2201      	movs	r2, #1
  40148a:	fa02 f000 	lsl.w	r0, r2, r0
  40148e:	6358      	str	r0, [r3, #52]	; 0x34
  401490:	4770      	bx	lr
  401492:	bf00      	nop
  401494:	00200707 	.word	0x00200707

00401498 <pio_configure_pin>:
{
  401498:	b570      	push	{r4, r5, r6, lr}
  40149a:	b082      	sub	sp, #8
  40149c:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40149e:	4c46      	ldr	r4, [pc, #280]	; (4015b8 <pio_configure_pin+0x120>)
  4014a0:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4014a4:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4014a6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4014aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4014ae:	d059      	beq.n	401564 <pio_configure_pin+0xcc>
  4014b0:	d80a      	bhi.n	4014c8 <pio_configure_pin+0x30>
  4014b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4014b6:	d02f      	beq.n	401518 <pio_configure_pin+0x80>
  4014b8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4014bc:	d03f      	beq.n	40153e <pio_configure_pin+0xa6>
  4014be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4014c2:	d016      	beq.n	4014f2 <pio_configure_pin+0x5a>
		return 0;
  4014c4:	2000      	movs	r0, #0
  4014c6:	e012      	b.n	4014ee <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4014c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4014cc:	d05d      	beq.n	40158a <pio_configure_pin+0xf2>
  4014ce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4014d2:	d05a      	beq.n	40158a <pio_configure_pin+0xf2>
  4014d4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4014d8:	d1f4      	bne.n	4014c4 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4014da:	f000 011f 	and.w	r1, r0, #31
  4014de:	2601      	movs	r6, #1
  4014e0:	462a      	mov	r2, r5
  4014e2:	fa06 f101 	lsl.w	r1, r6, r1
  4014e6:	4620      	mov	r0, r4
  4014e8:	4b34      	ldr	r3, [pc, #208]	; (4015bc <pio_configure_pin+0x124>)
  4014ea:	4798      	blx	r3
	return 1;
  4014ec:	4630      	mov	r0, r6
}
  4014ee:	b002      	add	sp, #8
  4014f0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4014f2:	f000 001f 	and.w	r0, r0, #31
  4014f6:	2601      	movs	r6, #1
  4014f8:	4086      	lsls	r6, r0
  4014fa:	4632      	mov	r2, r6
  4014fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401500:	4620      	mov	r0, r4
  401502:	4b2f      	ldr	r3, [pc, #188]	; (4015c0 <pio_configure_pin+0x128>)
  401504:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401506:	f015 0f01 	tst.w	r5, #1
  40150a:	d102      	bne.n	401512 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  40150c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40150e:	2001      	movs	r0, #1
  401510:	e7ed      	b.n	4014ee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401512:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401514:	2001      	movs	r0, #1
  401516:	e7ea      	b.n	4014ee <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401518:	f000 001f 	and.w	r0, r0, #31
  40151c:	2601      	movs	r6, #1
  40151e:	4086      	lsls	r6, r0
  401520:	4632      	mov	r2, r6
  401522:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401526:	4620      	mov	r0, r4
  401528:	4b25      	ldr	r3, [pc, #148]	; (4015c0 <pio_configure_pin+0x128>)
  40152a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40152c:	f015 0f01 	tst.w	r5, #1
  401530:	d102      	bne.n	401538 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  401532:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401534:	2001      	movs	r0, #1
  401536:	e7da      	b.n	4014ee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401538:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40153a:	2001      	movs	r0, #1
  40153c:	e7d7      	b.n	4014ee <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40153e:	f000 001f 	and.w	r0, r0, #31
  401542:	2601      	movs	r6, #1
  401544:	4086      	lsls	r6, r0
  401546:	4632      	mov	r2, r6
  401548:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40154c:	4620      	mov	r0, r4
  40154e:	4b1c      	ldr	r3, [pc, #112]	; (4015c0 <pio_configure_pin+0x128>)
  401550:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401552:	f015 0f01 	tst.w	r5, #1
  401556:	d102      	bne.n	40155e <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  401558:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40155a:	2001      	movs	r0, #1
  40155c:	e7c7      	b.n	4014ee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40155e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401560:	2001      	movs	r0, #1
  401562:	e7c4      	b.n	4014ee <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401564:	f000 001f 	and.w	r0, r0, #31
  401568:	2601      	movs	r6, #1
  40156a:	4086      	lsls	r6, r0
  40156c:	4632      	mov	r2, r6
  40156e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401572:	4620      	mov	r0, r4
  401574:	4b12      	ldr	r3, [pc, #72]	; (4015c0 <pio_configure_pin+0x128>)
  401576:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401578:	f015 0f01 	tst.w	r5, #1
  40157c:	d102      	bne.n	401584 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40157e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401580:	2001      	movs	r0, #1
  401582:	e7b4      	b.n	4014ee <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401584:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401586:	2001      	movs	r0, #1
  401588:	e7b1      	b.n	4014ee <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40158a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40158e:	f000 011f 	and.w	r1, r0, #31
  401592:	2601      	movs	r6, #1
  401594:	ea05 0306 	and.w	r3, r5, r6
  401598:	9300      	str	r3, [sp, #0]
  40159a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40159e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4015a2:	bf14      	ite	ne
  4015a4:	2200      	movne	r2, #0
  4015a6:	2201      	moveq	r2, #1
  4015a8:	fa06 f101 	lsl.w	r1, r6, r1
  4015ac:	4620      	mov	r0, r4
  4015ae:	4c05      	ldr	r4, [pc, #20]	; (4015c4 <pio_configure_pin+0x12c>)
  4015b0:	47a0      	blx	r4
	return 1;
  4015b2:	4630      	mov	r0, r6
		break;
  4015b4:	e79b      	b.n	4014ee <pio_configure_pin+0x56>
  4015b6:	bf00      	nop
  4015b8:	00200707 	.word	0x00200707
  4015bc:	0040136b 	.word	0x0040136b
  4015c0:	004012d9 	.word	0x004012d9
  4015c4:	004013a1 	.word	0x004013a1

004015c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4015c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4015cc:	4604      	mov	r4, r0
  4015ce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4015d0:	4b0e      	ldr	r3, [pc, #56]	; (40160c <pio_handler_process+0x44>)
  4015d2:	4798      	blx	r3
  4015d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4015d6:	4620      	mov	r0, r4
  4015d8:	4b0d      	ldr	r3, [pc, #52]	; (401610 <pio_handler_process+0x48>)
  4015da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4015dc:	4005      	ands	r5, r0
  4015de:	d013      	beq.n	401608 <pio_handler_process+0x40>
  4015e0:	4c0c      	ldr	r4, [pc, #48]	; (401614 <pio_handler_process+0x4c>)
  4015e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4015e6:	e003      	b.n	4015f0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4015e8:	42b4      	cmp	r4, r6
  4015ea:	d00d      	beq.n	401608 <pio_handler_process+0x40>
  4015ec:	3410      	adds	r4, #16
		while (status != 0) {
  4015ee:	b15d      	cbz	r5, 401608 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4015f0:	6820      	ldr	r0, [r4, #0]
  4015f2:	4540      	cmp	r0, r8
  4015f4:	d1f8      	bne.n	4015e8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4015f6:	6861      	ldr	r1, [r4, #4]
  4015f8:	4229      	tst	r1, r5
  4015fa:	d0f5      	beq.n	4015e8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4015fc:	68e3      	ldr	r3, [r4, #12]
  4015fe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401600:	6863      	ldr	r3, [r4, #4]
  401602:	ea25 0503 	bic.w	r5, r5, r3
  401606:	e7ef      	b.n	4015e8 <pio_handler_process+0x20>
  401608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40160c:	00401459 	.word	0x00401459
  401610:	0040145d 	.word	0x0040145d
  401614:	20400d9c 	.word	0x20400d9c

00401618 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401618:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40161a:	210a      	movs	r1, #10
  40161c:	4801      	ldr	r0, [pc, #4]	; (401624 <PIOA_Handler+0xc>)
  40161e:	4b02      	ldr	r3, [pc, #8]	; (401628 <PIOA_Handler+0x10>)
  401620:	4798      	blx	r3
  401622:	bd08      	pop	{r3, pc}
  401624:	400e0e00 	.word	0x400e0e00
  401628:	004015c9 	.word	0x004015c9

0040162c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40162c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40162e:	210b      	movs	r1, #11
  401630:	4801      	ldr	r0, [pc, #4]	; (401638 <PIOB_Handler+0xc>)
  401632:	4b02      	ldr	r3, [pc, #8]	; (40163c <PIOB_Handler+0x10>)
  401634:	4798      	blx	r3
  401636:	bd08      	pop	{r3, pc}
  401638:	400e1000 	.word	0x400e1000
  40163c:	004015c9 	.word	0x004015c9

00401640 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401640:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401642:	210c      	movs	r1, #12
  401644:	4801      	ldr	r0, [pc, #4]	; (40164c <PIOC_Handler+0xc>)
  401646:	4b02      	ldr	r3, [pc, #8]	; (401650 <PIOC_Handler+0x10>)
  401648:	4798      	blx	r3
  40164a:	bd08      	pop	{r3, pc}
  40164c:	400e1200 	.word	0x400e1200
  401650:	004015c9 	.word	0x004015c9

00401654 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401654:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401656:	2110      	movs	r1, #16
  401658:	4801      	ldr	r0, [pc, #4]	; (401660 <PIOD_Handler+0xc>)
  40165a:	4b02      	ldr	r3, [pc, #8]	; (401664 <PIOD_Handler+0x10>)
  40165c:	4798      	blx	r3
  40165e:	bd08      	pop	{r3, pc}
  401660:	400e1400 	.word	0x400e1400
  401664:	004015c9 	.word	0x004015c9

00401668 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401668:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40166a:	2111      	movs	r1, #17
  40166c:	4801      	ldr	r0, [pc, #4]	; (401674 <PIOE_Handler+0xc>)
  40166e:	4b02      	ldr	r3, [pc, #8]	; (401678 <PIOE_Handler+0x10>)
  401670:	4798      	blx	r3
  401672:	bd08      	pop	{r3, pc}
  401674:	400e1600 	.word	0x400e1600
  401678:	004015c9 	.word	0x004015c9

0040167c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40167c:	2803      	cmp	r0, #3
  40167e:	d011      	beq.n	4016a4 <pmc_mck_set_division+0x28>
  401680:	2804      	cmp	r0, #4
  401682:	d012      	beq.n	4016aa <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401684:	2802      	cmp	r0, #2
  401686:	bf0c      	ite	eq
  401688:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40168c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40168e:	4a08      	ldr	r2, [pc, #32]	; (4016b0 <pmc_mck_set_division+0x34>)
  401690:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401696:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401698:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40169a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40169c:	f013 0f08 	tst.w	r3, #8
  4016a0:	d0fb      	beq.n	40169a <pmc_mck_set_division+0x1e>
}
  4016a2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4016a4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4016a8:	e7f1      	b.n	40168e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4016aa:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4016ae:	e7ee      	b.n	40168e <pmc_mck_set_division+0x12>
  4016b0:	400e0600 	.word	0x400e0600

004016b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4016b4:	4a17      	ldr	r2, [pc, #92]	; (401714 <pmc_switch_mck_to_pllack+0x60>)
  4016b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4016bc:	4318      	orrs	r0, r3
  4016be:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4016c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016c2:	f013 0f08 	tst.w	r3, #8
  4016c6:	d10a      	bne.n	4016de <pmc_switch_mck_to_pllack+0x2a>
  4016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4016cc:	4911      	ldr	r1, [pc, #68]	; (401714 <pmc_switch_mck_to_pllack+0x60>)
  4016ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4016d0:	f012 0f08 	tst.w	r2, #8
  4016d4:	d103      	bne.n	4016de <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4016d6:	3b01      	subs	r3, #1
  4016d8:	d1f9      	bne.n	4016ce <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4016da:	2001      	movs	r0, #1
  4016dc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4016de:	4a0d      	ldr	r2, [pc, #52]	; (401714 <pmc_switch_mck_to_pllack+0x60>)
  4016e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016e2:	f023 0303 	bic.w	r3, r3, #3
  4016e6:	f043 0302 	orr.w	r3, r3, #2
  4016ea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4016ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016ee:	f013 0f08 	tst.w	r3, #8
  4016f2:	d10a      	bne.n	40170a <pmc_switch_mck_to_pllack+0x56>
  4016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4016f8:	4906      	ldr	r1, [pc, #24]	; (401714 <pmc_switch_mck_to_pllack+0x60>)
  4016fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4016fc:	f012 0f08 	tst.w	r2, #8
  401700:	d105      	bne.n	40170e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401702:	3b01      	subs	r3, #1
  401704:	d1f9      	bne.n	4016fa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401706:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401708:	4770      	bx	lr
	return 0;
  40170a:	2000      	movs	r0, #0
  40170c:	4770      	bx	lr
  40170e:	2000      	movs	r0, #0
  401710:	4770      	bx	lr
  401712:	bf00      	nop
  401714:	400e0600 	.word	0x400e0600

00401718 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401718:	b9a0      	cbnz	r0, 401744 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40171a:	480e      	ldr	r0, [pc, #56]	; (401754 <pmc_switch_mainck_to_xtal+0x3c>)
  40171c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40171e:	0209      	lsls	r1, r1, #8
  401720:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401722:	4a0d      	ldr	r2, [pc, #52]	; (401758 <pmc_switch_mainck_to_xtal+0x40>)
  401724:	401a      	ands	r2, r3
  401726:	4b0d      	ldr	r3, [pc, #52]	; (40175c <pmc_switch_mainck_to_xtal+0x44>)
  401728:	4313      	orrs	r3, r2
  40172a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40172c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40172e:	4602      	mov	r2, r0
  401730:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401732:	f013 0f01 	tst.w	r3, #1
  401736:	d0fb      	beq.n	401730 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401738:	4a06      	ldr	r2, [pc, #24]	; (401754 <pmc_switch_mainck_to_xtal+0x3c>)
  40173a:	6a11      	ldr	r1, [r2, #32]
  40173c:	4b08      	ldr	r3, [pc, #32]	; (401760 <pmc_switch_mainck_to_xtal+0x48>)
  40173e:	430b      	orrs	r3, r1
  401740:	6213      	str	r3, [r2, #32]
  401742:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401744:	4903      	ldr	r1, [pc, #12]	; (401754 <pmc_switch_mainck_to_xtal+0x3c>)
  401746:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401748:	4a06      	ldr	r2, [pc, #24]	; (401764 <pmc_switch_mainck_to_xtal+0x4c>)
  40174a:	401a      	ands	r2, r3
  40174c:	4b06      	ldr	r3, [pc, #24]	; (401768 <pmc_switch_mainck_to_xtal+0x50>)
  40174e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401750:	620b      	str	r3, [r1, #32]
  401752:	4770      	bx	lr
  401754:	400e0600 	.word	0x400e0600
  401758:	ffc8fffc 	.word	0xffc8fffc
  40175c:	00370001 	.word	0x00370001
  401760:	01370000 	.word	0x01370000
  401764:	fec8fffc 	.word	0xfec8fffc
  401768:	01370002 	.word	0x01370002

0040176c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40176c:	4b02      	ldr	r3, [pc, #8]	; (401778 <pmc_osc_is_ready_mainck+0xc>)
  40176e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401770:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401774:	4770      	bx	lr
  401776:	bf00      	nop
  401778:	400e0600 	.word	0x400e0600

0040177c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40177c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401780:	4b01      	ldr	r3, [pc, #4]	; (401788 <pmc_disable_pllack+0xc>)
  401782:	629a      	str	r2, [r3, #40]	; 0x28
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	400e0600 	.word	0x400e0600

0040178c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40178c:	4b02      	ldr	r3, [pc, #8]	; (401798 <pmc_is_locked_pllack+0xc>)
  40178e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401790:	f000 0002 	and.w	r0, r0, #2
  401794:	4770      	bx	lr
  401796:	bf00      	nop
  401798:	400e0600 	.word	0x400e0600

0040179c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  40179c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4017a0:	4b05      	ldr	r3, [pc, #20]	; (4017b8 <pmc_enable_periph_clk+0x1c>)
  4017a2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4017a6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4017aa:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4017ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4017b2:	2000      	movs	r0, #0
  4017b4:	4770      	bx	lr
  4017b6:	bf00      	nop
  4017b8:	400e0600 	.word	0x400e0600

004017bc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4017bc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4017be:	4b07      	ldr	r3, [pc, #28]	; (4017dc <spi_enable_clock+0x20>)
  4017c0:	4298      	cmp	r0, r3
  4017c2:	d003      	beq.n	4017cc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4017c4:	4b06      	ldr	r3, [pc, #24]	; (4017e0 <spi_enable_clock+0x24>)
  4017c6:	4298      	cmp	r0, r3
  4017c8:	d004      	beq.n	4017d4 <spi_enable_clock+0x18>
  4017ca:	bd08      	pop	{r3, pc}
  4017cc:	2015      	movs	r0, #21
  4017ce:	4b05      	ldr	r3, [pc, #20]	; (4017e4 <spi_enable_clock+0x28>)
  4017d0:	4798      	blx	r3
  4017d2:	bd08      	pop	{r3, pc}
  4017d4:	202a      	movs	r0, #42	; 0x2a
  4017d6:	4b03      	ldr	r3, [pc, #12]	; (4017e4 <spi_enable_clock+0x28>)
  4017d8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4017da:	e7f6      	b.n	4017ca <spi_enable_clock+0xe>
  4017dc:	40008000 	.word	0x40008000
  4017e0:	40058000 	.word	0x40058000
  4017e4:	0040179d 	.word	0x0040179d

004017e8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4017e8:	6843      	ldr	r3, [r0, #4]
  4017ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4017ee:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4017f0:	6843      	ldr	r3, [r0, #4]
  4017f2:	0409      	lsls	r1, r1, #16
  4017f4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4017f8:	4319      	orrs	r1, r3
  4017fa:	6041      	str	r1, [r0, #4]
  4017fc:	4770      	bx	lr

004017fe <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4017fe:	6843      	ldr	r3, [r0, #4]
  401800:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401804:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401806:	6843      	ldr	r3, [r0, #4]
  401808:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  40180c:	6041      	str	r1, [r0, #4]
  40180e:	4770      	bx	lr

00401810 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401810:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401812:	f643 2499 	movw	r4, #15001	; 0x3a99
  401816:	6905      	ldr	r5, [r0, #16]
  401818:	f015 0f02 	tst.w	r5, #2
  40181c:	d103      	bne.n	401826 <spi_write+0x16>
		if (!timeout--) {
  40181e:	3c01      	subs	r4, #1
  401820:	d1f9      	bne.n	401816 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401822:	2001      	movs	r0, #1
  401824:	e00c      	b.n	401840 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401826:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401828:	f014 0f02 	tst.w	r4, #2
  40182c:	d006      	beq.n	40183c <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40182e:	0412      	lsls	r2, r2, #16
  401830:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401834:	4311      	orrs	r1, r2
		if (uc_last) {
  401836:	b10b      	cbz	r3, 40183c <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401838:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40183c:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40183e:	2000      	movs	r0, #0
}
  401840:	bc30      	pop	{r4, r5}
  401842:	4770      	bx	lr

00401844 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401844:	b932      	cbnz	r2, 401854 <spi_set_clock_polarity+0x10>
  401846:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40184a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40184c:	f023 0301 	bic.w	r3, r3, #1
  401850:	6303      	str	r3, [r0, #48]	; 0x30
  401852:	4770      	bx	lr
  401854:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401858:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40185a:	f043 0301 	orr.w	r3, r3, #1
  40185e:	6303      	str	r3, [r0, #48]	; 0x30
  401860:	4770      	bx	lr

00401862 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401862:	b932      	cbnz	r2, 401872 <spi_set_clock_phase+0x10>
  401864:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401868:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40186a:	f023 0302 	bic.w	r3, r3, #2
  40186e:	6303      	str	r3, [r0, #48]	; 0x30
  401870:	4770      	bx	lr
  401872:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401876:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401878:	f043 0302 	orr.w	r3, r3, #2
  40187c:	6303      	str	r3, [r0, #48]	; 0x30
  40187e:	4770      	bx	lr

00401880 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401880:	2a04      	cmp	r2, #4
  401882:	d003      	beq.n	40188c <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401884:	b16a      	cbz	r2, 4018a2 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401886:	2a08      	cmp	r2, #8
  401888:	d016      	beq.n	4018b8 <spi_configure_cs_behavior+0x38>
  40188a:	4770      	bx	lr
  40188c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401890:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401892:	f023 0308 	bic.w	r3, r3, #8
  401896:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401898:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40189a:	f043 0304 	orr.w	r3, r3, #4
  40189e:	6303      	str	r3, [r0, #48]	; 0x30
  4018a0:	4770      	bx	lr
  4018a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4018a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018a8:	f023 0308 	bic.w	r3, r3, #8
  4018ac:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4018ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018b0:	f023 0304 	bic.w	r3, r3, #4
  4018b4:	6303      	str	r3, [r0, #48]	; 0x30
  4018b6:	4770      	bx	lr
  4018b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4018bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018be:	f043 0308 	orr.w	r3, r3, #8
  4018c2:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4018c4:	e7e1      	b.n	40188a <spi_configure_cs_behavior+0xa>

004018c6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4018c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4018ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4018cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4018d0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4018d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4018d4:	431a      	orrs	r2, r3
  4018d6:	630a      	str	r2, [r1, #48]	; 0x30
  4018d8:	4770      	bx	lr

004018da <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4018da:	1e43      	subs	r3, r0, #1
  4018dc:	4419      	add	r1, r3
  4018de:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4018e2:	1e43      	subs	r3, r0, #1
  4018e4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4018e6:	bf94      	ite	ls
  4018e8:	b200      	sxthls	r0, r0
		return -1;
  4018ea:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4018ee:	4770      	bx	lr

004018f0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4018f0:	b17a      	cbz	r2, 401912 <spi_set_baudrate_div+0x22>
{
  4018f2:	b410      	push	{r4}
  4018f4:	4614      	mov	r4, r2
  4018f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4018fa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4018fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401900:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401902:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401904:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401908:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40190a:	2000      	movs	r0, #0
}
  40190c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401910:	4770      	bx	lr
        return -1;
  401912:	f04f 30ff 	mov.w	r0, #4294967295
  401916:	4770      	bx	lr

00401918 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401918:	b410      	push	{r4}
  40191a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40191e:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401920:	b280      	uxth	r0, r0
  401922:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401924:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401926:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40192a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40192e:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401930:	f85d 4b04 	ldr.w	r4, [sp], #4
  401934:	4770      	bx	lr
	...

00401938 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401938:	4b28      	ldr	r3, [pc, #160]	; (4019dc <twihs_set_speed+0xa4>)
  40193a:	4299      	cmp	r1, r3
  40193c:	d84b      	bhi.n	4019d6 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40193e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401942:	4299      	cmp	r1, r3
  401944:	d92d      	bls.n	4019a2 <twihs_set_speed+0x6a>
{
  401946:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401948:	4c25      	ldr	r4, [pc, #148]	; (4019e0 <twihs_set_speed+0xa8>)
  40194a:	fba4 3402 	umull	r3, r4, r4, r2
  40194e:	0ba4      	lsrs	r4, r4, #14
  401950:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401952:	4b24      	ldr	r3, [pc, #144]	; (4019e4 <twihs_set_speed+0xac>)
  401954:	440b      	add	r3, r1
  401956:	009b      	lsls	r3, r3, #2
  401958:	fbb2 f2f3 	udiv	r2, r2, r3
  40195c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40195e:	2cff      	cmp	r4, #255	; 0xff
  401960:	d91d      	bls.n	40199e <twihs_set_speed+0x66>
  401962:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401964:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401966:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401968:	2cff      	cmp	r4, #255	; 0xff
  40196a:	d901      	bls.n	401970 <twihs_set_speed+0x38>
  40196c:	2906      	cmp	r1, #6
  40196e:	d9f9      	bls.n	401964 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401970:	2aff      	cmp	r2, #255	; 0xff
  401972:	d907      	bls.n	401984 <twihs_set_speed+0x4c>
  401974:	2906      	cmp	r1, #6
  401976:	d805      	bhi.n	401984 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401978:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40197a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40197c:	2aff      	cmp	r2, #255	; 0xff
  40197e:	d901      	bls.n	401984 <twihs_set_speed+0x4c>
  401980:	2906      	cmp	r1, #6
  401982:	d9f9      	bls.n	401978 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401984:	0213      	lsls	r3, r2, #8
  401986:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401988:	0409      	lsls	r1, r1, #16
  40198a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40198e:	430b      	orrs	r3, r1
  401990:	b2e4      	uxtb	r4, r4
  401992:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401994:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401996:	2000      	movs	r0, #0
}
  401998:	f85d 4b04 	ldr.w	r4, [sp], #4
  40199c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40199e:	2100      	movs	r1, #0
  4019a0:	e7e6      	b.n	401970 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4019a2:	0049      	lsls	r1, r1, #1
  4019a4:	fbb2 f2f1 	udiv	r2, r2, r1
  4019a8:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4019aa:	2aff      	cmp	r2, #255	; 0xff
  4019ac:	d911      	bls.n	4019d2 <twihs_set_speed+0x9a>
  4019ae:	2300      	movs	r3, #0
			ckdiv++;
  4019b0:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4019b2:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4019b4:	2aff      	cmp	r2, #255	; 0xff
  4019b6:	d901      	bls.n	4019bc <twihs_set_speed+0x84>
  4019b8:	2b06      	cmp	r3, #6
  4019ba:	d9f9      	bls.n	4019b0 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4019bc:	0211      	lsls	r1, r2, #8
  4019be:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  4019c0:	041b      	lsls	r3, r3, #16
  4019c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4019c6:	430b      	orrs	r3, r1
  4019c8:	b2d2      	uxtb	r2, r2
  4019ca:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  4019cc:	6102      	str	r2, [r0, #16]
	return PASS;
  4019ce:	2000      	movs	r0, #0
  4019d0:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4019d2:	2300      	movs	r3, #0
  4019d4:	e7f2      	b.n	4019bc <twihs_set_speed+0x84>
		return FAIL;
  4019d6:	2001      	movs	r0, #1
  4019d8:	4770      	bx	lr
  4019da:	bf00      	nop
  4019dc:	00061a80 	.word	0x00061a80
  4019e0:	057619f1 	.word	0x057619f1
  4019e4:	3ffd1200 	.word	0x3ffd1200

004019e8 <twihs_master_init>:
{
  4019e8:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4019ea:	f04f 32ff 	mov.w	r2, #4294967295
  4019ee:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4019f0:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4019f2:	2280      	movs	r2, #128	; 0x80
  4019f4:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4019f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4019f8:	2208      	movs	r2, #8
  4019fa:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4019fc:	2220      	movs	r2, #32
  4019fe:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401a00:	2204      	movs	r2, #4
  401a02:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a04:	680a      	ldr	r2, [r1, #0]
  401a06:	6849      	ldr	r1, [r1, #4]
  401a08:	4b03      	ldr	r3, [pc, #12]	; (401a18 <twihs_master_init+0x30>)
  401a0a:	4798      	blx	r3
}
  401a0c:	2801      	cmp	r0, #1
  401a0e:	bf14      	ite	ne
  401a10:	2000      	movne	r0, #0
  401a12:	2001      	moveq	r0, #1
  401a14:	bd08      	pop	{r3, pc}
  401a16:	bf00      	nop
  401a18:	00401939 	.word	0x00401939

00401a1c <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401a1c:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401a1e:	2a00      	cmp	r2, #0
  401a20:	d04c      	beq.n	401abc <twihs_master_read+0xa0>
{
  401a22:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401a24:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401a26:	2600      	movs	r6, #0
  401a28:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401a2a:	684b      	ldr	r3, [r1, #4]
  401a2c:	021b      	lsls	r3, r3, #8
  401a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401a36:	7c0d      	ldrb	r5, [r1, #16]
  401a38:	042d      	lsls	r5, r5, #16
  401a3a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401a3e:	432b      	orrs	r3, r5
  401a40:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401a42:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401a44:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401a46:	b15d      	cbz	r5, 401a60 <twihs_master_read+0x44>
	val = addr[0];
  401a48:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401a4a:	2d01      	cmp	r5, #1
  401a4c:	dd02      	ble.n	401a54 <twihs_master_read+0x38>
		val |= addr[1];
  401a4e:	784e      	ldrb	r6, [r1, #1]
  401a50:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401a54:	2d02      	cmp	r5, #2
  401a56:	dd04      	ble.n	401a62 <twihs_master_read+0x46>
		val |= addr[2];
  401a58:	7889      	ldrb	r1, [r1, #2]
  401a5a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401a5e:	e000      	b.n	401a62 <twihs_master_read+0x46>
		return 0;
  401a60:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401a62:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401a64:	2301      	movs	r3, #1
  401a66:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401a68:	2502      	movs	r5, #2
  401a6a:	e012      	b.n	401a92 <twihs_master_read+0x76>
  401a6c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401a6e:	f013 0f02 	tst.w	r3, #2
  401a72:	d01b      	beq.n	401aac <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401a74:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a76:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401a78:	6a03      	ldr	r3, [r0, #32]
  401a7a:	f013 0f01 	tst.w	r3, #1
  401a7e:	d0fb      	beq.n	401a78 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401a80:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401a82:	2000      	movs	r0, #0
}
  401a84:	bc70      	pop	{r4, r5, r6}
  401a86:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401a88:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a8a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401a8e:	3a01      	subs	r2, #1
  401a90:	d0f2      	beq.n	401a78 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401a92:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401a94:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a98:	d114      	bne.n	401ac4 <twihs_master_read+0xa8>
  401a9a:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401a9e:	2a01      	cmp	r2, #1
  401aa0:	d0e4      	beq.n	401a6c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401aa2:	f013 0f02 	tst.w	r3, #2
  401aa6:	d1ef      	bne.n	401a88 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401aa8:	2a00      	cmp	r2, #0
  401aaa:	d0e5      	beq.n	401a78 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401aac:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401aae:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ab2:	d105      	bne.n	401ac0 <twihs_master_read+0xa4>
		if (!timeout--) {
  401ab4:	3901      	subs	r1, #1
  401ab6:	d1f2      	bne.n	401a9e <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401ab8:	2009      	movs	r0, #9
  401aba:	e7e3      	b.n	401a84 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401abc:	2001      	movs	r0, #1
  401abe:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401ac0:	2005      	movs	r0, #5
  401ac2:	e7df      	b.n	401a84 <twihs_master_read+0x68>
  401ac4:	2005      	movs	r0, #5
  401ac6:	e7dd      	b.n	401a84 <twihs_master_read+0x68>

00401ac8 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401ac8:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401aca:	2b00      	cmp	r3, #0
  401acc:	d043      	beq.n	401b56 <twihs_master_write+0x8e>
{
  401ace:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401ad0:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401ad2:	2600      	movs	r6, #0
  401ad4:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401ad6:	7c0a      	ldrb	r2, [r1, #16]
  401ad8:	0412      	lsls	r2, r2, #16
  401ada:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401ade:	684d      	ldr	r5, [r1, #4]
  401ae0:	022d      	lsls	r5, r5, #8
  401ae2:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401ae6:	432a      	orrs	r2, r5
  401ae8:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401aea:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401aec:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401aee:	b15d      	cbz	r5, 401b08 <twihs_master_write+0x40>
	val = addr[0];
  401af0:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401af2:	2d01      	cmp	r5, #1
  401af4:	dd02      	ble.n	401afc <twihs_master_write+0x34>
		val |= addr[1];
  401af6:	784e      	ldrb	r6, [r1, #1]
  401af8:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401afc:	2d02      	cmp	r5, #2
  401afe:	dd04      	ble.n	401b0a <twihs_master_write+0x42>
		val |= addr[2];
  401b00:	7889      	ldrb	r1, [r1, #2]
  401b02:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401b06:	e000      	b.n	401b0a <twihs_master_write+0x42>
		return 0;
  401b08:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401b0a:	60c2      	str	r2, [r0, #12]
  401b0c:	e004      	b.n	401b18 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401b0e:	f814 2b01 	ldrb.w	r2, [r4], #1
  401b12:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401b14:	3b01      	subs	r3, #1
  401b16:	d00f      	beq.n	401b38 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401b18:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401b1a:	f412 7f80 	tst.w	r2, #256	; 0x100
  401b1e:	d11e      	bne.n	401b5e <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401b20:	f012 0f04 	tst.w	r2, #4
  401b24:	d1f3      	bne.n	401b0e <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401b26:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401b28:	f412 7f80 	tst.w	r2, #256	; 0x100
  401b2c:	d115      	bne.n	401b5a <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401b2e:	f012 0f04 	tst.w	r2, #4
  401b32:	d1ec      	bne.n	401b0e <twihs_master_write+0x46>
	while (cnt > 0) {
  401b34:	2b00      	cmp	r3, #0
  401b36:	d1f6      	bne.n	401b26 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401b38:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401b3a:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b3e:	d111      	bne.n	401b64 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401b40:	f013 0f04 	tst.w	r3, #4
  401b44:	d0f8      	beq.n	401b38 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401b46:	2302      	movs	r3, #2
  401b48:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401b4a:	6a03      	ldr	r3, [r0, #32]
  401b4c:	f013 0f01 	tst.w	r3, #1
  401b50:	d0fb      	beq.n	401b4a <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401b52:	2000      	movs	r0, #0
  401b54:	e004      	b.n	401b60 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401b56:	2001      	movs	r0, #1
  401b58:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401b5a:	2005      	movs	r0, #5
  401b5c:	e000      	b.n	401b60 <twihs_master_write+0x98>
  401b5e:	2005      	movs	r0, #5
}
  401b60:	bc70      	pop	{r4, r5, r6}
  401b62:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401b64:	2005      	movs	r0, #5
  401b66:	e7fb      	b.n	401b60 <twihs_master_write+0x98>

00401b68 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401b68:	6943      	ldr	r3, [r0, #20]
  401b6a:	f013 0f02 	tst.w	r3, #2
  401b6e:	d002      	beq.n	401b76 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401b70:	61c1      	str	r1, [r0, #28]
	return 0;
  401b72:	2000      	movs	r0, #0
  401b74:	4770      	bx	lr
		return 1;
  401b76:	2001      	movs	r0, #1
}
  401b78:	4770      	bx	lr

00401b7a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401b7a:	6943      	ldr	r3, [r0, #20]
  401b7c:	f013 0f01 	tst.w	r3, #1
  401b80:	d003      	beq.n	401b8a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401b82:	6983      	ldr	r3, [r0, #24]
  401b84:	700b      	strb	r3, [r1, #0]
	return 0;
  401b86:	2000      	movs	r0, #0
  401b88:	4770      	bx	lr
		return 1;
  401b8a:	2001      	movs	r0, #1
}
  401b8c:	4770      	bx	lr

00401b8e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401b8e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401b90:	010b      	lsls	r3, r1, #4
  401b92:	4293      	cmp	r3, r2
  401b94:	d914      	bls.n	401bc0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401b96:	00c9      	lsls	r1, r1, #3
  401b98:	084b      	lsrs	r3, r1, #1
  401b9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401b9e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401ba2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401ba4:	1e5c      	subs	r4, r3, #1
  401ba6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401baa:	428c      	cmp	r4, r1
  401bac:	d901      	bls.n	401bb2 <usart_set_async_baudrate+0x24>
		return 1;
  401bae:	2001      	movs	r0, #1
  401bb0:	e017      	b.n	401be2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401bb2:	6841      	ldr	r1, [r0, #4]
  401bb4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401bb8:	6041      	str	r1, [r0, #4]
  401bba:	e00c      	b.n	401bd6 <usart_set_async_baudrate+0x48>
		return 1;
  401bbc:	2001      	movs	r0, #1
  401bbe:	e010      	b.n	401be2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401bc0:	0859      	lsrs	r1, r3, #1
  401bc2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401bc6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401bca:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401bcc:	1e5c      	subs	r4, r3, #1
  401bce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401bd2:	428c      	cmp	r4, r1
  401bd4:	d8f2      	bhi.n	401bbc <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401bd6:	0412      	lsls	r2, r2, #16
  401bd8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401bdc:	431a      	orrs	r2, r3
  401bde:	6202      	str	r2, [r0, #32]

	return 0;
  401be0:	2000      	movs	r0, #0
}
  401be2:	f85d 4b04 	ldr.w	r4, [sp], #4
  401be6:	4770      	bx	lr

00401be8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401be8:	4b08      	ldr	r3, [pc, #32]	; (401c0c <usart_reset+0x24>)
  401bea:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401bee:	2300      	movs	r3, #0
  401bf0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401bf2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401bf4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401bf6:	2388      	movs	r3, #136	; 0x88
  401bf8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401bfa:	2324      	movs	r3, #36	; 0x24
  401bfc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
  401c02:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401c04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401c08:	6003      	str	r3, [r0, #0]
  401c0a:	4770      	bx	lr
  401c0c:	55534100 	.word	0x55534100

00401c10 <usart_init_rs232>:
{
  401c10:	b570      	push	{r4, r5, r6, lr}
  401c12:	4605      	mov	r5, r0
  401c14:	460c      	mov	r4, r1
  401c16:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401c18:	4b0f      	ldr	r3, [pc, #60]	; (401c58 <usart_init_rs232+0x48>)
  401c1a:	4798      	blx	r3
	ul_reg_val = 0;
  401c1c:	2200      	movs	r2, #0
  401c1e:	4b0f      	ldr	r3, [pc, #60]	; (401c5c <usart_init_rs232+0x4c>)
  401c20:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401c22:	b1a4      	cbz	r4, 401c4e <usart_init_rs232+0x3e>
  401c24:	4632      	mov	r2, r6
  401c26:	6821      	ldr	r1, [r4, #0]
  401c28:	4628      	mov	r0, r5
  401c2a:	4b0d      	ldr	r3, [pc, #52]	; (401c60 <usart_init_rs232+0x50>)
  401c2c:	4798      	blx	r3
  401c2e:	4602      	mov	r2, r0
  401c30:	b978      	cbnz	r0, 401c52 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401c32:	6863      	ldr	r3, [r4, #4]
  401c34:	68a1      	ldr	r1, [r4, #8]
  401c36:	430b      	orrs	r3, r1
  401c38:	6921      	ldr	r1, [r4, #16]
  401c3a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401c3c:	68e1      	ldr	r1, [r4, #12]
  401c3e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401c40:	4906      	ldr	r1, [pc, #24]	; (401c5c <usart_init_rs232+0x4c>)
  401c42:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401c44:	6869      	ldr	r1, [r5, #4]
  401c46:	430b      	orrs	r3, r1
  401c48:	606b      	str	r3, [r5, #4]
}
  401c4a:	4610      	mov	r0, r2
  401c4c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401c4e:	2201      	movs	r2, #1
  401c50:	e7fb      	b.n	401c4a <usart_init_rs232+0x3a>
  401c52:	2201      	movs	r2, #1
  401c54:	e7f9      	b.n	401c4a <usart_init_rs232+0x3a>
  401c56:	bf00      	nop
  401c58:	00401be9 	.word	0x00401be9
  401c5c:	20400e0c 	.word	0x20400e0c
  401c60:	00401b8f 	.word	0x00401b8f

00401c64 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401c64:	2340      	movs	r3, #64	; 0x40
  401c66:	6003      	str	r3, [r0, #0]
  401c68:	4770      	bx	lr

00401c6a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401c6a:	2310      	movs	r3, #16
  401c6c:	6003      	str	r3, [r0, #0]
  401c6e:	4770      	bx	lr

00401c70 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401c70:	6943      	ldr	r3, [r0, #20]
  401c72:	f013 0f02 	tst.w	r3, #2
  401c76:	d004      	beq.n	401c82 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401c78:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401c7c:	61c1      	str	r1, [r0, #28]
	return 0;
  401c7e:	2000      	movs	r0, #0
  401c80:	4770      	bx	lr
		return 1;
  401c82:	2001      	movs	r0, #1
}
  401c84:	4770      	bx	lr

00401c86 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401c86:	6943      	ldr	r3, [r0, #20]
  401c88:	f013 0f01 	tst.w	r3, #1
  401c8c:	d005      	beq.n	401c9a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401c8e:	6983      	ldr	r3, [r0, #24]
  401c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401c94:	600b      	str	r3, [r1, #0]
	return 0;
  401c96:	2000      	movs	r0, #0
  401c98:	4770      	bx	lr
		return 1;
  401c9a:	2001      	movs	r0, #1
}
  401c9c:	4770      	bx	lr

00401c9e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401c9e:	e7fe      	b.n	401c9e <Dummy_Handler>

00401ca0 <Reset_Handler>:
{
  401ca0:	b500      	push	{lr}
  401ca2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401ca4:	4b25      	ldr	r3, [pc, #148]	; (401d3c <Reset_Handler+0x9c>)
  401ca6:	4a26      	ldr	r2, [pc, #152]	; (401d40 <Reset_Handler+0xa0>)
  401ca8:	429a      	cmp	r2, r3
  401caa:	d010      	beq.n	401cce <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401cac:	4b25      	ldr	r3, [pc, #148]	; (401d44 <Reset_Handler+0xa4>)
  401cae:	4a23      	ldr	r2, [pc, #140]	; (401d3c <Reset_Handler+0x9c>)
  401cb0:	429a      	cmp	r2, r3
  401cb2:	d20c      	bcs.n	401cce <Reset_Handler+0x2e>
  401cb4:	3b01      	subs	r3, #1
  401cb6:	1a9b      	subs	r3, r3, r2
  401cb8:	f023 0303 	bic.w	r3, r3, #3
  401cbc:	3304      	adds	r3, #4
  401cbe:	4413      	add	r3, r2
  401cc0:	491f      	ldr	r1, [pc, #124]	; (401d40 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401cc2:	f851 0b04 	ldr.w	r0, [r1], #4
  401cc6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401cca:	429a      	cmp	r2, r3
  401ccc:	d1f9      	bne.n	401cc2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401cce:	4b1e      	ldr	r3, [pc, #120]	; (401d48 <Reset_Handler+0xa8>)
  401cd0:	4a1e      	ldr	r2, [pc, #120]	; (401d4c <Reset_Handler+0xac>)
  401cd2:	429a      	cmp	r2, r3
  401cd4:	d20a      	bcs.n	401cec <Reset_Handler+0x4c>
  401cd6:	3b01      	subs	r3, #1
  401cd8:	1a9b      	subs	r3, r3, r2
  401cda:	f023 0303 	bic.w	r3, r3, #3
  401cde:	3304      	adds	r3, #4
  401ce0:	4413      	add	r3, r2
                *pDest++ = 0;
  401ce2:	2100      	movs	r1, #0
  401ce4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401ce8:	4293      	cmp	r3, r2
  401cea:	d1fb      	bne.n	401ce4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401cec:	4a18      	ldr	r2, [pc, #96]	; (401d50 <Reset_Handler+0xb0>)
  401cee:	4b19      	ldr	r3, [pc, #100]	; (401d54 <Reset_Handler+0xb4>)
  401cf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401cf4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401cf6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401cfa:	fab3 f383 	clz	r3, r3
  401cfe:	095b      	lsrs	r3, r3, #5
  401d00:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401d02:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401d04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401d08:	2200      	movs	r2, #0
  401d0a:	4b13      	ldr	r3, [pc, #76]	; (401d58 <Reset_Handler+0xb8>)
  401d0c:	701a      	strb	r2, [r3, #0]
	return flags;
  401d0e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401d10:	4a12      	ldr	r2, [pc, #72]	; (401d5c <Reset_Handler+0xbc>)
  401d12:	6813      	ldr	r3, [r2, #0]
  401d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401d18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401d1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401d1e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401d22:	b129      	cbz	r1, 401d30 <Reset_Handler+0x90>
		cpu_irq_enable();
  401d24:	2201      	movs	r2, #1
  401d26:	4b0c      	ldr	r3, [pc, #48]	; (401d58 <Reset_Handler+0xb8>)
  401d28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401d2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401d2e:	b662      	cpsie	i
        __libc_init_array();
  401d30:	4b0b      	ldr	r3, [pc, #44]	; (401d60 <Reset_Handler+0xc0>)
  401d32:	4798      	blx	r3
        main();
  401d34:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <Reset_Handler+0xc4>)
  401d36:	4798      	blx	r3
  401d38:	e7fe      	b.n	401d38 <Reset_Handler+0x98>
  401d3a:	bf00      	nop
  401d3c:	20400000 	.word	0x20400000
  401d40:	00407480 	.word	0x00407480
  401d44:	204009c0 	.word	0x204009c0
  401d48:	2040c898 	.word	0x2040c898
  401d4c:	204009c0 	.word	0x204009c0
  401d50:	e000ed00 	.word	0xe000ed00
  401d54:	00400000 	.word	0x00400000
  401d58:	2040000a 	.word	0x2040000a
  401d5c:	e000ed88 	.word	0xe000ed88
  401d60:	00404219 	.word	0x00404219
  401d64:	00404111 	.word	0x00404111

00401d68 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401d68:	4b3b      	ldr	r3, [pc, #236]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d6c:	f003 0303 	and.w	r3, r3, #3
  401d70:	2b01      	cmp	r3, #1
  401d72:	d01d      	beq.n	401db0 <SystemCoreClockUpdate+0x48>
  401d74:	b183      	cbz	r3, 401d98 <SystemCoreClockUpdate+0x30>
  401d76:	2b02      	cmp	r3, #2
  401d78:	d036      	beq.n	401de8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401d7a:	4b37      	ldr	r3, [pc, #220]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d82:	2b70      	cmp	r3, #112	; 0x70
  401d84:	d05f      	beq.n	401e46 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401d86:	4b34      	ldr	r3, [pc, #208]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d8a:	4934      	ldr	r1, [pc, #208]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401d8c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401d90:	680b      	ldr	r3, [r1, #0]
  401d92:	40d3      	lsrs	r3, r2
  401d94:	600b      	str	r3, [r1, #0]
  401d96:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401d98:	4b31      	ldr	r3, [pc, #196]	; (401e60 <SystemCoreClockUpdate+0xf8>)
  401d9a:	695b      	ldr	r3, [r3, #20]
  401d9c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401da0:	bf14      	ite	ne
  401da2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401da6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401daa:	4b2c      	ldr	r3, [pc, #176]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401dac:	601a      	str	r2, [r3, #0]
  401dae:	e7e4      	b.n	401d7a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401db0:	4b29      	ldr	r3, [pc, #164]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401db2:	6a1b      	ldr	r3, [r3, #32]
  401db4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401db8:	d003      	beq.n	401dc2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401dba:	4a2a      	ldr	r2, [pc, #168]	; (401e64 <SystemCoreClockUpdate+0xfc>)
  401dbc:	4b27      	ldr	r3, [pc, #156]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401dbe:	601a      	str	r2, [r3, #0]
  401dc0:	e7db      	b.n	401d7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401dc2:	4a29      	ldr	r2, [pc, #164]	; (401e68 <SystemCoreClockUpdate+0x100>)
  401dc4:	4b25      	ldr	r3, [pc, #148]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401dc6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401dc8:	4b23      	ldr	r3, [pc, #140]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401dca:	6a1b      	ldr	r3, [r3, #32]
  401dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401dd0:	2b10      	cmp	r3, #16
  401dd2:	d005      	beq.n	401de0 <SystemCoreClockUpdate+0x78>
  401dd4:	2b20      	cmp	r3, #32
  401dd6:	d1d0      	bne.n	401d7a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401dd8:	4a22      	ldr	r2, [pc, #136]	; (401e64 <SystemCoreClockUpdate+0xfc>)
  401dda:	4b20      	ldr	r3, [pc, #128]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401ddc:	601a      	str	r2, [r3, #0]
          break;
  401dde:	e7cc      	b.n	401d7a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401de0:	4a22      	ldr	r2, [pc, #136]	; (401e6c <SystemCoreClockUpdate+0x104>)
  401de2:	4b1e      	ldr	r3, [pc, #120]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401de4:	601a      	str	r2, [r3, #0]
          break;
  401de6:	e7c8      	b.n	401d7a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401de8:	4b1b      	ldr	r3, [pc, #108]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401dea:	6a1b      	ldr	r3, [r3, #32]
  401dec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401df0:	d016      	beq.n	401e20 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401df2:	4a1c      	ldr	r2, [pc, #112]	; (401e64 <SystemCoreClockUpdate+0xfc>)
  401df4:	4b19      	ldr	r3, [pc, #100]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401df6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401df8:	4b17      	ldr	r3, [pc, #92]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401dfc:	f003 0303 	and.w	r3, r3, #3
  401e00:	2b02      	cmp	r3, #2
  401e02:	d1ba      	bne.n	401d7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401e04:	4a14      	ldr	r2, [pc, #80]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401e06:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401e08:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401e0a:	4814      	ldr	r0, [pc, #80]	; (401e5c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401e0c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401e10:	6803      	ldr	r3, [r0, #0]
  401e12:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401e16:	b2d2      	uxtb	r2, r2
  401e18:	fbb3 f3f2 	udiv	r3, r3, r2
  401e1c:	6003      	str	r3, [r0, #0]
  401e1e:	e7ac      	b.n	401d7a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e20:	4a11      	ldr	r2, [pc, #68]	; (401e68 <SystemCoreClockUpdate+0x100>)
  401e22:	4b0e      	ldr	r3, [pc, #56]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401e24:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401e26:	4b0c      	ldr	r3, [pc, #48]	; (401e58 <SystemCoreClockUpdate+0xf0>)
  401e28:	6a1b      	ldr	r3, [r3, #32]
  401e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e2e:	2b10      	cmp	r3, #16
  401e30:	d005      	beq.n	401e3e <SystemCoreClockUpdate+0xd6>
  401e32:	2b20      	cmp	r3, #32
  401e34:	d1e0      	bne.n	401df8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401e36:	4a0b      	ldr	r2, [pc, #44]	; (401e64 <SystemCoreClockUpdate+0xfc>)
  401e38:	4b08      	ldr	r3, [pc, #32]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401e3a:	601a      	str	r2, [r3, #0]
          break;
  401e3c:	e7dc      	b.n	401df8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401e3e:	4a0b      	ldr	r2, [pc, #44]	; (401e6c <SystemCoreClockUpdate+0x104>)
  401e40:	4b06      	ldr	r3, [pc, #24]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401e42:	601a      	str	r2, [r3, #0]
          break;
  401e44:	e7d8      	b.n	401df8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401e46:	4a05      	ldr	r2, [pc, #20]	; (401e5c <SystemCoreClockUpdate+0xf4>)
  401e48:	6813      	ldr	r3, [r2, #0]
  401e4a:	4909      	ldr	r1, [pc, #36]	; (401e70 <SystemCoreClockUpdate+0x108>)
  401e4c:	fba1 1303 	umull	r1, r3, r1, r3
  401e50:	085b      	lsrs	r3, r3, #1
  401e52:	6013      	str	r3, [r2, #0]
  401e54:	4770      	bx	lr
  401e56:	bf00      	nop
  401e58:	400e0600 	.word	0x400e0600
  401e5c:	2040000c 	.word	0x2040000c
  401e60:	400e1810 	.word	0x400e1810
  401e64:	00b71b00 	.word	0x00b71b00
  401e68:	003d0900 	.word	0x003d0900
  401e6c:	007a1200 	.word	0x007a1200
  401e70:	aaaaaaab 	.word	0xaaaaaaab

00401e74 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401e74:	4b16      	ldr	r3, [pc, #88]	; (401ed0 <system_init_flash+0x5c>)
  401e76:	4298      	cmp	r0, r3
  401e78:	d913      	bls.n	401ea2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401e7a:	4b16      	ldr	r3, [pc, #88]	; (401ed4 <system_init_flash+0x60>)
  401e7c:	4298      	cmp	r0, r3
  401e7e:	d915      	bls.n	401eac <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401e80:	4b15      	ldr	r3, [pc, #84]	; (401ed8 <system_init_flash+0x64>)
  401e82:	4298      	cmp	r0, r3
  401e84:	d916      	bls.n	401eb4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401e86:	4b15      	ldr	r3, [pc, #84]	; (401edc <system_init_flash+0x68>)
  401e88:	4298      	cmp	r0, r3
  401e8a:	d917      	bls.n	401ebc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401e8c:	4b14      	ldr	r3, [pc, #80]	; (401ee0 <system_init_flash+0x6c>)
  401e8e:	4298      	cmp	r0, r3
  401e90:	d918      	bls.n	401ec4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401e92:	4b14      	ldr	r3, [pc, #80]	; (401ee4 <system_init_flash+0x70>)
  401e94:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401e96:	bf94      	ite	ls
  401e98:	4a13      	ldrls	r2, [pc, #76]	; (401ee8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401e9a:	4a14      	ldrhi	r2, [pc, #80]	; (401eec <system_init_flash+0x78>)
  401e9c:	4b14      	ldr	r3, [pc, #80]	; (401ef0 <system_init_flash+0x7c>)
  401e9e:	601a      	str	r2, [r3, #0]
  401ea0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401ea2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401ea6:	4b12      	ldr	r3, [pc, #72]	; (401ef0 <system_init_flash+0x7c>)
  401ea8:	601a      	str	r2, [r3, #0]
  401eaa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401eac:	4a11      	ldr	r2, [pc, #68]	; (401ef4 <system_init_flash+0x80>)
  401eae:	4b10      	ldr	r3, [pc, #64]	; (401ef0 <system_init_flash+0x7c>)
  401eb0:	601a      	str	r2, [r3, #0]
  401eb2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401eb4:	4a10      	ldr	r2, [pc, #64]	; (401ef8 <system_init_flash+0x84>)
  401eb6:	4b0e      	ldr	r3, [pc, #56]	; (401ef0 <system_init_flash+0x7c>)
  401eb8:	601a      	str	r2, [r3, #0]
  401eba:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401ebc:	4a0f      	ldr	r2, [pc, #60]	; (401efc <system_init_flash+0x88>)
  401ebe:	4b0c      	ldr	r3, [pc, #48]	; (401ef0 <system_init_flash+0x7c>)
  401ec0:	601a      	str	r2, [r3, #0]
  401ec2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401ec4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401ec8:	4b09      	ldr	r3, [pc, #36]	; (401ef0 <system_init_flash+0x7c>)
  401eca:	601a      	str	r2, [r3, #0]
  401ecc:	4770      	bx	lr
  401ece:	bf00      	nop
  401ed0:	015ef3bf 	.word	0x015ef3bf
  401ed4:	02bde77f 	.word	0x02bde77f
  401ed8:	041cdb3f 	.word	0x041cdb3f
  401edc:	057bceff 	.word	0x057bceff
  401ee0:	06dac2bf 	.word	0x06dac2bf
  401ee4:	0839b67f 	.word	0x0839b67f
  401ee8:	04000500 	.word	0x04000500
  401eec:	04000600 	.word	0x04000600
  401ef0:	400e0c00 	.word	0x400e0c00
  401ef4:	04000100 	.word	0x04000100
  401ef8:	04000200 	.word	0x04000200
  401efc:	04000300 	.word	0x04000300

00401f00 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401f00:	4b0a      	ldr	r3, [pc, #40]	; (401f2c <_sbrk+0x2c>)
  401f02:	681b      	ldr	r3, [r3, #0]
  401f04:	b153      	cbz	r3, 401f1c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401f06:	4b09      	ldr	r3, [pc, #36]	; (401f2c <_sbrk+0x2c>)
  401f08:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401f0a:	181a      	adds	r2, r3, r0
  401f0c:	4908      	ldr	r1, [pc, #32]	; (401f30 <_sbrk+0x30>)
  401f0e:	4291      	cmp	r1, r2
  401f10:	db08      	blt.n	401f24 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401f12:	4610      	mov	r0, r2
  401f14:	4a05      	ldr	r2, [pc, #20]	; (401f2c <_sbrk+0x2c>)
  401f16:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401f18:	4618      	mov	r0, r3
  401f1a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401f1c:	4a05      	ldr	r2, [pc, #20]	; (401f34 <_sbrk+0x34>)
  401f1e:	4b03      	ldr	r3, [pc, #12]	; (401f2c <_sbrk+0x2c>)
  401f20:	601a      	str	r2, [r3, #0]
  401f22:	e7f0      	b.n	401f06 <_sbrk+0x6>
		return (caddr_t) -1;	
  401f24:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f28:	4770      	bx	lr
  401f2a:	bf00      	nop
  401f2c:	20400e10 	.word	0x20400e10
  401f30:	2045fffc 	.word	0x2045fffc
  401f34:	2040ea98 	.word	0x2040ea98

00401f38 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401f38:	f04f 30ff 	mov.w	r0, #4294967295
  401f3c:	4770      	bx	lr

00401f3e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401f42:	604b      	str	r3, [r1, #4]

	return 0;
}
  401f44:	2000      	movs	r0, #0
  401f46:	4770      	bx	lr

00401f48 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401f48:	2001      	movs	r0, #1
  401f4a:	4770      	bx	lr

00401f4c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401f4c:	2000      	movs	r0, #0
  401f4e:	4770      	bx	lr

00401f50 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401f50:	f100 0308 	add.w	r3, r0, #8
  401f54:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401f56:	f04f 32ff 	mov.w	r2, #4294967295
  401f5a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401f5c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401f5e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401f60:	2300      	movs	r3, #0
  401f62:	6003      	str	r3, [r0, #0]
  401f64:	4770      	bx	lr

00401f66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401f66:	2300      	movs	r3, #0
  401f68:	6103      	str	r3, [r0, #16]
  401f6a:	4770      	bx	lr

00401f6c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401f6c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401f6e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401f70:	689a      	ldr	r2, [r3, #8]
  401f72:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401f74:	689a      	ldr	r2, [r3, #8]
  401f76:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401f78:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401f7a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401f7c:	6803      	ldr	r3, [r0, #0]
  401f7e:	3301      	adds	r3, #1
  401f80:	6003      	str	r3, [r0, #0]
  401f82:	4770      	bx	lr

00401f84 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401f84:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401f86:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401f88:	f1b5 3fff 	cmp.w	r5, #4294967295
  401f8c:	d002      	beq.n	401f94 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401f8e:	f100 0208 	add.w	r2, r0, #8
  401f92:	e002      	b.n	401f9a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401f94:	6902      	ldr	r2, [r0, #16]
  401f96:	e004      	b.n	401fa2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401f98:	461a      	mov	r2, r3
  401f9a:	6853      	ldr	r3, [r2, #4]
  401f9c:	681c      	ldr	r4, [r3, #0]
  401f9e:	42a5      	cmp	r5, r4
  401fa0:	d2fa      	bcs.n	401f98 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401fa2:	6853      	ldr	r3, [r2, #4]
  401fa4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401fa6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401fa8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401faa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401fac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401fae:	6803      	ldr	r3, [r0, #0]
  401fb0:	3301      	adds	r3, #1
  401fb2:	6003      	str	r3, [r0, #0]
}
  401fb4:	bc30      	pop	{r4, r5}
  401fb6:	4770      	bx	lr

00401fb8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401fb8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401fba:	6842      	ldr	r2, [r0, #4]
  401fbc:	6881      	ldr	r1, [r0, #8]
  401fbe:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401fc0:	6882      	ldr	r2, [r0, #8]
  401fc2:	6841      	ldr	r1, [r0, #4]
  401fc4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401fc6:	685a      	ldr	r2, [r3, #4]
  401fc8:	4290      	cmp	r0, r2
  401fca:	d005      	beq.n	401fd8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401fcc:	2200      	movs	r2, #0
  401fce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401fd0:	6818      	ldr	r0, [r3, #0]
  401fd2:	3801      	subs	r0, #1
  401fd4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401fd6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401fd8:	6882      	ldr	r2, [r0, #8]
  401fda:	605a      	str	r2, [r3, #4]
  401fdc:	e7f6      	b.n	401fcc <uxListRemove+0x14>
	...

00401fe0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401fe0:	4b0d      	ldr	r3, [pc, #52]	; (402018 <prvTaskExitError+0x38>)
  401fe2:	681b      	ldr	r3, [r3, #0]
  401fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fe8:	d00a      	beq.n	402000 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401fea:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fee:	b672      	cpsid	i
  401ff0:	f383 8811 	msr	BASEPRI, r3
  401ff4:	f3bf 8f6f 	isb	sy
  401ff8:	f3bf 8f4f 	dsb	sy
  401ffc:	b662      	cpsie	i
  401ffe:	e7fe      	b.n	401ffe <prvTaskExitError+0x1e>
  402000:	f04f 0380 	mov.w	r3, #128	; 0x80
  402004:	b672      	cpsid	i
  402006:	f383 8811 	msr	BASEPRI, r3
  40200a:	f3bf 8f6f 	isb	sy
  40200e:	f3bf 8f4f 	dsb	sy
  402012:	b662      	cpsie	i
  402014:	e7fe      	b.n	402014 <prvTaskExitError+0x34>
  402016:	bf00      	nop
  402018:	20400010 	.word	0x20400010

0040201c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40201c:	4806      	ldr	r0, [pc, #24]	; (402038 <prvPortStartFirstTask+0x1c>)
  40201e:	6800      	ldr	r0, [r0, #0]
  402020:	6800      	ldr	r0, [r0, #0]
  402022:	f380 8808 	msr	MSP, r0
  402026:	b662      	cpsie	i
  402028:	b661      	cpsie	f
  40202a:	f3bf 8f4f 	dsb	sy
  40202e:	f3bf 8f6f 	isb	sy
  402032:	df00      	svc	0
  402034:	bf00      	nop
  402036:	0000      	.short	0x0000
  402038:	e000ed08 	.word	0xe000ed08

0040203c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40203c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40204c <vPortEnableVFP+0x10>
  402040:	6801      	ldr	r1, [r0, #0]
  402042:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402046:	6001      	str	r1, [r0, #0]
  402048:	4770      	bx	lr
  40204a:	0000      	.short	0x0000
  40204c:	e000ed88 	.word	0xe000ed88

00402050 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  402050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402054:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  402058:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40205c:	4b05      	ldr	r3, [pc, #20]	; (402074 <pxPortInitialiseStack+0x24>)
  40205e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  402062:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  402066:	f06f 0302 	mvn.w	r3, #2
  40206a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40206e:	3844      	subs	r0, #68	; 0x44
  402070:	4770      	bx	lr
  402072:	bf00      	nop
  402074:	00401fe1 	.word	0x00401fe1

00402078 <SVC_Handler>:
	__asm volatile (
  402078:	4b06      	ldr	r3, [pc, #24]	; (402094 <pxCurrentTCBConst2>)
  40207a:	6819      	ldr	r1, [r3, #0]
  40207c:	6808      	ldr	r0, [r1, #0]
  40207e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402082:	f380 8809 	msr	PSP, r0
  402086:	f3bf 8f6f 	isb	sy
  40208a:	f04f 0000 	mov.w	r0, #0
  40208e:	f380 8811 	msr	BASEPRI, r0
  402092:	4770      	bx	lr

00402094 <pxCurrentTCBConst2>:
  402094:	2040c624 	.word	0x2040c624
  402098:	4770      	bx	lr
  40209a:	bf00      	nop

0040209c <vPortEnterCritical>:
  40209c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a0:	b672      	cpsid	i
  4020a2:	f383 8811 	msr	BASEPRI, r3
  4020a6:	f3bf 8f6f 	isb	sy
  4020aa:	f3bf 8f4f 	dsb	sy
  4020ae:	b662      	cpsie	i
	uxCriticalNesting++;
  4020b0:	4a0b      	ldr	r2, [pc, #44]	; (4020e0 <vPortEnterCritical+0x44>)
  4020b2:	6813      	ldr	r3, [r2, #0]
  4020b4:	3301      	adds	r3, #1
  4020b6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4020b8:	2b01      	cmp	r3, #1
  4020ba:	d10f      	bne.n	4020dc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4020bc:	4b09      	ldr	r3, [pc, #36]	; (4020e4 <vPortEnterCritical+0x48>)
  4020be:	681b      	ldr	r3, [r3, #0]
  4020c0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4020c4:	d00a      	beq.n	4020dc <vPortEnterCritical+0x40>
  4020c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ca:	b672      	cpsid	i
  4020cc:	f383 8811 	msr	BASEPRI, r3
  4020d0:	f3bf 8f6f 	isb	sy
  4020d4:	f3bf 8f4f 	dsb	sy
  4020d8:	b662      	cpsie	i
  4020da:	e7fe      	b.n	4020da <vPortEnterCritical+0x3e>
  4020dc:	4770      	bx	lr
  4020de:	bf00      	nop
  4020e0:	20400010 	.word	0x20400010
  4020e4:	e000ed04 	.word	0xe000ed04

004020e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4020e8:	4b0a      	ldr	r3, [pc, #40]	; (402114 <vPortExitCritical+0x2c>)
  4020ea:	681b      	ldr	r3, [r3, #0]
  4020ec:	b953      	cbnz	r3, 402104 <vPortExitCritical+0x1c>
  4020ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020f2:	b672      	cpsid	i
  4020f4:	f383 8811 	msr	BASEPRI, r3
  4020f8:	f3bf 8f6f 	isb	sy
  4020fc:	f3bf 8f4f 	dsb	sy
  402100:	b662      	cpsie	i
  402102:	e7fe      	b.n	402102 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  402104:	3b01      	subs	r3, #1
  402106:	4a03      	ldr	r2, [pc, #12]	; (402114 <vPortExitCritical+0x2c>)
  402108:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40210a:	b90b      	cbnz	r3, 402110 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40210c:	f383 8811 	msr	BASEPRI, r3
  402110:	4770      	bx	lr
  402112:	bf00      	nop
  402114:	20400010 	.word	0x20400010

00402118 <PendSV_Handler>:
	__asm volatile
  402118:	f3ef 8009 	mrs	r0, PSP
  40211c:	f3bf 8f6f 	isb	sy
  402120:	4b15      	ldr	r3, [pc, #84]	; (402178 <pxCurrentTCBConst>)
  402122:	681a      	ldr	r2, [r3, #0]
  402124:	f01e 0f10 	tst.w	lr, #16
  402128:	bf08      	it	eq
  40212a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40212e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402132:	6010      	str	r0, [r2, #0]
  402134:	f84d 3d04 	str.w	r3, [sp, #-4]!
  402138:	f04f 0080 	mov.w	r0, #128	; 0x80
  40213c:	b672      	cpsid	i
  40213e:	f380 8811 	msr	BASEPRI, r0
  402142:	f3bf 8f4f 	dsb	sy
  402146:	f3bf 8f6f 	isb	sy
  40214a:	b662      	cpsie	i
  40214c:	f001 f8aa 	bl	4032a4 <vTaskSwitchContext>
  402150:	f04f 0000 	mov.w	r0, #0
  402154:	f380 8811 	msr	BASEPRI, r0
  402158:	bc08      	pop	{r3}
  40215a:	6819      	ldr	r1, [r3, #0]
  40215c:	6808      	ldr	r0, [r1, #0]
  40215e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402162:	f01e 0f10 	tst.w	lr, #16
  402166:	bf08      	it	eq
  402168:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40216c:	f380 8809 	msr	PSP, r0
  402170:	f3bf 8f6f 	isb	sy
  402174:	4770      	bx	lr
  402176:	bf00      	nop

00402178 <pxCurrentTCBConst>:
  402178:	2040c624 	.word	0x2040c624
  40217c:	4770      	bx	lr
  40217e:	bf00      	nop

00402180 <SysTick_Handler>:
{
  402180:	b508      	push	{r3, lr}
	__asm volatile
  402182:	f3ef 8311 	mrs	r3, BASEPRI
  402186:	f04f 0280 	mov.w	r2, #128	; 0x80
  40218a:	b672      	cpsid	i
  40218c:	f382 8811 	msr	BASEPRI, r2
  402190:	f3bf 8f6f 	isb	sy
  402194:	f3bf 8f4f 	dsb	sy
  402198:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40219a:	4b05      	ldr	r3, [pc, #20]	; (4021b0 <SysTick_Handler+0x30>)
  40219c:	4798      	blx	r3
  40219e:	b118      	cbz	r0, 4021a8 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4021a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4021a4:	4b03      	ldr	r3, [pc, #12]	; (4021b4 <SysTick_Handler+0x34>)
  4021a6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4021a8:	2300      	movs	r3, #0
  4021aa:	f383 8811 	msr	BASEPRI, r3
  4021ae:	bd08      	pop	{r3, pc}
  4021b0:	00402f11 	.word	0x00402f11
  4021b4:	e000ed04 	.word	0xe000ed04

004021b8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4021b8:	4a03      	ldr	r2, [pc, #12]	; (4021c8 <vPortSetupTimerInterrupt+0x10>)
  4021ba:	4b04      	ldr	r3, [pc, #16]	; (4021cc <vPortSetupTimerInterrupt+0x14>)
  4021bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4021be:	2207      	movs	r2, #7
  4021c0:	3b04      	subs	r3, #4
  4021c2:	601a      	str	r2, [r3, #0]
  4021c4:	4770      	bx	lr
  4021c6:	bf00      	nop
  4021c8:	0003a97f 	.word	0x0003a97f
  4021cc:	e000e014 	.word	0xe000e014

004021d0 <xPortStartScheduler>:
{
  4021d0:	b500      	push	{lr}
  4021d2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4021d4:	4b25      	ldr	r3, [pc, #148]	; (40226c <xPortStartScheduler+0x9c>)
  4021d6:	781a      	ldrb	r2, [r3, #0]
  4021d8:	b2d2      	uxtb	r2, r2
  4021da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4021dc:	22ff      	movs	r2, #255	; 0xff
  4021de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4021e0:	781b      	ldrb	r3, [r3, #0]
  4021e2:	b2db      	uxtb	r3, r3
  4021e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4021e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4021f0:	4a1f      	ldr	r2, [pc, #124]	; (402270 <xPortStartScheduler+0xa0>)
  4021f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4021f4:	2207      	movs	r2, #7
  4021f6:	4b1f      	ldr	r3, [pc, #124]	; (402274 <xPortStartScheduler+0xa4>)
  4021f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4021fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4021fe:	f013 0f80 	tst.w	r3, #128	; 0x80
  402202:	d010      	beq.n	402226 <xPortStartScheduler+0x56>
  402204:	2206      	movs	r2, #6
  402206:	e000      	b.n	40220a <xPortStartScheduler+0x3a>
  402208:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40220a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40220e:	005b      	lsls	r3, r3, #1
  402210:	b2db      	uxtb	r3, r3
  402212:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402216:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40221a:	1e51      	subs	r1, r2, #1
  40221c:	f013 0f80 	tst.w	r3, #128	; 0x80
  402220:	d1f2      	bne.n	402208 <xPortStartScheduler+0x38>
  402222:	4b14      	ldr	r3, [pc, #80]	; (402274 <xPortStartScheduler+0xa4>)
  402224:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402226:	4a13      	ldr	r2, [pc, #76]	; (402274 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  402228:	6813      	ldr	r3, [r2, #0]
  40222a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40222c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402230:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  402232:	9b01      	ldr	r3, [sp, #4]
  402234:	b2db      	uxtb	r3, r3
  402236:	4a0d      	ldr	r2, [pc, #52]	; (40226c <xPortStartScheduler+0x9c>)
  402238:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40223a:	4b0f      	ldr	r3, [pc, #60]	; (402278 <xPortStartScheduler+0xa8>)
  40223c:	681a      	ldr	r2, [r3, #0]
  40223e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  402242:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  402244:	681a      	ldr	r2, [r3, #0]
  402246:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40224a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40224c:	4b0b      	ldr	r3, [pc, #44]	; (40227c <xPortStartScheduler+0xac>)
  40224e:	4798      	blx	r3
	uxCriticalNesting = 0;
  402250:	2200      	movs	r2, #0
  402252:	4b0b      	ldr	r3, [pc, #44]	; (402280 <xPortStartScheduler+0xb0>)
  402254:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  402256:	4b0b      	ldr	r3, [pc, #44]	; (402284 <xPortStartScheduler+0xb4>)
  402258:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40225a:	4a0b      	ldr	r2, [pc, #44]	; (402288 <xPortStartScheduler+0xb8>)
  40225c:	6813      	ldr	r3, [r2, #0]
  40225e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  402262:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  402264:	4b09      	ldr	r3, [pc, #36]	; (40228c <xPortStartScheduler+0xbc>)
  402266:	4798      	blx	r3
	prvTaskExitError();
  402268:	4b09      	ldr	r3, [pc, #36]	; (402290 <xPortStartScheduler+0xc0>)
  40226a:	4798      	blx	r3
  40226c:	e000e400 	.word	0xe000e400
  402270:	20400e14 	.word	0x20400e14
  402274:	20400e18 	.word	0x20400e18
  402278:	e000ed20 	.word	0xe000ed20
  40227c:	004021b9 	.word	0x004021b9
  402280:	20400010 	.word	0x20400010
  402284:	0040203d 	.word	0x0040203d
  402288:	e000ef34 	.word	0xe000ef34
  40228c:	0040201d 	.word	0x0040201d
  402290:	00401fe1 	.word	0x00401fe1

00402294 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  402294:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  402298:	2b0f      	cmp	r3, #15
  40229a:	d911      	bls.n	4022c0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40229c:	4a12      	ldr	r2, [pc, #72]	; (4022e8 <vPortValidateInterruptPriority+0x54>)
  40229e:	5c9b      	ldrb	r3, [r3, r2]
  4022a0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4022a2:	4a12      	ldr	r2, [pc, #72]	; (4022ec <vPortValidateInterruptPriority+0x58>)
  4022a4:	7812      	ldrb	r2, [r2, #0]
  4022a6:	429a      	cmp	r2, r3
  4022a8:	d90a      	bls.n	4022c0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4022aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ae:	b672      	cpsid	i
  4022b0:	f383 8811 	msr	BASEPRI, r3
  4022b4:	f3bf 8f6f 	isb	sy
  4022b8:	f3bf 8f4f 	dsb	sy
  4022bc:	b662      	cpsie	i
  4022be:	e7fe      	b.n	4022be <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4022c0:	4b0b      	ldr	r3, [pc, #44]	; (4022f0 <vPortValidateInterruptPriority+0x5c>)
  4022c2:	681b      	ldr	r3, [r3, #0]
  4022c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4022c8:	4a0a      	ldr	r2, [pc, #40]	; (4022f4 <vPortValidateInterruptPriority+0x60>)
  4022ca:	6812      	ldr	r2, [r2, #0]
  4022cc:	4293      	cmp	r3, r2
  4022ce:	d90a      	bls.n	4022e6 <vPortValidateInterruptPriority+0x52>
  4022d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022d4:	b672      	cpsid	i
  4022d6:	f383 8811 	msr	BASEPRI, r3
  4022da:	f3bf 8f6f 	isb	sy
  4022de:	f3bf 8f4f 	dsb	sy
  4022e2:	b662      	cpsie	i
  4022e4:	e7fe      	b.n	4022e4 <vPortValidateInterruptPriority+0x50>
  4022e6:	4770      	bx	lr
  4022e8:	e000e3f0 	.word	0xe000e3f0
  4022ec:	20400e14 	.word	0x20400e14
  4022f0:	e000ed0c 	.word	0xe000ed0c
  4022f4:	20400e18 	.word	0x20400e18

004022f8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4022f8:	b538      	push	{r3, r4, r5, lr}
  4022fa:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4022fc:	f010 0f07 	tst.w	r0, #7
  402300:	d002      	beq.n	402308 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  402302:	f020 0407 	bic.w	r4, r0, #7
  402306:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  402308:	4b11      	ldr	r3, [pc, #68]	; (402350 <pvPortMalloc+0x58>)
  40230a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  40230c:	4b11      	ldr	r3, [pc, #68]	; (402354 <pvPortMalloc+0x5c>)
  40230e:	681b      	ldr	r3, [r3, #0]
  402310:	b193      	cbz	r3, 402338 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  402312:	4b11      	ldr	r3, [pc, #68]	; (402358 <pvPortMalloc+0x60>)
  402314:	681b      	ldr	r3, [r3, #0]
  402316:	441c      	add	r4, r3
  402318:	42a3      	cmp	r3, r4
  40231a:	d213      	bcs.n	402344 <pvPortMalloc+0x4c>
  40231c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  402320:	4294      	cmp	r4, r2
  402322:	d80f      	bhi.n	402344 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  402324:	4a0b      	ldr	r2, [pc, #44]	; (402354 <pvPortMalloc+0x5c>)
  402326:	6815      	ldr	r5, [r2, #0]
  402328:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40232a:	4b0b      	ldr	r3, [pc, #44]	; (402358 <pvPortMalloc+0x60>)
  40232c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40232e:	4b0b      	ldr	r3, [pc, #44]	; (40235c <pvPortMalloc+0x64>)
  402330:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  402332:	b14d      	cbz	r5, 402348 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  402334:	4628      	mov	r0, r5
  402336:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  402338:	4b09      	ldr	r3, [pc, #36]	; (402360 <pvPortMalloc+0x68>)
  40233a:	f023 0307 	bic.w	r3, r3, #7
  40233e:	4a05      	ldr	r2, [pc, #20]	; (402354 <pvPortMalloc+0x5c>)
  402340:	6013      	str	r3, [r2, #0]
  402342:	e7e6      	b.n	402312 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  402344:	4b05      	ldr	r3, [pc, #20]	; (40235c <pvPortMalloc+0x64>)
  402346:	4798      	blx	r3
			vApplicationMallocFailedHook();
  402348:	4b06      	ldr	r3, [pc, #24]	; (402364 <pvPortMalloc+0x6c>)
  40234a:	4798      	blx	r3
  40234c:	2500      	movs	r5, #0
	return pvReturn;
  40234e:	e7f1      	b.n	402334 <pvPortMalloc+0x3c>
  402350:	00402ef5 	.word	0x00402ef5
  402354:	20400e1c 	.word	0x20400e1c
  402358:	2040c620 	.word	0x2040c620
  40235c:	0040305d 	.word	0x0040305d
  402360:	20400e28 	.word	0x20400e28
  402364:	00403da7 	.word	0x00403da7

00402368 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  402368:	b150      	cbz	r0, 402380 <vPortFree+0x18>
  40236a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40236e:	b672      	cpsid	i
  402370:	f383 8811 	msr	BASEPRI, r3
  402374:	f3bf 8f6f 	isb	sy
  402378:	f3bf 8f4f 	dsb	sy
  40237c:	b662      	cpsie	i
  40237e:	e7fe      	b.n	40237e <vPortFree+0x16>
  402380:	4770      	bx	lr
	...

00402384 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  402384:	b538      	push	{r3, r4, r5, lr}
  402386:	4604      	mov	r4, r0
  402388:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40238a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40238c:	b95a      	cbnz	r2, 4023a6 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40238e:	6803      	ldr	r3, [r0, #0]
  402390:	2b00      	cmp	r3, #0
  402392:	d12e      	bne.n	4023f2 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  402394:	6840      	ldr	r0, [r0, #4]
  402396:	4b1b      	ldr	r3, [pc, #108]	; (402404 <prvCopyDataToQueue+0x80>)
  402398:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40239a:	2300      	movs	r3, #0
  40239c:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40239e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023a0:	3301      	adds	r3, #1
  4023a2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4023a4:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4023a6:	b96d      	cbnz	r5, 4023c4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4023a8:	6880      	ldr	r0, [r0, #8]
  4023aa:	4b17      	ldr	r3, [pc, #92]	; (402408 <prvCopyDataToQueue+0x84>)
  4023ac:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4023ae:	68a3      	ldr	r3, [r4, #8]
  4023b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4023b2:	4413      	add	r3, r2
  4023b4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4023b6:	6862      	ldr	r2, [r4, #4]
  4023b8:	4293      	cmp	r3, r2
  4023ba:	d31c      	bcc.n	4023f6 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4023bc:	6823      	ldr	r3, [r4, #0]
  4023be:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4023c0:	2000      	movs	r0, #0
  4023c2:	e7ec      	b.n	40239e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023c4:	68c0      	ldr	r0, [r0, #12]
  4023c6:	4b10      	ldr	r3, [pc, #64]	; (402408 <prvCopyDataToQueue+0x84>)
  4023c8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4023ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4023cc:	425b      	negs	r3, r3
  4023ce:	68e2      	ldr	r2, [r4, #12]
  4023d0:	441a      	add	r2, r3
  4023d2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4023d4:	6821      	ldr	r1, [r4, #0]
  4023d6:	428a      	cmp	r2, r1
  4023d8:	d202      	bcs.n	4023e0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4023da:	6862      	ldr	r2, [r4, #4]
  4023dc:	4413      	add	r3, r2
  4023de:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4023e0:	2d02      	cmp	r5, #2
  4023e2:	d10a      	bne.n	4023fa <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4023e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023e6:	b153      	cbz	r3, 4023fe <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4023e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023ea:	3b01      	subs	r3, #1
  4023ec:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4023ee:	2000      	movs	r0, #0
  4023f0:	e7d5      	b.n	40239e <prvCopyDataToQueue+0x1a>
  4023f2:	2000      	movs	r0, #0
  4023f4:	e7d3      	b.n	40239e <prvCopyDataToQueue+0x1a>
  4023f6:	2000      	movs	r0, #0
  4023f8:	e7d1      	b.n	40239e <prvCopyDataToQueue+0x1a>
  4023fa:	2000      	movs	r0, #0
  4023fc:	e7cf      	b.n	40239e <prvCopyDataToQueue+0x1a>
  4023fe:	2000      	movs	r0, #0
  402400:	e7cd      	b.n	40239e <prvCopyDataToQueue+0x1a>
  402402:	bf00      	nop
  402404:	004036a5 	.word	0x004036a5
  402408:	00404801 	.word	0x00404801

0040240c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40240c:	b530      	push	{r4, r5, lr}
  40240e:	b083      	sub	sp, #12
  402410:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  402412:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402414:	b174      	cbz	r4, 402434 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  402416:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40241a:	429a      	cmp	r2, r3
  40241c:	d315      	bcc.n	40244a <prvNotifyQueueSetContainer+0x3e>
  40241e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402422:	b672      	cpsid	i
  402424:	f383 8811 	msr	BASEPRI, r3
  402428:	f3bf 8f6f 	isb	sy
  40242c:	f3bf 8f4f 	dsb	sy
  402430:	b662      	cpsie	i
  402432:	e7fe      	b.n	402432 <prvNotifyQueueSetContainer+0x26>
  402434:	f04f 0380 	mov.w	r3, #128	; 0x80
  402438:	b672      	cpsid	i
  40243a:	f383 8811 	msr	BASEPRI, r3
  40243e:	f3bf 8f6f 	isb	sy
  402442:	f3bf 8f4f 	dsb	sy
  402446:	b662      	cpsie	i
  402448:	e7fe      	b.n	402448 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40244a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40244c:	4293      	cmp	r3, r2
  40244e:	d803      	bhi.n	402458 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  402450:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402452:	4628      	mov	r0, r5
  402454:	b003      	add	sp, #12
  402456:	bd30      	pop	{r4, r5, pc}
  402458:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40245a:	a901      	add	r1, sp, #4
  40245c:	4620      	mov	r0, r4
  40245e:	4b0b      	ldr	r3, [pc, #44]	; (40248c <prvNotifyQueueSetContainer+0x80>)
  402460:	4798      	blx	r3
  402462:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  402464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402466:	f1b3 3fff 	cmp.w	r3, #4294967295
  40246a:	d10a      	bne.n	402482 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40246c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40246e:	2b00      	cmp	r3, #0
  402470:	d0ef      	beq.n	402452 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  402472:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402476:	4b06      	ldr	r3, [pc, #24]	; (402490 <prvNotifyQueueSetContainer+0x84>)
  402478:	4798      	blx	r3
  40247a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40247c:	bf18      	it	ne
  40247e:	2501      	movne	r5, #1
  402480:	e7e7      	b.n	402452 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  402482:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402484:	3301      	adds	r3, #1
  402486:	64a3      	str	r3, [r4, #72]	; 0x48
  402488:	e7e3      	b.n	402452 <prvNotifyQueueSetContainer+0x46>
  40248a:	bf00      	nop
  40248c:	00402385 	.word	0x00402385
  402490:	00403479 	.word	0x00403479

00402494 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  402494:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402496:	b172      	cbz	r2, 4024b6 <prvCopyDataFromQueue+0x22>
{
  402498:	b510      	push	{r4, lr}
  40249a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40249c:	68c4      	ldr	r4, [r0, #12]
  40249e:	4414      	add	r4, r2
  4024a0:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4024a2:	6840      	ldr	r0, [r0, #4]
  4024a4:	4284      	cmp	r4, r0
  4024a6:	d301      	bcc.n	4024ac <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4024a8:	6818      	ldr	r0, [r3, #0]
  4024aa:	60d8      	str	r0, [r3, #12]
  4024ac:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4024ae:	68d9      	ldr	r1, [r3, #12]
  4024b0:	4b01      	ldr	r3, [pc, #4]	; (4024b8 <prvCopyDataFromQueue+0x24>)
  4024b2:	4798      	blx	r3
  4024b4:	bd10      	pop	{r4, pc}
  4024b6:	4770      	bx	lr
  4024b8:	00404801 	.word	0x00404801

004024bc <prvUnlockQueue>:
{
  4024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4024be:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4024c0:	4b22      	ldr	r3, [pc, #136]	; (40254c <prvUnlockQueue+0x90>)
  4024c2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4024c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024c6:	2b00      	cmp	r3, #0
  4024c8:	dd1b      	ble.n	402502 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4024ca:	4d21      	ldr	r5, [pc, #132]	; (402550 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4024cc:	4f21      	ldr	r7, [pc, #132]	; (402554 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4024ce:	4e22      	ldr	r6, [pc, #136]	; (402558 <prvUnlockQueue+0x9c>)
  4024d0:	e00b      	b.n	4024ea <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4024d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024d4:	b1ab      	cbz	r3, 402502 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4024d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4024da:	47b0      	blx	r6
  4024dc:	b978      	cbnz	r0, 4024fe <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4024de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024e0:	3b01      	subs	r3, #1
  4024e2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4024e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	dd0b      	ble.n	402502 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4024ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4024ec:	2b00      	cmp	r3, #0
  4024ee:	d0f0      	beq.n	4024d2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4024f0:	2100      	movs	r1, #0
  4024f2:	4620      	mov	r0, r4
  4024f4:	47a8      	blx	r5
  4024f6:	2801      	cmp	r0, #1
  4024f8:	d1f1      	bne.n	4024de <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4024fa:	47b8      	blx	r7
  4024fc:	e7ef      	b.n	4024de <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4024fe:	47b8      	blx	r7
  402500:	e7ed      	b.n	4024de <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  402502:	f04f 33ff 	mov.w	r3, #4294967295
  402506:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  402508:	4b14      	ldr	r3, [pc, #80]	; (40255c <prvUnlockQueue+0xa0>)
  40250a:	4798      	blx	r3
	taskENTER_CRITICAL();
  40250c:	4b0f      	ldr	r3, [pc, #60]	; (40254c <prvUnlockQueue+0x90>)
  40250e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402510:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402512:	2b00      	cmp	r3, #0
  402514:	dd14      	ble.n	402540 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402516:	6923      	ldr	r3, [r4, #16]
  402518:	b193      	cbz	r3, 402540 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40251a:	f104 0610 	add.w	r6, r4, #16
  40251e:	4d0e      	ldr	r5, [pc, #56]	; (402558 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402520:	4f0c      	ldr	r7, [pc, #48]	; (402554 <prvUnlockQueue+0x98>)
  402522:	e007      	b.n	402534 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  402524:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402526:	3b01      	subs	r3, #1
  402528:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40252a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40252c:	2b00      	cmp	r3, #0
  40252e:	dd07      	ble.n	402540 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402530:	6923      	ldr	r3, [r4, #16]
  402532:	b12b      	cbz	r3, 402540 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402534:	4630      	mov	r0, r6
  402536:	47a8      	blx	r5
  402538:	2800      	cmp	r0, #0
  40253a:	d0f3      	beq.n	402524 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40253c:	47b8      	blx	r7
  40253e:	e7f1      	b.n	402524 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  402540:	f04f 33ff 	mov.w	r3, #4294967295
  402544:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  402546:	4b05      	ldr	r3, [pc, #20]	; (40255c <prvUnlockQueue+0xa0>)
  402548:	4798      	blx	r3
  40254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40254c:	0040209d 	.word	0x0040209d
  402550:	0040240d 	.word	0x0040240d
  402554:	004035d5 	.word	0x004035d5
  402558:	00403479 	.word	0x00403479
  40255c:	004020e9 	.word	0x004020e9

00402560 <xQueueGenericReset>:
{
  402560:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  402562:	b308      	cbz	r0, 4025a8 <xQueueGenericReset+0x48>
  402564:	4604      	mov	r4, r0
  402566:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402568:	4b1d      	ldr	r3, [pc, #116]	; (4025e0 <xQueueGenericReset+0x80>)
  40256a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40256c:	6822      	ldr	r2, [r4, #0]
  40256e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402572:	fb03 f301 	mul.w	r3, r3, r1
  402576:	18d0      	adds	r0, r2, r3
  402578:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40257a:	2000      	movs	r0, #0
  40257c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40257e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402580:	1a5b      	subs	r3, r3, r1
  402582:	4413      	add	r3, r2
  402584:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  402586:	f04f 33ff 	mov.w	r3, #4294967295
  40258a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40258c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40258e:	b9fd      	cbnz	r5, 4025d0 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402590:	6923      	ldr	r3, [r4, #16]
  402592:	b12b      	cbz	r3, 4025a0 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402594:	f104 0010 	add.w	r0, r4, #16
  402598:	4b12      	ldr	r3, [pc, #72]	; (4025e4 <xQueueGenericReset+0x84>)
  40259a:	4798      	blx	r3
  40259c:	2801      	cmp	r0, #1
  40259e:	d00e      	beq.n	4025be <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4025a0:	4b11      	ldr	r3, [pc, #68]	; (4025e8 <xQueueGenericReset+0x88>)
  4025a2:	4798      	blx	r3
}
  4025a4:	2001      	movs	r0, #1
  4025a6:	bd38      	pop	{r3, r4, r5, pc}
  4025a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ac:	b672      	cpsid	i
  4025ae:	f383 8811 	msr	BASEPRI, r3
  4025b2:	f3bf 8f6f 	isb	sy
  4025b6:	f3bf 8f4f 	dsb	sy
  4025ba:	b662      	cpsie	i
  4025bc:	e7fe      	b.n	4025bc <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4025be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025c2:	4b0a      	ldr	r3, [pc, #40]	; (4025ec <xQueueGenericReset+0x8c>)
  4025c4:	601a      	str	r2, [r3, #0]
  4025c6:	f3bf 8f4f 	dsb	sy
  4025ca:	f3bf 8f6f 	isb	sy
  4025ce:	e7e7      	b.n	4025a0 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4025d0:	f104 0010 	add.w	r0, r4, #16
  4025d4:	4d06      	ldr	r5, [pc, #24]	; (4025f0 <xQueueGenericReset+0x90>)
  4025d6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4025d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4025dc:	47a8      	blx	r5
  4025de:	e7df      	b.n	4025a0 <xQueueGenericReset+0x40>
  4025e0:	0040209d 	.word	0x0040209d
  4025e4:	00403479 	.word	0x00403479
  4025e8:	004020e9 	.word	0x004020e9
  4025ec:	e000ed04 	.word	0xe000ed04
  4025f0:	00401f51 	.word	0x00401f51

004025f4 <xQueueGenericCreate>:
{
  4025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4025f6:	b950      	cbnz	r0, 40260e <xQueueGenericCreate+0x1a>
  4025f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025fc:	b672      	cpsid	i
  4025fe:	f383 8811 	msr	BASEPRI, r3
  402602:	f3bf 8f6f 	isb	sy
  402606:	f3bf 8f4f 	dsb	sy
  40260a:	b662      	cpsie	i
  40260c:	e7fe      	b.n	40260c <xQueueGenericCreate+0x18>
  40260e:	4606      	mov	r6, r0
  402610:	4617      	mov	r7, r2
  402612:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402614:	b189      	cbz	r1, 40263a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402616:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40261a:	3059      	adds	r0, #89	; 0x59
  40261c:	4b12      	ldr	r3, [pc, #72]	; (402668 <xQueueGenericCreate+0x74>)
  40261e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402620:	4604      	mov	r4, r0
  402622:	b9e8      	cbnz	r0, 402660 <xQueueGenericCreate+0x6c>
  402624:	f04f 0380 	mov.w	r3, #128	; 0x80
  402628:	b672      	cpsid	i
  40262a:	f383 8811 	msr	BASEPRI, r3
  40262e:	f3bf 8f6f 	isb	sy
  402632:	f3bf 8f4f 	dsb	sy
  402636:	b662      	cpsie	i
  402638:	e7fe      	b.n	402638 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40263a:	2058      	movs	r0, #88	; 0x58
  40263c:	4b0a      	ldr	r3, [pc, #40]	; (402668 <xQueueGenericCreate+0x74>)
  40263e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402640:	4604      	mov	r4, r0
  402642:	2800      	cmp	r0, #0
  402644:	d0ee      	beq.n	402624 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  402646:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402648:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40264a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40264c:	2101      	movs	r1, #1
  40264e:	4620      	mov	r0, r4
  402650:	4b06      	ldr	r3, [pc, #24]	; (40266c <xQueueGenericCreate+0x78>)
  402652:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  402654:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402658:	2300      	movs	r3, #0
  40265a:	6563      	str	r3, [r4, #84]	; 0x54
}
  40265c:	4620      	mov	r0, r4
  40265e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402660:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402664:	6003      	str	r3, [r0, #0]
  402666:	e7ef      	b.n	402648 <xQueueGenericCreate+0x54>
  402668:	004022f9 	.word	0x004022f9
  40266c:	00402561 	.word	0x00402561

00402670 <xQueueGenericSend>:
{
  402670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402674:	b085      	sub	sp, #20
  402676:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402678:	b1b8      	cbz	r0, 4026aa <xQueueGenericSend+0x3a>
  40267a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40267c:	b301      	cbz	r1, 4026c0 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40267e:	2b02      	cmp	r3, #2
  402680:	d02c      	beq.n	4026dc <xQueueGenericSend+0x6c>
  402682:	461d      	mov	r5, r3
  402684:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402686:	4b66      	ldr	r3, [pc, #408]	; (402820 <xQueueGenericSend+0x1b0>)
  402688:	4798      	blx	r3
  40268a:	2800      	cmp	r0, #0
  40268c:	d134      	bne.n	4026f8 <xQueueGenericSend+0x88>
  40268e:	9b01      	ldr	r3, [sp, #4]
  402690:	2b00      	cmp	r3, #0
  402692:	d038      	beq.n	402706 <xQueueGenericSend+0x96>
  402694:	f04f 0380 	mov.w	r3, #128	; 0x80
  402698:	b672      	cpsid	i
  40269a:	f383 8811 	msr	BASEPRI, r3
  40269e:	f3bf 8f6f 	isb	sy
  4026a2:	f3bf 8f4f 	dsb	sy
  4026a6:	b662      	cpsie	i
  4026a8:	e7fe      	b.n	4026a8 <xQueueGenericSend+0x38>
  4026aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ae:	b672      	cpsid	i
  4026b0:	f383 8811 	msr	BASEPRI, r3
  4026b4:	f3bf 8f6f 	isb	sy
  4026b8:	f3bf 8f4f 	dsb	sy
  4026bc:	b662      	cpsie	i
  4026be:	e7fe      	b.n	4026be <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4026c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4026c2:	2a00      	cmp	r2, #0
  4026c4:	d0db      	beq.n	40267e <xQueueGenericSend+0xe>
  4026c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ca:	b672      	cpsid	i
  4026cc:	f383 8811 	msr	BASEPRI, r3
  4026d0:	f3bf 8f6f 	isb	sy
  4026d4:	f3bf 8f4f 	dsb	sy
  4026d8:	b662      	cpsie	i
  4026da:	e7fe      	b.n	4026da <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4026dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4026de:	2a01      	cmp	r2, #1
  4026e0:	d0cf      	beq.n	402682 <xQueueGenericSend+0x12>
  4026e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026e6:	b672      	cpsid	i
  4026e8:	f383 8811 	msr	BASEPRI, r3
  4026ec:	f3bf 8f6f 	isb	sy
  4026f0:	f3bf 8f4f 	dsb	sy
  4026f4:	b662      	cpsie	i
  4026f6:	e7fe      	b.n	4026f6 <xQueueGenericSend+0x86>
  4026f8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4026fa:	4e4a      	ldr	r6, [pc, #296]	; (402824 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4026fc:	f8df a150 	ldr.w	sl, [pc, #336]	; 402850 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  402700:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402830 <xQueueGenericSend+0x1c0>
  402704:	e042      	b.n	40278c <xQueueGenericSend+0x11c>
  402706:	2700      	movs	r7, #0
  402708:	e7f7      	b.n	4026fa <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40270a:	462a      	mov	r2, r5
  40270c:	4641      	mov	r1, r8
  40270e:	4620      	mov	r0, r4
  402710:	4b45      	ldr	r3, [pc, #276]	; (402828 <xQueueGenericSend+0x1b8>)
  402712:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402714:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402716:	b19b      	cbz	r3, 402740 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402718:	4629      	mov	r1, r5
  40271a:	4620      	mov	r0, r4
  40271c:	4b43      	ldr	r3, [pc, #268]	; (40282c <xQueueGenericSend+0x1bc>)
  40271e:	4798      	blx	r3
  402720:	2801      	cmp	r0, #1
  402722:	d107      	bne.n	402734 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402728:	4b41      	ldr	r3, [pc, #260]	; (402830 <xQueueGenericSend+0x1c0>)
  40272a:	601a      	str	r2, [r3, #0]
  40272c:	f3bf 8f4f 	dsb	sy
  402730:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402734:	4b3f      	ldr	r3, [pc, #252]	; (402834 <xQueueGenericSend+0x1c4>)
  402736:	4798      	blx	r3
				return pdPASS;
  402738:	2001      	movs	r0, #1
}
  40273a:	b005      	add	sp, #20
  40273c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402740:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402742:	b173      	cbz	r3, 402762 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402744:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402748:	4b3b      	ldr	r3, [pc, #236]	; (402838 <xQueueGenericSend+0x1c8>)
  40274a:	4798      	blx	r3
  40274c:	2801      	cmp	r0, #1
  40274e:	d1f1      	bne.n	402734 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  402750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402754:	4b36      	ldr	r3, [pc, #216]	; (402830 <xQueueGenericSend+0x1c0>)
  402756:	601a      	str	r2, [r3, #0]
  402758:	f3bf 8f4f 	dsb	sy
  40275c:	f3bf 8f6f 	isb	sy
  402760:	e7e8      	b.n	402734 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  402762:	2800      	cmp	r0, #0
  402764:	d0e6      	beq.n	402734 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40276a:	4b31      	ldr	r3, [pc, #196]	; (402830 <xQueueGenericSend+0x1c0>)
  40276c:	601a      	str	r2, [r3, #0]
  40276e:	f3bf 8f4f 	dsb	sy
  402772:	f3bf 8f6f 	isb	sy
  402776:	e7dd      	b.n	402734 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402778:	4b2e      	ldr	r3, [pc, #184]	; (402834 <xQueueGenericSend+0x1c4>)
  40277a:	4798      	blx	r3
					return errQUEUE_FULL;
  40277c:	2000      	movs	r0, #0
  40277e:	e7dc      	b.n	40273a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402780:	4620      	mov	r0, r4
  402782:	4b2e      	ldr	r3, [pc, #184]	; (40283c <xQueueGenericSend+0x1cc>)
  402784:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402786:	4b2e      	ldr	r3, [pc, #184]	; (402840 <xQueueGenericSend+0x1d0>)
  402788:	4798      	blx	r3
  40278a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  40278c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40278e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402792:	429a      	cmp	r2, r3
  402794:	d3b9      	bcc.n	40270a <xQueueGenericSend+0x9a>
  402796:	2d02      	cmp	r5, #2
  402798:	d0b7      	beq.n	40270a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40279a:	9b01      	ldr	r3, [sp, #4]
  40279c:	2b00      	cmp	r3, #0
  40279e:	d0eb      	beq.n	402778 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4027a0:	b90f      	cbnz	r7, 4027a6 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4027a2:	a802      	add	r0, sp, #8
  4027a4:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4027a6:	4b23      	ldr	r3, [pc, #140]	; (402834 <xQueueGenericSend+0x1c4>)
  4027a8:	4798      	blx	r3
		vTaskSuspendAll();
  4027aa:	4b26      	ldr	r3, [pc, #152]	; (402844 <xQueueGenericSend+0x1d4>)
  4027ac:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4027ae:	47b0      	blx	r6
  4027b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4027b6:	d101      	bne.n	4027bc <xQueueGenericSend+0x14c>
  4027b8:	2300      	movs	r3, #0
  4027ba:	6463      	str	r3, [r4, #68]	; 0x44
  4027bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4027be:	f1b3 3fff 	cmp.w	r3, #4294967295
  4027c2:	d101      	bne.n	4027c8 <xQueueGenericSend+0x158>
  4027c4:	2300      	movs	r3, #0
  4027c6:	64a3      	str	r3, [r4, #72]	; 0x48
  4027c8:	4b1a      	ldr	r3, [pc, #104]	; (402834 <xQueueGenericSend+0x1c4>)
  4027ca:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4027cc:	a901      	add	r1, sp, #4
  4027ce:	a802      	add	r0, sp, #8
  4027d0:	4b1d      	ldr	r3, [pc, #116]	; (402848 <xQueueGenericSend+0x1d8>)
  4027d2:	4798      	blx	r3
  4027d4:	b9e0      	cbnz	r0, 402810 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4027d6:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4027d8:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4027dc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4027de:	4b15      	ldr	r3, [pc, #84]	; (402834 <xQueueGenericSend+0x1c4>)
  4027e0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4027e2:	45bb      	cmp	fp, r7
  4027e4:	d1cc      	bne.n	402780 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4027e6:	9901      	ldr	r1, [sp, #4]
  4027e8:	f104 0010 	add.w	r0, r4, #16
  4027ec:	4b17      	ldr	r3, [pc, #92]	; (40284c <xQueueGenericSend+0x1dc>)
  4027ee:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4027f0:	4620      	mov	r0, r4
  4027f2:	4b12      	ldr	r3, [pc, #72]	; (40283c <xQueueGenericSend+0x1cc>)
  4027f4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4027f6:	4b12      	ldr	r3, [pc, #72]	; (402840 <xQueueGenericSend+0x1d0>)
  4027f8:	4798      	blx	r3
  4027fa:	2800      	cmp	r0, #0
  4027fc:	d1c5      	bne.n	40278a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4027fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402802:	f8c9 3000 	str.w	r3, [r9]
  402806:	f3bf 8f4f 	dsb	sy
  40280a:	f3bf 8f6f 	isb	sy
  40280e:	e7bc      	b.n	40278a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402810:	4620      	mov	r0, r4
  402812:	4b0a      	ldr	r3, [pc, #40]	; (40283c <xQueueGenericSend+0x1cc>)
  402814:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402816:	4b0a      	ldr	r3, [pc, #40]	; (402840 <xQueueGenericSend+0x1d0>)
  402818:	4798      	blx	r3
			return errQUEUE_FULL;
  40281a:	2000      	movs	r0, #0
  40281c:	e78d      	b.n	40273a <xQueueGenericSend+0xca>
  40281e:	bf00      	nop
  402820:	004035e1 	.word	0x004035e1
  402824:	0040209d 	.word	0x0040209d
  402828:	00402385 	.word	0x00402385
  40282c:	0040240d 	.word	0x0040240d
  402830:	e000ed04 	.word	0xe000ed04
  402834:	004020e9 	.word	0x004020e9
  402838:	00403479 	.word	0x00403479
  40283c:	004024bd 	.word	0x004024bd
  402840:	0040305d 	.word	0x0040305d
  402844:	00402ef5 	.word	0x00402ef5
  402848:	00403541 	.word	0x00403541
  40284c:	00403375 	.word	0x00403375
  402850:	00403511 	.word	0x00403511

00402854 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402854:	2800      	cmp	r0, #0
  402856:	d036      	beq.n	4028c6 <xQueueGenericSendFromISR+0x72>
{
  402858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40285c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40285e:	2900      	cmp	r1, #0
  402860:	d03c      	beq.n	4028dc <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402862:	2b02      	cmp	r3, #2
  402864:	d048      	beq.n	4028f8 <xQueueGenericSendFromISR+0xa4>
  402866:	461e      	mov	r6, r3
  402868:	4615      	mov	r5, r2
  40286a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40286c:	4b35      	ldr	r3, [pc, #212]	; (402944 <xQueueGenericSendFromISR+0xf0>)
  40286e:	4798      	blx	r3
	__asm volatile
  402870:	f3ef 8711 	mrs	r7, BASEPRI
  402874:	f04f 0380 	mov.w	r3, #128	; 0x80
  402878:	b672      	cpsid	i
  40287a:	f383 8811 	msr	BASEPRI, r3
  40287e:	f3bf 8f6f 	isb	sy
  402882:	f3bf 8f4f 	dsb	sy
  402886:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402888:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40288a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40288c:	429a      	cmp	r2, r3
  40288e:	d301      	bcc.n	402894 <xQueueGenericSendFromISR+0x40>
  402890:	2e02      	cmp	r6, #2
  402892:	d14f      	bne.n	402934 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402894:	4632      	mov	r2, r6
  402896:	4641      	mov	r1, r8
  402898:	4620      	mov	r0, r4
  40289a:	4b2b      	ldr	r3, [pc, #172]	; (402948 <xQueueGenericSendFromISR+0xf4>)
  40289c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40289e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4028a4:	d141      	bne.n	40292a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4028a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4028a8:	2b00      	cmp	r3, #0
  4028aa:	d033      	beq.n	402914 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4028ac:	4631      	mov	r1, r6
  4028ae:	4620      	mov	r0, r4
  4028b0:	4b26      	ldr	r3, [pc, #152]	; (40294c <xQueueGenericSendFromISR+0xf8>)
  4028b2:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4028b4:	2d00      	cmp	r5, #0
  4028b6:	d03f      	beq.n	402938 <xQueueGenericSendFromISR+0xe4>
  4028b8:	2801      	cmp	r0, #1
  4028ba:	d13d      	bne.n	402938 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4028bc:	6028      	str	r0, [r5, #0]
	__asm volatile
  4028be:	f387 8811 	msr	BASEPRI, r7
}
  4028c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4028c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028ca:	b672      	cpsid	i
  4028cc:	f383 8811 	msr	BASEPRI, r3
  4028d0:	f3bf 8f6f 	isb	sy
  4028d4:	f3bf 8f4f 	dsb	sy
  4028d8:	b662      	cpsie	i
  4028da:	e7fe      	b.n	4028da <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4028dc:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4028de:	2800      	cmp	r0, #0
  4028e0:	d0bf      	beq.n	402862 <xQueueGenericSendFromISR+0xe>
  4028e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028e6:	b672      	cpsid	i
  4028e8:	f383 8811 	msr	BASEPRI, r3
  4028ec:	f3bf 8f6f 	isb	sy
  4028f0:	f3bf 8f4f 	dsb	sy
  4028f4:	b662      	cpsie	i
  4028f6:	e7fe      	b.n	4028f6 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4028f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4028fa:	2801      	cmp	r0, #1
  4028fc:	d0b3      	beq.n	402866 <xQueueGenericSendFromISR+0x12>
  4028fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402902:	b672      	cpsid	i
  402904:	f383 8811 	msr	BASEPRI, r3
  402908:	f3bf 8f6f 	isb	sy
  40290c:	f3bf 8f4f 	dsb	sy
  402910:	b662      	cpsie	i
  402912:	e7fe      	b.n	402912 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402914:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402916:	b18b      	cbz	r3, 40293c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402918:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40291c:	4b0c      	ldr	r3, [pc, #48]	; (402950 <xQueueGenericSendFromISR+0xfc>)
  40291e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402920:	b175      	cbz	r5, 402940 <xQueueGenericSendFromISR+0xec>
  402922:	b168      	cbz	r0, 402940 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402924:	2001      	movs	r0, #1
  402926:	6028      	str	r0, [r5, #0]
  402928:	e7c9      	b.n	4028be <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40292a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40292c:	3301      	adds	r3, #1
  40292e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402930:	2001      	movs	r0, #1
  402932:	e7c4      	b.n	4028be <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402934:	2000      	movs	r0, #0
  402936:	e7c2      	b.n	4028be <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402938:	2001      	movs	r0, #1
  40293a:	e7c0      	b.n	4028be <xQueueGenericSendFromISR+0x6a>
  40293c:	2001      	movs	r0, #1
  40293e:	e7be      	b.n	4028be <xQueueGenericSendFromISR+0x6a>
  402940:	2001      	movs	r0, #1
  402942:	e7bc      	b.n	4028be <xQueueGenericSendFromISR+0x6a>
  402944:	00402295 	.word	0x00402295
  402948:	00402385 	.word	0x00402385
  40294c:	0040240d 	.word	0x0040240d
  402950:	00403479 	.word	0x00403479

00402954 <xQueueGenericReceive>:
{
  402954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402958:	b084      	sub	sp, #16
  40295a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40295c:	b198      	cbz	r0, 402986 <xQueueGenericReceive+0x32>
  40295e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402960:	b1e1      	cbz	r1, 40299c <xQueueGenericReceive+0x48>
  402962:	4698      	mov	r8, r3
  402964:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402966:	4b61      	ldr	r3, [pc, #388]	; (402aec <xQueueGenericReceive+0x198>)
  402968:	4798      	blx	r3
  40296a:	bb28      	cbnz	r0, 4029b8 <xQueueGenericReceive+0x64>
  40296c:	9b01      	ldr	r3, [sp, #4]
  40296e:	b353      	cbz	r3, 4029c6 <xQueueGenericReceive+0x72>
  402970:	f04f 0380 	mov.w	r3, #128	; 0x80
  402974:	b672      	cpsid	i
  402976:	f383 8811 	msr	BASEPRI, r3
  40297a:	f3bf 8f6f 	isb	sy
  40297e:	f3bf 8f4f 	dsb	sy
  402982:	b662      	cpsie	i
  402984:	e7fe      	b.n	402984 <xQueueGenericReceive+0x30>
  402986:	f04f 0380 	mov.w	r3, #128	; 0x80
  40298a:	b672      	cpsid	i
  40298c:	f383 8811 	msr	BASEPRI, r3
  402990:	f3bf 8f6f 	isb	sy
  402994:	f3bf 8f4f 	dsb	sy
  402998:	b662      	cpsie	i
  40299a:	e7fe      	b.n	40299a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40299c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40299e:	2a00      	cmp	r2, #0
  4029a0:	d0df      	beq.n	402962 <xQueueGenericReceive+0xe>
  4029a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029a6:	b672      	cpsid	i
  4029a8:	f383 8811 	msr	BASEPRI, r3
  4029ac:	f3bf 8f6f 	isb	sy
  4029b0:	f3bf 8f4f 	dsb	sy
  4029b4:	b662      	cpsie	i
  4029b6:	e7fe      	b.n	4029b6 <xQueueGenericReceive+0x62>
  4029b8:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4029ba:	4d4d      	ldr	r5, [pc, #308]	; (402af0 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  4029bc:	f8df a160 	ldr.w	sl, [pc, #352]	; 402b20 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  4029c0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402b00 <xQueueGenericReceive+0x1ac>
  4029c4:	e04b      	b.n	402a5e <xQueueGenericReceive+0x10a>
  4029c6:	2600      	movs	r6, #0
  4029c8:	e7f7      	b.n	4029ba <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4029ca:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4029cc:	4639      	mov	r1, r7
  4029ce:	4620      	mov	r0, r4
  4029d0:	4b48      	ldr	r3, [pc, #288]	; (402af4 <xQueueGenericReceive+0x1a0>)
  4029d2:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4029d4:	f1b8 0f00 	cmp.w	r8, #0
  4029d8:	d11d      	bne.n	402a16 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4029da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4029dc:	3b01      	subs	r3, #1
  4029de:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4029e0:	6823      	ldr	r3, [r4, #0]
  4029e2:	b913      	cbnz	r3, 4029ea <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4029e4:	4b44      	ldr	r3, [pc, #272]	; (402af8 <xQueueGenericReceive+0x1a4>)
  4029e6:	4798      	blx	r3
  4029e8:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4029ea:	6923      	ldr	r3, [r4, #16]
  4029ec:	b16b      	cbz	r3, 402a0a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4029ee:	f104 0010 	add.w	r0, r4, #16
  4029f2:	4b42      	ldr	r3, [pc, #264]	; (402afc <xQueueGenericReceive+0x1a8>)
  4029f4:	4798      	blx	r3
  4029f6:	2801      	cmp	r0, #1
  4029f8:	d107      	bne.n	402a0a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4029fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029fe:	4b40      	ldr	r3, [pc, #256]	; (402b00 <xQueueGenericReceive+0x1ac>)
  402a00:	601a      	str	r2, [r3, #0]
  402a02:	f3bf 8f4f 	dsb	sy
  402a06:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402a0a:	4b3e      	ldr	r3, [pc, #248]	; (402b04 <xQueueGenericReceive+0x1b0>)
  402a0c:	4798      	blx	r3
				return pdPASS;
  402a0e:	2001      	movs	r0, #1
}
  402a10:	b004      	add	sp, #16
  402a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402a16:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a1a:	2b00      	cmp	r3, #0
  402a1c:	d0f5      	beq.n	402a0a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402a1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a22:	4b36      	ldr	r3, [pc, #216]	; (402afc <xQueueGenericReceive+0x1a8>)
  402a24:	4798      	blx	r3
  402a26:	2800      	cmp	r0, #0
  402a28:	d0ef      	beq.n	402a0a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a2e:	4b34      	ldr	r3, [pc, #208]	; (402b00 <xQueueGenericReceive+0x1ac>)
  402a30:	601a      	str	r2, [r3, #0]
  402a32:	f3bf 8f4f 	dsb	sy
  402a36:	f3bf 8f6f 	isb	sy
  402a3a:	e7e6      	b.n	402a0a <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402a3c:	4b31      	ldr	r3, [pc, #196]	; (402b04 <xQueueGenericReceive+0x1b0>)
  402a3e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402a40:	2000      	movs	r0, #0
  402a42:	e7e5      	b.n	402a10 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402a44:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402a46:	6860      	ldr	r0, [r4, #4]
  402a48:	4b2f      	ldr	r3, [pc, #188]	; (402b08 <xQueueGenericReceive+0x1b4>)
  402a4a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402a4c:	4b2d      	ldr	r3, [pc, #180]	; (402b04 <xQueueGenericReceive+0x1b0>)
  402a4e:	4798      	blx	r3
  402a50:	e030      	b.n	402ab4 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402a52:	4620      	mov	r0, r4
  402a54:	4b2d      	ldr	r3, [pc, #180]	; (402b0c <xQueueGenericReceive+0x1b8>)
  402a56:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402a58:	4b2d      	ldr	r3, [pc, #180]	; (402b10 <xQueueGenericReceive+0x1bc>)
  402a5a:	4798      	blx	r3
  402a5c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402a5e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402a60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402a62:	2b00      	cmp	r3, #0
  402a64:	d1b1      	bne.n	4029ca <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402a66:	9b01      	ldr	r3, [sp, #4]
  402a68:	2b00      	cmp	r3, #0
  402a6a:	d0e7      	beq.n	402a3c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402a6c:	b90e      	cbnz	r6, 402a72 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402a6e:	a802      	add	r0, sp, #8
  402a70:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402a72:	4b24      	ldr	r3, [pc, #144]	; (402b04 <xQueueGenericReceive+0x1b0>)
  402a74:	4798      	blx	r3
		vTaskSuspendAll();
  402a76:	4b27      	ldr	r3, [pc, #156]	; (402b14 <xQueueGenericReceive+0x1c0>)
  402a78:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402a7a:	47a8      	blx	r5
  402a7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a82:	d101      	bne.n	402a88 <xQueueGenericReceive+0x134>
  402a84:	2300      	movs	r3, #0
  402a86:	6463      	str	r3, [r4, #68]	; 0x44
  402a88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a8e:	d101      	bne.n	402a94 <xQueueGenericReceive+0x140>
  402a90:	2300      	movs	r3, #0
  402a92:	64a3      	str	r3, [r4, #72]	; 0x48
  402a94:	4b1b      	ldr	r3, [pc, #108]	; (402b04 <xQueueGenericReceive+0x1b0>)
  402a96:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402a98:	a901      	add	r1, sp, #4
  402a9a:	a802      	add	r0, sp, #8
  402a9c:	4b1e      	ldr	r3, [pc, #120]	; (402b18 <xQueueGenericReceive+0x1c4>)
  402a9e:	4798      	blx	r3
  402aa0:	b9e8      	cbnz	r0, 402ade <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402aa2:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402aa4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402aa6:	4b17      	ldr	r3, [pc, #92]	; (402b04 <xQueueGenericReceive+0x1b0>)
  402aa8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402aaa:	2e00      	cmp	r6, #0
  402aac:	d1d1      	bne.n	402a52 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402aae:	6823      	ldr	r3, [r4, #0]
  402ab0:	2b00      	cmp	r3, #0
  402ab2:	d0c7      	beq.n	402a44 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402ab4:	9901      	ldr	r1, [sp, #4]
  402ab6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402aba:	4b18      	ldr	r3, [pc, #96]	; (402b1c <xQueueGenericReceive+0x1c8>)
  402abc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402abe:	4620      	mov	r0, r4
  402ac0:	4b12      	ldr	r3, [pc, #72]	; (402b0c <xQueueGenericReceive+0x1b8>)
  402ac2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402ac4:	4b12      	ldr	r3, [pc, #72]	; (402b10 <xQueueGenericReceive+0x1bc>)
  402ac6:	4798      	blx	r3
  402ac8:	2800      	cmp	r0, #0
  402aca:	d1c7      	bne.n	402a5c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402acc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402ad0:	f8c9 3000 	str.w	r3, [r9]
  402ad4:	f3bf 8f4f 	dsb	sy
  402ad8:	f3bf 8f6f 	isb	sy
  402adc:	e7be      	b.n	402a5c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402ade:	4620      	mov	r0, r4
  402ae0:	4b0a      	ldr	r3, [pc, #40]	; (402b0c <xQueueGenericReceive+0x1b8>)
  402ae2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402ae4:	4b0a      	ldr	r3, [pc, #40]	; (402b10 <xQueueGenericReceive+0x1bc>)
  402ae6:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402ae8:	2000      	movs	r0, #0
  402aea:	e791      	b.n	402a10 <xQueueGenericReceive+0xbc>
  402aec:	004035e1 	.word	0x004035e1
  402af0:	0040209d 	.word	0x0040209d
  402af4:	00402495 	.word	0x00402495
  402af8:	00403761 	.word	0x00403761
  402afc:	00403479 	.word	0x00403479
  402b00:	e000ed04 	.word	0xe000ed04
  402b04:	004020e9 	.word	0x004020e9
  402b08:	00403601 	.word	0x00403601
  402b0c:	004024bd 	.word	0x004024bd
  402b10:	0040305d 	.word	0x0040305d
  402b14:	00402ef5 	.word	0x00402ef5
  402b18:	00403541 	.word	0x00403541
  402b1c:	00403375 	.word	0x00403375
  402b20:	00403511 	.word	0x00403511

00402b24 <vQueueAddToRegistry>:
	{
  402b24:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402b26:	4b0b      	ldr	r3, [pc, #44]	; (402b54 <vQueueAddToRegistry+0x30>)
  402b28:	681b      	ldr	r3, [r3, #0]
  402b2a:	b153      	cbz	r3, 402b42 <vQueueAddToRegistry+0x1e>
  402b2c:	2301      	movs	r3, #1
  402b2e:	4c09      	ldr	r4, [pc, #36]	; (402b54 <vQueueAddToRegistry+0x30>)
  402b30:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402b34:	b132      	cbz	r2, 402b44 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402b36:	3301      	adds	r3, #1
  402b38:	2b08      	cmp	r3, #8
  402b3a:	d1f9      	bne.n	402b30 <vQueueAddToRegistry+0xc>
	}
  402b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402b40:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402b42:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402b44:	4a03      	ldr	r2, [pc, #12]	; (402b54 <vQueueAddToRegistry+0x30>)
  402b46:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402b4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402b4e:	6058      	str	r0, [r3, #4]
				break;
  402b50:	e7f4      	b.n	402b3c <vQueueAddToRegistry+0x18>
  402b52:	bf00      	nop
  402b54:	2040c81c 	.word	0x2040c81c

00402b58 <vQueueWaitForMessageRestricted>:
	{
  402b58:	b570      	push	{r4, r5, r6, lr}
  402b5a:	4604      	mov	r4, r0
  402b5c:	460d      	mov	r5, r1
  402b5e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402b60:	4b0f      	ldr	r3, [pc, #60]	; (402ba0 <vQueueWaitForMessageRestricted+0x48>)
  402b62:	4798      	blx	r3
  402b64:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402b66:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b6a:	d00b      	beq.n	402b84 <vQueueWaitForMessageRestricted+0x2c>
  402b6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b72:	d00a      	beq.n	402b8a <vQueueWaitForMessageRestricted+0x32>
  402b74:	4b0b      	ldr	r3, [pc, #44]	; (402ba4 <vQueueWaitForMessageRestricted+0x4c>)
  402b76:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402b7a:	b14b      	cbz	r3, 402b90 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402b7c:	4620      	mov	r0, r4
  402b7e:	4b0a      	ldr	r3, [pc, #40]	; (402ba8 <vQueueWaitForMessageRestricted+0x50>)
  402b80:	4798      	blx	r3
  402b82:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402b84:	2300      	movs	r3, #0
  402b86:	6463      	str	r3, [r4, #68]	; 0x44
  402b88:	e7f0      	b.n	402b6c <vQueueWaitForMessageRestricted+0x14>
  402b8a:	2300      	movs	r3, #0
  402b8c:	64a3      	str	r3, [r4, #72]	; 0x48
  402b8e:	e7f1      	b.n	402b74 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402b90:	4632      	mov	r2, r6
  402b92:	4629      	mov	r1, r5
  402b94:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402b98:	4b04      	ldr	r3, [pc, #16]	; (402bac <vQueueWaitForMessageRestricted+0x54>)
  402b9a:	4798      	blx	r3
  402b9c:	e7ee      	b.n	402b7c <vQueueWaitForMessageRestricted+0x24>
  402b9e:	bf00      	nop
  402ba0:	0040209d 	.word	0x0040209d
  402ba4:	004020e9 	.word	0x004020e9
  402ba8:	004024bd 	.word	0x004024bd
  402bac:	004033f9 	.word	0x004033f9

00402bb0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402bb0:	4b08      	ldr	r3, [pc, #32]	; (402bd4 <prvResetNextTaskUnblockTime+0x24>)
  402bb2:	681b      	ldr	r3, [r3, #0]
  402bb4:	681b      	ldr	r3, [r3, #0]
  402bb6:	b13b      	cbz	r3, 402bc8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402bb8:	4b06      	ldr	r3, [pc, #24]	; (402bd4 <prvResetNextTaskUnblockTime+0x24>)
  402bba:	681b      	ldr	r3, [r3, #0]
  402bbc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402bbe:	68db      	ldr	r3, [r3, #12]
  402bc0:	685a      	ldr	r2, [r3, #4]
  402bc2:	4b05      	ldr	r3, [pc, #20]	; (402bd8 <prvResetNextTaskUnblockTime+0x28>)
  402bc4:	601a      	str	r2, [r3, #0]
  402bc6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402bc8:	f04f 32ff 	mov.w	r2, #4294967295
  402bcc:	4b02      	ldr	r3, [pc, #8]	; (402bd8 <prvResetNextTaskUnblockTime+0x28>)
  402bce:	601a      	str	r2, [r3, #0]
  402bd0:	4770      	bx	lr
  402bd2:	bf00      	nop
  402bd4:	2040c628 	.word	0x2040c628
  402bd8:	2040c6d4 	.word	0x2040c6d4

00402bdc <prvAddCurrentTaskToDelayedList>:
{
  402bdc:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402bde:	4b0f      	ldr	r3, [pc, #60]	; (402c1c <prvAddCurrentTaskToDelayedList+0x40>)
  402be0:	681b      	ldr	r3, [r3, #0]
  402be2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402be4:	4b0e      	ldr	r3, [pc, #56]	; (402c20 <prvAddCurrentTaskToDelayedList+0x44>)
  402be6:	681b      	ldr	r3, [r3, #0]
  402be8:	4298      	cmp	r0, r3
  402bea:	d30e      	bcc.n	402c0a <prvAddCurrentTaskToDelayedList+0x2e>
  402bec:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402bee:	4b0d      	ldr	r3, [pc, #52]	; (402c24 <prvAddCurrentTaskToDelayedList+0x48>)
  402bf0:	6818      	ldr	r0, [r3, #0]
  402bf2:	4b0a      	ldr	r3, [pc, #40]	; (402c1c <prvAddCurrentTaskToDelayedList+0x40>)
  402bf4:	6819      	ldr	r1, [r3, #0]
  402bf6:	3104      	adds	r1, #4
  402bf8:	4b0b      	ldr	r3, [pc, #44]	; (402c28 <prvAddCurrentTaskToDelayedList+0x4c>)
  402bfa:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402bfc:	4b0b      	ldr	r3, [pc, #44]	; (402c2c <prvAddCurrentTaskToDelayedList+0x50>)
  402bfe:	681b      	ldr	r3, [r3, #0]
  402c00:	429c      	cmp	r4, r3
  402c02:	d201      	bcs.n	402c08 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402c04:	4b09      	ldr	r3, [pc, #36]	; (402c2c <prvAddCurrentTaskToDelayedList+0x50>)
  402c06:	601c      	str	r4, [r3, #0]
  402c08:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402c0a:	4b09      	ldr	r3, [pc, #36]	; (402c30 <prvAddCurrentTaskToDelayedList+0x54>)
  402c0c:	6818      	ldr	r0, [r3, #0]
  402c0e:	4b03      	ldr	r3, [pc, #12]	; (402c1c <prvAddCurrentTaskToDelayedList+0x40>)
  402c10:	6819      	ldr	r1, [r3, #0]
  402c12:	3104      	adds	r1, #4
  402c14:	4b04      	ldr	r3, [pc, #16]	; (402c28 <prvAddCurrentTaskToDelayedList+0x4c>)
  402c16:	4798      	blx	r3
  402c18:	bd10      	pop	{r4, pc}
  402c1a:	bf00      	nop
  402c1c:	2040c624 	.word	0x2040c624
  402c20:	2040c71c 	.word	0x2040c71c
  402c24:	2040c628 	.word	0x2040c628
  402c28:	00401f85 	.word	0x00401f85
  402c2c:	2040c6d4 	.word	0x2040c6d4
  402c30:	2040c62c 	.word	0x2040c62c

00402c34 <xTaskGenericCreate>:
{
  402c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c38:	b083      	sub	sp, #12
  402c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402c3c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402c40:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402c42:	b160      	cbz	r0, 402c5e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402c44:	2d04      	cmp	r5, #4
  402c46:	d915      	bls.n	402c74 <xTaskGenericCreate+0x40>
  402c48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c4c:	b672      	cpsid	i
  402c4e:	f383 8811 	msr	BASEPRI, r3
  402c52:	f3bf 8f6f 	isb	sy
  402c56:	f3bf 8f4f 	dsb	sy
  402c5a:	b662      	cpsie	i
  402c5c:	e7fe      	b.n	402c5c <xTaskGenericCreate+0x28>
  402c5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c62:	b672      	cpsid	i
  402c64:	f383 8811 	msr	BASEPRI, r3
  402c68:	f3bf 8f6f 	isb	sy
  402c6c:	f3bf 8f4f 	dsb	sy
  402c70:	b662      	cpsie	i
  402c72:	e7fe      	b.n	402c72 <xTaskGenericCreate+0x3e>
  402c74:	9001      	str	r0, [sp, #4]
  402c76:	4698      	mov	r8, r3
  402c78:	4691      	mov	r9, r2
  402c7a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402c7c:	b936      	cbnz	r6, 402c8c <xTaskGenericCreate+0x58>
  402c7e:	0090      	lsls	r0, r2, #2
  402c80:	4b62      	ldr	r3, [pc, #392]	; (402e0c <xTaskGenericCreate+0x1d8>)
  402c82:	4798      	blx	r3
		if( pxStack != NULL )
  402c84:	4606      	mov	r6, r0
  402c86:	2800      	cmp	r0, #0
  402c88:	f000 809e 	beq.w	402dc8 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402c8c:	2058      	movs	r0, #88	; 0x58
  402c8e:	4b5f      	ldr	r3, [pc, #380]	; (402e0c <xTaskGenericCreate+0x1d8>)
  402c90:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402c92:	4604      	mov	r4, r0
  402c94:	2800      	cmp	r0, #0
  402c96:	f000 8094 	beq.w	402dc2 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402c9a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402c9c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402ca0:	21a5      	movs	r1, #165	; 0xa5
  402ca2:	4630      	mov	r0, r6
  402ca4:	4b5a      	ldr	r3, [pc, #360]	; (402e10 <xTaskGenericCreate+0x1dc>)
  402ca6:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402ca8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402cac:	444e      	add	r6, r9
  402cae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402cb0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402cb4:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402cb8:	783b      	ldrb	r3, [r7, #0]
  402cba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402cbe:	783b      	ldrb	r3, [r7, #0]
  402cc0:	2b00      	cmp	r3, #0
  402cc2:	f040 8084 	bne.w	402dce <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402cc6:	2700      	movs	r7, #0
  402cc8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402ccc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402cce:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402cd0:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402cd2:	f104 0904 	add.w	r9, r4, #4
  402cd6:	4648      	mov	r0, r9
  402cd8:	f8df b184 	ldr.w	fp, [pc, #388]	; 402e60 <xTaskGenericCreate+0x22c>
  402cdc:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402cde:	f104 0018 	add.w	r0, r4, #24
  402ce2:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402ce4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402ce6:	f1c5 0305 	rsb	r3, r5, #5
  402cea:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402cec:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402cee:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402cf0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402cf4:	4642      	mov	r2, r8
  402cf6:	9901      	ldr	r1, [sp, #4]
  402cf8:	4630      	mov	r0, r6
  402cfa:	4b46      	ldr	r3, [pc, #280]	; (402e14 <xTaskGenericCreate+0x1e0>)
  402cfc:	4798      	blx	r3
  402cfe:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402d00:	f1ba 0f00 	cmp.w	sl, #0
  402d04:	d001      	beq.n	402d0a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402d06:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402d0a:	4b43      	ldr	r3, [pc, #268]	; (402e18 <xTaskGenericCreate+0x1e4>)
  402d0c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402d0e:	4a43      	ldr	r2, [pc, #268]	; (402e1c <xTaskGenericCreate+0x1e8>)
  402d10:	6813      	ldr	r3, [r2, #0]
  402d12:	3301      	adds	r3, #1
  402d14:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402d16:	4b42      	ldr	r3, [pc, #264]	; (402e20 <xTaskGenericCreate+0x1ec>)
  402d18:	681b      	ldr	r3, [r3, #0]
  402d1a:	2b00      	cmp	r3, #0
  402d1c:	d166      	bne.n	402dec <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402d1e:	4b40      	ldr	r3, [pc, #256]	; (402e20 <xTaskGenericCreate+0x1ec>)
  402d20:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402d22:	6813      	ldr	r3, [r2, #0]
  402d24:	2b01      	cmp	r3, #1
  402d26:	d121      	bne.n	402d6c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402d28:	4f3e      	ldr	r7, [pc, #248]	; (402e24 <xTaskGenericCreate+0x1f0>)
  402d2a:	4638      	mov	r0, r7
  402d2c:	4e3e      	ldr	r6, [pc, #248]	; (402e28 <xTaskGenericCreate+0x1f4>)
  402d2e:	47b0      	blx	r6
  402d30:	f107 0014 	add.w	r0, r7, #20
  402d34:	47b0      	blx	r6
  402d36:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402d3a:	47b0      	blx	r6
  402d3c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402d40:	47b0      	blx	r6
  402d42:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402d46:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402d48:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402e64 <xTaskGenericCreate+0x230>
  402d4c:	4640      	mov	r0, r8
  402d4e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402d50:	4f36      	ldr	r7, [pc, #216]	; (402e2c <xTaskGenericCreate+0x1f8>)
  402d52:	4638      	mov	r0, r7
  402d54:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402d56:	4836      	ldr	r0, [pc, #216]	; (402e30 <xTaskGenericCreate+0x1fc>)
  402d58:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402d5a:	4836      	ldr	r0, [pc, #216]	; (402e34 <xTaskGenericCreate+0x200>)
  402d5c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402d5e:	4836      	ldr	r0, [pc, #216]	; (402e38 <xTaskGenericCreate+0x204>)
  402d60:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402d62:	4b36      	ldr	r3, [pc, #216]	; (402e3c <xTaskGenericCreate+0x208>)
  402d64:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402d68:	4b35      	ldr	r3, [pc, #212]	; (402e40 <xTaskGenericCreate+0x20c>)
  402d6a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402d6c:	4a35      	ldr	r2, [pc, #212]	; (402e44 <xTaskGenericCreate+0x210>)
  402d6e:	6813      	ldr	r3, [r2, #0]
  402d70:	3301      	adds	r3, #1
  402d72:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402d74:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402d76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402d78:	4a33      	ldr	r2, [pc, #204]	; (402e48 <xTaskGenericCreate+0x214>)
  402d7a:	6811      	ldr	r1, [r2, #0]
  402d7c:	2301      	movs	r3, #1
  402d7e:	4083      	lsls	r3, r0
  402d80:	430b      	orrs	r3, r1
  402d82:	6013      	str	r3, [r2, #0]
  402d84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402d88:	4649      	mov	r1, r9
  402d8a:	4b26      	ldr	r3, [pc, #152]	; (402e24 <xTaskGenericCreate+0x1f0>)
  402d8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402d90:	4b2e      	ldr	r3, [pc, #184]	; (402e4c <xTaskGenericCreate+0x218>)
  402d92:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402d94:	4b2e      	ldr	r3, [pc, #184]	; (402e50 <xTaskGenericCreate+0x21c>)
  402d96:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402d98:	4b2e      	ldr	r3, [pc, #184]	; (402e54 <xTaskGenericCreate+0x220>)
  402d9a:	681b      	ldr	r3, [r3, #0]
  402d9c:	2b00      	cmp	r3, #0
  402d9e:	d031      	beq.n	402e04 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402da0:	4b1f      	ldr	r3, [pc, #124]	; (402e20 <xTaskGenericCreate+0x1ec>)
  402da2:	681b      	ldr	r3, [r3, #0]
  402da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402da6:	429d      	cmp	r5, r3
  402da8:	d92e      	bls.n	402e08 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402dae:	4b2a      	ldr	r3, [pc, #168]	; (402e58 <xTaskGenericCreate+0x224>)
  402db0:	601a      	str	r2, [r3, #0]
  402db2:	f3bf 8f4f 	dsb	sy
  402db6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402dba:	2001      	movs	r0, #1
}
  402dbc:	b003      	add	sp, #12
  402dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402dc2:	4630      	mov	r0, r6
  402dc4:	4b25      	ldr	r3, [pc, #148]	; (402e5c <xTaskGenericCreate+0x228>)
  402dc6:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402dc8:	f04f 30ff 	mov.w	r0, #4294967295
  402dcc:	e7f6      	b.n	402dbc <xTaskGenericCreate+0x188>
  402dce:	463b      	mov	r3, r7
  402dd0:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402dd4:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402dd6:	7859      	ldrb	r1, [r3, #1]
  402dd8:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402ddc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402de0:	2900      	cmp	r1, #0
  402de2:	f43f af70 	beq.w	402cc6 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402de6:	42bb      	cmp	r3, r7
  402de8:	d1f5      	bne.n	402dd6 <xTaskGenericCreate+0x1a2>
  402dea:	e76c      	b.n	402cc6 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402dec:	4b19      	ldr	r3, [pc, #100]	; (402e54 <xTaskGenericCreate+0x220>)
  402dee:	681b      	ldr	r3, [r3, #0]
  402df0:	2b00      	cmp	r3, #0
  402df2:	d1bb      	bne.n	402d6c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402df4:	4b0a      	ldr	r3, [pc, #40]	; (402e20 <xTaskGenericCreate+0x1ec>)
  402df6:	681b      	ldr	r3, [r3, #0]
  402df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402dfa:	429d      	cmp	r5, r3
  402dfc:	d3b6      	bcc.n	402d6c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402dfe:	4b08      	ldr	r3, [pc, #32]	; (402e20 <xTaskGenericCreate+0x1ec>)
  402e00:	601c      	str	r4, [r3, #0]
  402e02:	e7b3      	b.n	402d6c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402e04:	2001      	movs	r0, #1
  402e06:	e7d9      	b.n	402dbc <xTaskGenericCreate+0x188>
  402e08:	2001      	movs	r0, #1
	return xReturn;
  402e0a:	e7d7      	b.n	402dbc <xTaskGenericCreate+0x188>
  402e0c:	004022f9 	.word	0x004022f9
  402e10:	00404935 	.word	0x00404935
  402e14:	00402051 	.word	0x00402051
  402e18:	0040209d 	.word	0x0040209d
  402e1c:	2040c694 	.word	0x2040c694
  402e20:	2040c624 	.word	0x2040c624
  402e24:	2040c630 	.word	0x2040c630
  402e28:	00401f51 	.word	0x00401f51
  402e2c:	2040c6c0 	.word	0x2040c6c0
  402e30:	2040c6dc 	.word	0x2040c6dc
  402e34:	2040c708 	.word	0x2040c708
  402e38:	2040c6f4 	.word	0x2040c6f4
  402e3c:	2040c628 	.word	0x2040c628
  402e40:	2040c62c 	.word	0x2040c62c
  402e44:	2040c6a0 	.word	0x2040c6a0
  402e48:	2040c6a8 	.word	0x2040c6a8
  402e4c:	00401f6d 	.word	0x00401f6d
  402e50:	004020e9 	.word	0x004020e9
  402e54:	2040c6f0 	.word	0x2040c6f0
  402e58:	e000ed04 	.word	0xe000ed04
  402e5c:	00402369 	.word	0x00402369
  402e60:	00401f67 	.word	0x00401f67
  402e64:	2040c6ac 	.word	0x2040c6ac

00402e68 <vTaskStartScheduler>:
{
  402e68:	b510      	push	{r4, lr}
  402e6a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402e6c:	2300      	movs	r3, #0
  402e6e:	9303      	str	r3, [sp, #12]
  402e70:	9302      	str	r3, [sp, #8]
  402e72:	9301      	str	r3, [sp, #4]
  402e74:	9300      	str	r3, [sp, #0]
  402e76:	2282      	movs	r2, #130	; 0x82
  402e78:	4916      	ldr	r1, [pc, #88]	; (402ed4 <vTaskStartScheduler+0x6c>)
  402e7a:	4817      	ldr	r0, [pc, #92]	; (402ed8 <vTaskStartScheduler+0x70>)
  402e7c:	4c17      	ldr	r4, [pc, #92]	; (402edc <vTaskStartScheduler+0x74>)
  402e7e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402e80:	2801      	cmp	r0, #1
  402e82:	d00b      	beq.n	402e9c <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402e84:	bb20      	cbnz	r0, 402ed0 <vTaskStartScheduler+0x68>
  402e86:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e8a:	b672      	cpsid	i
  402e8c:	f383 8811 	msr	BASEPRI, r3
  402e90:	f3bf 8f6f 	isb	sy
  402e94:	f3bf 8f4f 	dsb	sy
  402e98:	b662      	cpsie	i
  402e9a:	e7fe      	b.n	402e9a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402e9c:	4b10      	ldr	r3, [pc, #64]	; (402ee0 <vTaskStartScheduler+0x78>)
  402e9e:	4798      	blx	r3
	if( xReturn == pdPASS )
  402ea0:	2801      	cmp	r0, #1
  402ea2:	d1ef      	bne.n	402e84 <vTaskStartScheduler+0x1c>
  402ea4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ea8:	b672      	cpsid	i
  402eaa:	f383 8811 	msr	BASEPRI, r3
  402eae:	f3bf 8f6f 	isb	sy
  402eb2:	f3bf 8f4f 	dsb	sy
  402eb6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402eb8:	f04f 32ff 	mov.w	r2, #4294967295
  402ebc:	4b09      	ldr	r3, [pc, #36]	; (402ee4 <vTaskStartScheduler+0x7c>)
  402ebe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402ec0:	2201      	movs	r2, #1
  402ec2:	4b09      	ldr	r3, [pc, #36]	; (402ee8 <vTaskStartScheduler+0x80>)
  402ec4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402ec6:	2200      	movs	r2, #0
  402ec8:	4b08      	ldr	r3, [pc, #32]	; (402eec <vTaskStartScheduler+0x84>)
  402eca:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402ecc:	4b08      	ldr	r3, [pc, #32]	; (402ef0 <vTaskStartScheduler+0x88>)
  402ece:	4798      	blx	r3
}
  402ed0:	b004      	add	sp, #16
  402ed2:	bd10      	pop	{r4, pc}
  402ed4:	004071f8 	.word	0x004071f8
  402ed8:	0040320d 	.word	0x0040320d
  402edc:	00402c35 	.word	0x00402c35
  402ee0:	0040384d 	.word	0x0040384d
  402ee4:	2040c6d4 	.word	0x2040c6d4
  402ee8:	2040c6f0 	.word	0x2040c6f0
  402eec:	2040c71c 	.word	0x2040c71c
  402ef0:	004021d1 	.word	0x004021d1

00402ef4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402ef4:	4a02      	ldr	r2, [pc, #8]	; (402f00 <vTaskSuspendAll+0xc>)
  402ef6:	6813      	ldr	r3, [r2, #0]
  402ef8:	3301      	adds	r3, #1
  402efa:	6013      	str	r3, [r2, #0]
  402efc:	4770      	bx	lr
  402efe:	bf00      	nop
  402f00:	2040c69c 	.word	0x2040c69c

00402f04 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402f04:	4b01      	ldr	r3, [pc, #4]	; (402f0c <xTaskGetTickCount+0x8>)
  402f06:	6818      	ldr	r0, [r3, #0]
}
  402f08:	4770      	bx	lr
  402f0a:	bf00      	nop
  402f0c:	2040c71c 	.word	0x2040c71c

00402f10 <xTaskIncrementTick>:
{
  402f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f14:	4b42      	ldr	r3, [pc, #264]	; (403020 <xTaskIncrementTick+0x110>)
  402f16:	681b      	ldr	r3, [r3, #0]
  402f18:	2b00      	cmp	r3, #0
  402f1a:	d178      	bne.n	40300e <xTaskIncrementTick+0xfe>
		++xTickCount;
  402f1c:	4b41      	ldr	r3, [pc, #260]	; (403024 <xTaskIncrementTick+0x114>)
  402f1e:	681a      	ldr	r2, [r3, #0]
  402f20:	3201      	adds	r2, #1
  402f22:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402f24:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402f26:	b9d6      	cbnz	r6, 402f5e <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402f28:	4b3f      	ldr	r3, [pc, #252]	; (403028 <xTaskIncrementTick+0x118>)
  402f2a:	681b      	ldr	r3, [r3, #0]
  402f2c:	681b      	ldr	r3, [r3, #0]
  402f2e:	b153      	cbz	r3, 402f46 <xTaskIncrementTick+0x36>
  402f30:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f34:	b672      	cpsid	i
  402f36:	f383 8811 	msr	BASEPRI, r3
  402f3a:	f3bf 8f6f 	isb	sy
  402f3e:	f3bf 8f4f 	dsb	sy
  402f42:	b662      	cpsie	i
  402f44:	e7fe      	b.n	402f44 <xTaskIncrementTick+0x34>
  402f46:	4a38      	ldr	r2, [pc, #224]	; (403028 <xTaskIncrementTick+0x118>)
  402f48:	6811      	ldr	r1, [r2, #0]
  402f4a:	4b38      	ldr	r3, [pc, #224]	; (40302c <xTaskIncrementTick+0x11c>)
  402f4c:	6818      	ldr	r0, [r3, #0]
  402f4e:	6010      	str	r0, [r2, #0]
  402f50:	6019      	str	r1, [r3, #0]
  402f52:	4a37      	ldr	r2, [pc, #220]	; (403030 <xTaskIncrementTick+0x120>)
  402f54:	6813      	ldr	r3, [r2, #0]
  402f56:	3301      	adds	r3, #1
  402f58:	6013      	str	r3, [r2, #0]
  402f5a:	4b36      	ldr	r3, [pc, #216]	; (403034 <xTaskIncrementTick+0x124>)
  402f5c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402f5e:	4b36      	ldr	r3, [pc, #216]	; (403038 <xTaskIncrementTick+0x128>)
  402f60:	681b      	ldr	r3, [r3, #0]
  402f62:	429e      	cmp	r6, r3
  402f64:	d218      	bcs.n	402f98 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402f66:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402f68:	4b34      	ldr	r3, [pc, #208]	; (40303c <xTaskIncrementTick+0x12c>)
  402f6a:	681b      	ldr	r3, [r3, #0]
  402f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402f6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402f72:	4a33      	ldr	r2, [pc, #204]	; (403040 <xTaskIncrementTick+0x130>)
  402f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402f78:	2b02      	cmp	r3, #2
  402f7a:	bf28      	it	cs
  402f7c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402f7e:	4b31      	ldr	r3, [pc, #196]	; (403044 <xTaskIncrementTick+0x134>)
  402f80:	681b      	ldr	r3, [r3, #0]
  402f82:	b90b      	cbnz	r3, 402f88 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402f84:	4b30      	ldr	r3, [pc, #192]	; (403048 <xTaskIncrementTick+0x138>)
  402f86:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402f88:	4b30      	ldr	r3, [pc, #192]	; (40304c <xTaskIncrementTick+0x13c>)
  402f8a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402f8c:	2b00      	cmp	r3, #0
}
  402f8e:	bf0c      	ite	eq
  402f90:	4620      	moveq	r0, r4
  402f92:	2001      	movne	r0, #1
  402f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f98:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402f9a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 403028 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402f9e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 403058 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402fa2:	4f2b      	ldr	r7, [pc, #172]	; (403050 <xTaskIncrementTick+0x140>)
  402fa4:	e01f      	b.n	402fe6 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402fa6:	f04f 32ff 	mov.w	r2, #4294967295
  402faa:	4b23      	ldr	r3, [pc, #140]	; (403038 <xTaskIncrementTick+0x128>)
  402fac:	601a      	str	r2, [r3, #0]
						break;
  402fae:	e7db      	b.n	402f68 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402fb0:	4a21      	ldr	r2, [pc, #132]	; (403038 <xTaskIncrementTick+0x128>)
  402fb2:	6013      	str	r3, [r2, #0]
							break;
  402fb4:	e7d8      	b.n	402f68 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402fb6:	f105 0018 	add.w	r0, r5, #24
  402fba:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402fbc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402fbe:	683a      	ldr	r2, [r7, #0]
  402fc0:	2301      	movs	r3, #1
  402fc2:	4083      	lsls	r3, r0
  402fc4:	4313      	orrs	r3, r2
  402fc6:	603b      	str	r3, [r7, #0]
  402fc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402fcc:	4651      	mov	r1, sl
  402fce:	4b1c      	ldr	r3, [pc, #112]	; (403040 <xTaskIncrementTick+0x130>)
  402fd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402fd4:	4b1f      	ldr	r3, [pc, #124]	; (403054 <xTaskIncrementTick+0x144>)
  402fd6:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402fd8:	4b18      	ldr	r3, [pc, #96]	; (40303c <xTaskIncrementTick+0x12c>)
  402fda:	681b      	ldr	r3, [r3, #0]
  402fdc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402fe0:	429a      	cmp	r2, r3
  402fe2:	bf28      	it	cs
  402fe4:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402fe6:	f8d9 3000 	ldr.w	r3, [r9]
  402fea:	681b      	ldr	r3, [r3, #0]
  402fec:	2b00      	cmp	r3, #0
  402fee:	d0da      	beq.n	402fa6 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402ff0:	f8d9 3000 	ldr.w	r3, [r9]
  402ff4:	68db      	ldr	r3, [r3, #12]
  402ff6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402ff8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402ffa:	429e      	cmp	r6, r3
  402ffc:	d3d8      	bcc.n	402fb0 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402ffe:	f105 0a04 	add.w	sl, r5, #4
  403002:	4650      	mov	r0, sl
  403004:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  403006:	6aab      	ldr	r3, [r5, #40]	; 0x28
  403008:	2b00      	cmp	r3, #0
  40300a:	d1d4      	bne.n	402fb6 <xTaskIncrementTick+0xa6>
  40300c:	e7d6      	b.n	402fbc <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40300e:	4a0d      	ldr	r2, [pc, #52]	; (403044 <xTaskIncrementTick+0x134>)
  403010:	6813      	ldr	r3, [r2, #0]
  403012:	3301      	adds	r3, #1
  403014:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  403016:	4b0c      	ldr	r3, [pc, #48]	; (403048 <xTaskIncrementTick+0x138>)
  403018:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40301a:	2400      	movs	r4, #0
  40301c:	e7b4      	b.n	402f88 <xTaskIncrementTick+0x78>
  40301e:	bf00      	nop
  403020:	2040c69c 	.word	0x2040c69c
  403024:	2040c71c 	.word	0x2040c71c
  403028:	2040c628 	.word	0x2040c628
  40302c:	2040c62c 	.word	0x2040c62c
  403030:	2040c6d8 	.word	0x2040c6d8
  403034:	00402bb1 	.word	0x00402bb1
  403038:	2040c6d4 	.word	0x2040c6d4
  40303c:	2040c624 	.word	0x2040c624
  403040:	2040c630 	.word	0x2040c630
  403044:	2040c698 	.word	0x2040c698
  403048:	00403da5 	.word	0x00403da5
  40304c:	2040c720 	.word	0x2040c720
  403050:	2040c6a8 	.word	0x2040c6a8
  403054:	00401f6d 	.word	0x00401f6d
  403058:	00401fb9 	.word	0x00401fb9

0040305c <xTaskResumeAll>:
{
  40305c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  403060:	4b38      	ldr	r3, [pc, #224]	; (403144 <xTaskResumeAll+0xe8>)
  403062:	681b      	ldr	r3, [r3, #0]
  403064:	b953      	cbnz	r3, 40307c <xTaskResumeAll+0x20>
  403066:	f04f 0380 	mov.w	r3, #128	; 0x80
  40306a:	b672      	cpsid	i
  40306c:	f383 8811 	msr	BASEPRI, r3
  403070:	f3bf 8f6f 	isb	sy
  403074:	f3bf 8f4f 	dsb	sy
  403078:	b662      	cpsie	i
  40307a:	e7fe      	b.n	40307a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  40307c:	4b32      	ldr	r3, [pc, #200]	; (403148 <xTaskResumeAll+0xec>)
  40307e:	4798      	blx	r3
		--uxSchedulerSuspended;
  403080:	4b30      	ldr	r3, [pc, #192]	; (403144 <xTaskResumeAll+0xe8>)
  403082:	681a      	ldr	r2, [r3, #0]
  403084:	3a01      	subs	r2, #1
  403086:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403088:	681b      	ldr	r3, [r3, #0]
  40308a:	2b00      	cmp	r3, #0
  40308c:	d155      	bne.n	40313a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40308e:	4b2f      	ldr	r3, [pc, #188]	; (40314c <xTaskResumeAll+0xf0>)
  403090:	681b      	ldr	r3, [r3, #0]
  403092:	2b00      	cmp	r3, #0
  403094:	d132      	bne.n	4030fc <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  403096:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403098:	4b2d      	ldr	r3, [pc, #180]	; (403150 <xTaskResumeAll+0xf4>)
  40309a:	4798      	blx	r3
}
  40309c:	4620      	mov	r0, r4
  40309e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4030a2:	68fb      	ldr	r3, [r7, #12]
  4030a4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4030a6:	f104 0018 	add.w	r0, r4, #24
  4030aa:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4030ac:	f104 0804 	add.w	r8, r4, #4
  4030b0:	4640      	mov	r0, r8
  4030b2:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4030b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4030b6:	682a      	ldr	r2, [r5, #0]
  4030b8:	2301      	movs	r3, #1
  4030ba:	4083      	lsls	r3, r0
  4030bc:	4313      	orrs	r3, r2
  4030be:	602b      	str	r3, [r5, #0]
  4030c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4030c4:	4641      	mov	r1, r8
  4030c6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4030ca:	4b22      	ldr	r3, [pc, #136]	; (403154 <xTaskResumeAll+0xf8>)
  4030cc:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4030ce:	4b22      	ldr	r3, [pc, #136]	; (403158 <xTaskResumeAll+0xfc>)
  4030d0:	681b      	ldr	r3, [r3, #0]
  4030d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4030d6:	429a      	cmp	r2, r3
  4030d8:	d20c      	bcs.n	4030f4 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4030da:	683b      	ldr	r3, [r7, #0]
  4030dc:	2b00      	cmp	r3, #0
  4030de:	d1e0      	bne.n	4030a2 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4030e0:	4b1e      	ldr	r3, [pc, #120]	; (40315c <xTaskResumeAll+0x100>)
  4030e2:	681b      	ldr	r3, [r3, #0]
  4030e4:	b1db      	cbz	r3, 40311e <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4030e6:	4b1d      	ldr	r3, [pc, #116]	; (40315c <xTaskResumeAll+0x100>)
  4030e8:	681b      	ldr	r3, [r3, #0]
  4030ea:	b1c3      	cbz	r3, 40311e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4030ec:	4e1c      	ldr	r6, [pc, #112]	; (403160 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4030ee:	4d1d      	ldr	r5, [pc, #116]	; (403164 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4030f0:	4c1a      	ldr	r4, [pc, #104]	; (40315c <xTaskResumeAll+0x100>)
  4030f2:	e00e      	b.n	403112 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4030f4:	2201      	movs	r2, #1
  4030f6:	4b1b      	ldr	r3, [pc, #108]	; (403164 <xTaskResumeAll+0x108>)
  4030f8:	601a      	str	r2, [r3, #0]
  4030fa:	e7ee      	b.n	4030da <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4030fc:	4f1a      	ldr	r7, [pc, #104]	; (403168 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4030fe:	4e1b      	ldr	r6, [pc, #108]	; (40316c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  403100:	4d1b      	ldr	r5, [pc, #108]	; (403170 <xTaskResumeAll+0x114>)
  403102:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403178 <xTaskResumeAll+0x11c>
  403106:	e7e8      	b.n	4030da <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  403108:	6823      	ldr	r3, [r4, #0]
  40310a:	3b01      	subs	r3, #1
  40310c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40310e:	6823      	ldr	r3, [r4, #0]
  403110:	b12b      	cbz	r3, 40311e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403112:	47b0      	blx	r6
  403114:	2800      	cmp	r0, #0
  403116:	d0f7      	beq.n	403108 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  403118:	2301      	movs	r3, #1
  40311a:	602b      	str	r3, [r5, #0]
  40311c:	e7f4      	b.n	403108 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40311e:	4b11      	ldr	r3, [pc, #68]	; (403164 <xTaskResumeAll+0x108>)
  403120:	681b      	ldr	r3, [r3, #0]
  403122:	2b01      	cmp	r3, #1
  403124:	d10b      	bne.n	40313e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  403126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40312a:	4b12      	ldr	r3, [pc, #72]	; (403174 <xTaskResumeAll+0x118>)
  40312c:	601a      	str	r2, [r3, #0]
  40312e:	f3bf 8f4f 	dsb	sy
  403132:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  403136:	2401      	movs	r4, #1
  403138:	e7ae      	b.n	403098 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40313a:	2400      	movs	r4, #0
  40313c:	e7ac      	b.n	403098 <xTaskResumeAll+0x3c>
  40313e:	2400      	movs	r4, #0
  403140:	e7aa      	b.n	403098 <xTaskResumeAll+0x3c>
  403142:	bf00      	nop
  403144:	2040c69c 	.word	0x2040c69c
  403148:	0040209d 	.word	0x0040209d
  40314c:	2040c694 	.word	0x2040c694
  403150:	004020e9 	.word	0x004020e9
  403154:	00401f6d 	.word	0x00401f6d
  403158:	2040c624 	.word	0x2040c624
  40315c:	2040c698 	.word	0x2040c698
  403160:	00402f11 	.word	0x00402f11
  403164:	2040c720 	.word	0x2040c720
  403168:	2040c6dc 	.word	0x2040c6dc
  40316c:	00401fb9 	.word	0x00401fb9
  403170:	2040c6a8 	.word	0x2040c6a8
  403174:	e000ed04 	.word	0xe000ed04
  403178:	2040c630 	.word	0x2040c630

0040317c <vTaskDelay>:
	{
  40317c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40317e:	2800      	cmp	r0, #0
  403180:	d029      	beq.n	4031d6 <vTaskDelay+0x5a>
  403182:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403184:	4b18      	ldr	r3, [pc, #96]	; (4031e8 <vTaskDelay+0x6c>)
  403186:	681b      	ldr	r3, [r3, #0]
  403188:	b153      	cbz	r3, 4031a0 <vTaskDelay+0x24>
  40318a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40318e:	b672      	cpsid	i
  403190:	f383 8811 	msr	BASEPRI, r3
  403194:	f3bf 8f6f 	isb	sy
  403198:	f3bf 8f4f 	dsb	sy
  40319c:	b662      	cpsie	i
  40319e:	e7fe      	b.n	40319e <vTaskDelay+0x22>
			vTaskSuspendAll();
  4031a0:	4b12      	ldr	r3, [pc, #72]	; (4031ec <vTaskDelay+0x70>)
  4031a2:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4031a4:	4b12      	ldr	r3, [pc, #72]	; (4031f0 <vTaskDelay+0x74>)
  4031a6:	681b      	ldr	r3, [r3, #0]
  4031a8:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4031aa:	4b12      	ldr	r3, [pc, #72]	; (4031f4 <vTaskDelay+0x78>)
  4031ac:	6818      	ldr	r0, [r3, #0]
  4031ae:	3004      	adds	r0, #4
  4031b0:	4b11      	ldr	r3, [pc, #68]	; (4031f8 <vTaskDelay+0x7c>)
  4031b2:	4798      	blx	r3
  4031b4:	b948      	cbnz	r0, 4031ca <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4031b6:	4b0f      	ldr	r3, [pc, #60]	; (4031f4 <vTaskDelay+0x78>)
  4031b8:	681a      	ldr	r2, [r3, #0]
  4031ba:	4910      	ldr	r1, [pc, #64]	; (4031fc <vTaskDelay+0x80>)
  4031bc:	680b      	ldr	r3, [r1, #0]
  4031be:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4031c0:	2201      	movs	r2, #1
  4031c2:	4082      	lsls	r2, r0
  4031c4:	ea23 0302 	bic.w	r3, r3, r2
  4031c8:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4031ca:	4620      	mov	r0, r4
  4031cc:	4b0c      	ldr	r3, [pc, #48]	; (403200 <vTaskDelay+0x84>)
  4031ce:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4031d0:	4b0c      	ldr	r3, [pc, #48]	; (403204 <vTaskDelay+0x88>)
  4031d2:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4031d4:	b938      	cbnz	r0, 4031e6 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4031d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4031da:	4b0b      	ldr	r3, [pc, #44]	; (403208 <vTaskDelay+0x8c>)
  4031dc:	601a      	str	r2, [r3, #0]
  4031de:	f3bf 8f4f 	dsb	sy
  4031e2:	f3bf 8f6f 	isb	sy
  4031e6:	bd10      	pop	{r4, pc}
  4031e8:	2040c69c 	.word	0x2040c69c
  4031ec:	00402ef5 	.word	0x00402ef5
  4031f0:	2040c71c 	.word	0x2040c71c
  4031f4:	2040c624 	.word	0x2040c624
  4031f8:	00401fb9 	.word	0x00401fb9
  4031fc:	2040c6a8 	.word	0x2040c6a8
  403200:	00402bdd 	.word	0x00402bdd
  403204:	0040305d 	.word	0x0040305d
  403208:	e000ed04 	.word	0xe000ed04

0040320c <prvIdleTask>:
{
  40320c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40320e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403298 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403212:	4e19      	ldr	r6, [pc, #100]	; (403278 <prvIdleTask+0x6c>)
				taskYIELD();
  403214:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40329c <prvIdleTask+0x90>
  403218:	e02a      	b.n	403270 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40321a:	4b18      	ldr	r3, [pc, #96]	; (40327c <prvIdleTask+0x70>)
  40321c:	681b      	ldr	r3, [r3, #0]
  40321e:	2b01      	cmp	r3, #1
  403220:	d81e      	bhi.n	403260 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403222:	682b      	ldr	r3, [r5, #0]
  403224:	2b00      	cmp	r3, #0
  403226:	d0f8      	beq.n	40321a <prvIdleTask+0xe>
			vTaskSuspendAll();
  403228:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40322a:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  40322c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40322e:	2c00      	cmp	r4, #0
  403230:	d0f7      	beq.n	403222 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  403232:	4b13      	ldr	r3, [pc, #76]	; (403280 <prvIdleTask+0x74>)
  403234:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  403236:	68f3      	ldr	r3, [r6, #12]
  403238:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40323a:	1d20      	adds	r0, r4, #4
  40323c:	4b11      	ldr	r3, [pc, #68]	; (403284 <prvIdleTask+0x78>)
  40323e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  403240:	4a11      	ldr	r2, [pc, #68]	; (403288 <prvIdleTask+0x7c>)
  403242:	6813      	ldr	r3, [r2, #0]
  403244:	3b01      	subs	r3, #1
  403246:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  403248:	682b      	ldr	r3, [r5, #0]
  40324a:	3b01      	subs	r3, #1
  40324c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40324e:	4b0f      	ldr	r3, [pc, #60]	; (40328c <prvIdleTask+0x80>)
  403250:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  403252:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403254:	f8df a048 	ldr.w	sl, [pc, #72]	; 4032a0 <prvIdleTask+0x94>
  403258:	47d0      	blx	sl
		vPortFree( pxTCB );
  40325a:	4620      	mov	r0, r4
  40325c:	47d0      	blx	sl
  40325e:	e7e0      	b.n	403222 <prvIdleTask+0x16>
				taskYIELD();
  403260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403264:	f8c9 3000 	str.w	r3, [r9]
  403268:	f3bf 8f4f 	dsb	sy
  40326c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403270:	4d07      	ldr	r5, [pc, #28]	; (403290 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  403272:	4f08      	ldr	r7, [pc, #32]	; (403294 <prvIdleTask+0x88>)
  403274:	e7d5      	b.n	403222 <prvIdleTask+0x16>
  403276:	bf00      	nop
  403278:	2040c708 	.word	0x2040c708
  40327c:	2040c630 	.word	0x2040c630
  403280:	0040209d 	.word	0x0040209d
  403284:	00401fb9 	.word	0x00401fb9
  403288:	2040c694 	.word	0x2040c694
  40328c:	004020e9 	.word	0x004020e9
  403290:	2040c6a4 	.word	0x2040c6a4
  403294:	0040305d 	.word	0x0040305d
  403298:	00402ef5 	.word	0x00402ef5
  40329c:	e000ed04 	.word	0xe000ed04
  4032a0:	00402369 	.word	0x00402369

004032a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4032a4:	4b2d      	ldr	r3, [pc, #180]	; (40335c <vTaskSwitchContext+0xb8>)
  4032a6:	681b      	ldr	r3, [r3, #0]
  4032a8:	2b00      	cmp	r3, #0
  4032aa:	d12c      	bne.n	403306 <vTaskSwitchContext+0x62>
{
  4032ac:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4032ae:	2200      	movs	r2, #0
  4032b0:	4b2b      	ldr	r3, [pc, #172]	; (403360 <vTaskSwitchContext+0xbc>)
  4032b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4032b4:	4b2b      	ldr	r3, [pc, #172]	; (403364 <vTaskSwitchContext+0xc0>)
  4032b6:	681b      	ldr	r3, [r3, #0]
  4032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032ba:	681a      	ldr	r2, [r3, #0]
  4032bc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4032c0:	d103      	bne.n	4032ca <vTaskSwitchContext+0x26>
  4032c2:	685a      	ldr	r2, [r3, #4]
  4032c4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4032c8:	d021      	beq.n	40330e <vTaskSwitchContext+0x6a>
  4032ca:	4b26      	ldr	r3, [pc, #152]	; (403364 <vTaskSwitchContext+0xc0>)
  4032cc:	6818      	ldr	r0, [r3, #0]
  4032ce:	6819      	ldr	r1, [r3, #0]
  4032d0:	3134      	adds	r1, #52	; 0x34
  4032d2:	4b25      	ldr	r3, [pc, #148]	; (403368 <vTaskSwitchContext+0xc4>)
  4032d4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4032d6:	4b25      	ldr	r3, [pc, #148]	; (40336c <vTaskSwitchContext+0xc8>)
  4032d8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4032da:	fab3 f383 	clz	r3, r3
  4032de:	b2db      	uxtb	r3, r3
  4032e0:	f1c3 031f 	rsb	r3, r3, #31
  4032e4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4032e8:	4a21      	ldr	r2, [pc, #132]	; (403370 <vTaskSwitchContext+0xcc>)
  4032ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4032ee:	b9ba      	cbnz	r2, 403320 <vTaskSwitchContext+0x7c>
	__asm volatile
  4032f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032f4:	b672      	cpsid	i
  4032f6:	f383 8811 	msr	BASEPRI, r3
  4032fa:	f3bf 8f6f 	isb	sy
  4032fe:	f3bf 8f4f 	dsb	sy
  403302:	b662      	cpsie	i
  403304:	e7fe      	b.n	403304 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  403306:	2201      	movs	r2, #1
  403308:	4b15      	ldr	r3, [pc, #84]	; (403360 <vTaskSwitchContext+0xbc>)
  40330a:	601a      	str	r2, [r3, #0]
  40330c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40330e:	689a      	ldr	r2, [r3, #8]
  403310:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403314:	d1d9      	bne.n	4032ca <vTaskSwitchContext+0x26>
  403316:	68db      	ldr	r3, [r3, #12]
  403318:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40331c:	d1d5      	bne.n	4032ca <vTaskSwitchContext+0x26>
  40331e:	e7da      	b.n	4032d6 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403320:	4a13      	ldr	r2, [pc, #76]	; (403370 <vTaskSwitchContext+0xcc>)
  403322:	0099      	lsls	r1, r3, #2
  403324:	18c8      	adds	r0, r1, r3
  403326:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40332a:	6844      	ldr	r4, [r0, #4]
  40332c:	6864      	ldr	r4, [r4, #4]
  40332e:	6044      	str	r4, [r0, #4]
  403330:	4419      	add	r1, r3
  403332:	4602      	mov	r2, r0
  403334:	3208      	adds	r2, #8
  403336:	4294      	cmp	r4, r2
  403338:	d009      	beq.n	40334e <vTaskSwitchContext+0xaa>
  40333a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40333e:	4a0c      	ldr	r2, [pc, #48]	; (403370 <vTaskSwitchContext+0xcc>)
  403340:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403344:	685b      	ldr	r3, [r3, #4]
  403346:	68da      	ldr	r2, [r3, #12]
  403348:	4b06      	ldr	r3, [pc, #24]	; (403364 <vTaskSwitchContext+0xc0>)
  40334a:	601a      	str	r2, [r3, #0]
  40334c:	bd10      	pop	{r4, pc}
  40334e:	6860      	ldr	r0, [r4, #4]
  403350:	4a07      	ldr	r2, [pc, #28]	; (403370 <vTaskSwitchContext+0xcc>)
  403352:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  403356:	6050      	str	r0, [r2, #4]
  403358:	e7ef      	b.n	40333a <vTaskSwitchContext+0x96>
  40335a:	bf00      	nop
  40335c:	2040c69c 	.word	0x2040c69c
  403360:	2040c720 	.word	0x2040c720
  403364:	2040c624 	.word	0x2040c624
  403368:	00403d8d 	.word	0x00403d8d
  40336c:	2040c6a8 	.word	0x2040c6a8
  403370:	2040c630 	.word	0x2040c630

00403374 <vTaskPlaceOnEventList>:
{
  403374:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  403376:	b1e0      	cbz	r0, 4033b2 <vTaskPlaceOnEventList+0x3e>
  403378:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40337a:	4d17      	ldr	r5, [pc, #92]	; (4033d8 <vTaskPlaceOnEventList+0x64>)
  40337c:	6829      	ldr	r1, [r5, #0]
  40337e:	3118      	adds	r1, #24
  403380:	4b16      	ldr	r3, [pc, #88]	; (4033dc <vTaskPlaceOnEventList+0x68>)
  403382:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403384:	6828      	ldr	r0, [r5, #0]
  403386:	3004      	adds	r0, #4
  403388:	4b15      	ldr	r3, [pc, #84]	; (4033e0 <vTaskPlaceOnEventList+0x6c>)
  40338a:	4798      	blx	r3
  40338c:	b940      	cbnz	r0, 4033a0 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40338e:	682a      	ldr	r2, [r5, #0]
  403390:	4914      	ldr	r1, [pc, #80]	; (4033e4 <vTaskPlaceOnEventList+0x70>)
  403392:	680b      	ldr	r3, [r1, #0]
  403394:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403396:	2201      	movs	r2, #1
  403398:	4082      	lsls	r2, r0
  40339a:	ea23 0302 	bic.w	r3, r3, r2
  40339e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4033a0:	f1b4 3fff 	cmp.w	r4, #4294967295
  4033a4:	d010      	beq.n	4033c8 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4033a6:	4b10      	ldr	r3, [pc, #64]	; (4033e8 <vTaskPlaceOnEventList+0x74>)
  4033a8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4033aa:	4420      	add	r0, r4
  4033ac:	4b0f      	ldr	r3, [pc, #60]	; (4033ec <vTaskPlaceOnEventList+0x78>)
  4033ae:	4798      	blx	r3
  4033b0:	bd38      	pop	{r3, r4, r5, pc}
  4033b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033b6:	b672      	cpsid	i
  4033b8:	f383 8811 	msr	BASEPRI, r3
  4033bc:	f3bf 8f6f 	isb	sy
  4033c0:	f3bf 8f4f 	dsb	sy
  4033c4:	b662      	cpsie	i
  4033c6:	e7fe      	b.n	4033c6 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4033c8:	4b03      	ldr	r3, [pc, #12]	; (4033d8 <vTaskPlaceOnEventList+0x64>)
  4033ca:	6819      	ldr	r1, [r3, #0]
  4033cc:	3104      	adds	r1, #4
  4033ce:	4808      	ldr	r0, [pc, #32]	; (4033f0 <vTaskPlaceOnEventList+0x7c>)
  4033d0:	4b08      	ldr	r3, [pc, #32]	; (4033f4 <vTaskPlaceOnEventList+0x80>)
  4033d2:	4798      	blx	r3
  4033d4:	bd38      	pop	{r3, r4, r5, pc}
  4033d6:	bf00      	nop
  4033d8:	2040c624 	.word	0x2040c624
  4033dc:	00401f85 	.word	0x00401f85
  4033e0:	00401fb9 	.word	0x00401fb9
  4033e4:	2040c6a8 	.word	0x2040c6a8
  4033e8:	2040c71c 	.word	0x2040c71c
  4033ec:	00402bdd 	.word	0x00402bdd
  4033f0:	2040c6f4 	.word	0x2040c6f4
  4033f4:	00401f6d 	.word	0x00401f6d

004033f8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4033f8:	b1e8      	cbz	r0, 403436 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4033fa:	b570      	push	{r4, r5, r6, lr}
  4033fc:	4615      	mov	r5, r2
  4033fe:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403400:	4e16      	ldr	r6, [pc, #88]	; (40345c <vTaskPlaceOnEventListRestricted+0x64>)
  403402:	6831      	ldr	r1, [r6, #0]
  403404:	3118      	adds	r1, #24
  403406:	4b16      	ldr	r3, [pc, #88]	; (403460 <vTaskPlaceOnEventListRestricted+0x68>)
  403408:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40340a:	6830      	ldr	r0, [r6, #0]
  40340c:	3004      	adds	r0, #4
  40340e:	4b15      	ldr	r3, [pc, #84]	; (403464 <vTaskPlaceOnEventListRestricted+0x6c>)
  403410:	4798      	blx	r3
  403412:	b940      	cbnz	r0, 403426 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403414:	6832      	ldr	r2, [r6, #0]
  403416:	4914      	ldr	r1, [pc, #80]	; (403468 <vTaskPlaceOnEventListRestricted+0x70>)
  403418:	680b      	ldr	r3, [r1, #0]
  40341a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40341c:	2201      	movs	r2, #1
  40341e:	4082      	lsls	r2, r0
  403420:	ea23 0302 	bic.w	r3, r3, r2
  403424:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  403426:	2d01      	cmp	r5, #1
  403428:	d010      	beq.n	40344c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40342a:	4b10      	ldr	r3, [pc, #64]	; (40346c <vTaskPlaceOnEventListRestricted+0x74>)
  40342c:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40342e:	4420      	add	r0, r4
  403430:	4b0f      	ldr	r3, [pc, #60]	; (403470 <vTaskPlaceOnEventListRestricted+0x78>)
  403432:	4798      	blx	r3
  403434:	bd70      	pop	{r4, r5, r6, pc}
  403436:	f04f 0380 	mov.w	r3, #128	; 0x80
  40343a:	b672      	cpsid	i
  40343c:	f383 8811 	msr	BASEPRI, r3
  403440:	f3bf 8f6f 	isb	sy
  403444:	f3bf 8f4f 	dsb	sy
  403448:	b662      	cpsie	i
  40344a:	e7fe      	b.n	40344a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40344c:	4b03      	ldr	r3, [pc, #12]	; (40345c <vTaskPlaceOnEventListRestricted+0x64>)
  40344e:	6819      	ldr	r1, [r3, #0]
  403450:	3104      	adds	r1, #4
  403452:	4808      	ldr	r0, [pc, #32]	; (403474 <vTaskPlaceOnEventListRestricted+0x7c>)
  403454:	4b02      	ldr	r3, [pc, #8]	; (403460 <vTaskPlaceOnEventListRestricted+0x68>)
  403456:	4798      	blx	r3
  403458:	bd70      	pop	{r4, r5, r6, pc}
  40345a:	bf00      	nop
  40345c:	2040c624 	.word	0x2040c624
  403460:	00401f6d 	.word	0x00401f6d
  403464:	00401fb9 	.word	0x00401fb9
  403468:	2040c6a8 	.word	0x2040c6a8
  40346c:	2040c71c 	.word	0x2040c71c
  403470:	00402bdd 	.word	0x00402bdd
  403474:	2040c6f4 	.word	0x2040c6f4

00403478 <xTaskRemoveFromEventList>:
{
  403478:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40347a:	68c3      	ldr	r3, [r0, #12]
  40347c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40347e:	b324      	cbz	r4, 4034ca <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403480:	f104 0518 	add.w	r5, r4, #24
  403484:	4628      	mov	r0, r5
  403486:	4b1a      	ldr	r3, [pc, #104]	; (4034f0 <xTaskRemoveFromEventList+0x78>)
  403488:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40348a:	4b1a      	ldr	r3, [pc, #104]	; (4034f4 <xTaskRemoveFromEventList+0x7c>)
  40348c:	681b      	ldr	r3, [r3, #0]
  40348e:	bb3b      	cbnz	r3, 4034e0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403490:	1d25      	adds	r5, r4, #4
  403492:	4628      	mov	r0, r5
  403494:	4b16      	ldr	r3, [pc, #88]	; (4034f0 <xTaskRemoveFromEventList+0x78>)
  403496:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403498:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40349a:	4a17      	ldr	r2, [pc, #92]	; (4034f8 <xTaskRemoveFromEventList+0x80>)
  40349c:	6811      	ldr	r1, [r2, #0]
  40349e:	2301      	movs	r3, #1
  4034a0:	4083      	lsls	r3, r0
  4034a2:	430b      	orrs	r3, r1
  4034a4:	6013      	str	r3, [r2, #0]
  4034a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4034aa:	4629      	mov	r1, r5
  4034ac:	4b13      	ldr	r3, [pc, #76]	; (4034fc <xTaskRemoveFromEventList+0x84>)
  4034ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4034b2:	4b13      	ldr	r3, [pc, #76]	; (403500 <xTaskRemoveFromEventList+0x88>)
  4034b4:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4034b6:	4b13      	ldr	r3, [pc, #76]	; (403504 <xTaskRemoveFromEventList+0x8c>)
  4034b8:	681b      	ldr	r3, [r3, #0]
  4034ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4034be:	429a      	cmp	r2, r3
  4034c0:	d913      	bls.n	4034ea <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4034c2:	2001      	movs	r0, #1
  4034c4:	4b10      	ldr	r3, [pc, #64]	; (403508 <xTaskRemoveFromEventList+0x90>)
  4034c6:	6018      	str	r0, [r3, #0]
  4034c8:	bd38      	pop	{r3, r4, r5, pc}
  4034ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034ce:	b672      	cpsid	i
  4034d0:	f383 8811 	msr	BASEPRI, r3
  4034d4:	f3bf 8f6f 	isb	sy
  4034d8:	f3bf 8f4f 	dsb	sy
  4034dc:	b662      	cpsie	i
  4034de:	e7fe      	b.n	4034de <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4034e0:	4629      	mov	r1, r5
  4034e2:	480a      	ldr	r0, [pc, #40]	; (40350c <xTaskRemoveFromEventList+0x94>)
  4034e4:	4b06      	ldr	r3, [pc, #24]	; (403500 <xTaskRemoveFromEventList+0x88>)
  4034e6:	4798      	blx	r3
  4034e8:	e7e5      	b.n	4034b6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4034ea:	2000      	movs	r0, #0
}
  4034ec:	bd38      	pop	{r3, r4, r5, pc}
  4034ee:	bf00      	nop
  4034f0:	00401fb9 	.word	0x00401fb9
  4034f4:	2040c69c 	.word	0x2040c69c
  4034f8:	2040c6a8 	.word	0x2040c6a8
  4034fc:	2040c630 	.word	0x2040c630
  403500:	00401f6d 	.word	0x00401f6d
  403504:	2040c624 	.word	0x2040c624
  403508:	2040c720 	.word	0x2040c720
  40350c:	2040c6dc 	.word	0x2040c6dc

00403510 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  403510:	b130      	cbz	r0, 403520 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  403512:	4a09      	ldr	r2, [pc, #36]	; (403538 <vTaskSetTimeOutState+0x28>)
  403514:	6812      	ldr	r2, [r2, #0]
  403516:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403518:	4a08      	ldr	r2, [pc, #32]	; (40353c <vTaskSetTimeOutState+0x2c>)
  40351a:	6812      	ldr	r2, [r2, #0]
  40351c:	6042      	str	r2, [r0, #4]
  40351e:	4770      	bx	lr
  403520:	f04f 0380 	mov.w	r3, #128	; 0x80
  403524:	b672      	cpsid	i
  403526:	f383 8811 	msr	BASEPRI, r3
  40352a:	f3bf 8f6f 	isb	sy
  40352e:	f3bf 8f4f 	dsb	sy
  403532:	b662      	cpsie	i
  403534:	e7fe      	b.n	403534 <vTaskSetTimeOutState+0x24>
  403536:	bf00      	nop
  403538:	2040c6d8 	.word	0x2040c6d8
  40353c:	2040c71c 	.word	0x2040c71c

00403540 <xTaskCheckForTimeOut>:
{
  403540:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  403542:	b1c0      	cbz	r0, 403576 <xTaskCheckForTimeOut+0x36>
  403544:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403546:	b309      	cbz	r1, 40358c <xTaskCheckForTimeOut+0x4c>
  403548:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40354a:	4b1d      	ldr	r3, [pc, #116]	; (4035c0 <xTaskCheckForTimeOut+0x80>)
  40354c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40354e:	4b1d      	ldr	r3, [pc, #116]	; (4035c4 <xTaskCheckForTimeOut+0x84>)
  403550:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  403552:	682b      	ldr	r3, [r5, #0]
  403554:	f1b3 3fff 	cmp.w	r3, #4294967295
  403558:	d02e      	beq.n	4035b8 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40355a:	491b      	ldr	r1, [pc, #108]	; (4035c8 <xTaskCheckForTimeOut+0x88>)
  40355c:	6809      	ldr	r1, [r1, #0]
  40355e:	6820      	ldr	r0, [r4, #0]
  403560:	4288      	cmp	r0, r1
  403562:	d002      	beq.n	40356a <xTaskCheckForTimeOut+0x2a>
  403564:	6861      	ldr	r1, [r4, #4]
  403566:	428a      	cmp	r2, r1
  403568:	d228      	bcs.n	4035bc <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40356a:	6861      	ldr	r1, [r4, #4]
  40356c:	1a50      	subs	r0, r2, r1
  40356e:	4283      	cmp	r3, r0
  403570:	d817      	bhi.n	4035a2 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403572:	2401      	movs	r4, #1
  403574:	e01c      	b.n	4035b0 <xTaskCheckForTimeOut+0x70>
  403576:	f04f 0380 	mov.w	r3, #128	; 0x80
  40357a:	b672      	cpsid	i
  40357c:	f383 8811 	msr	BASEPRI, r3
  403580:	f3bf 8f6f 	isb	sy
  403584:	f3bf 8f4f 	dsb	sy
  403588:	b662      	cpsie	i
  40358a:	e7fe      	b.n	40358a <xTaskCheckForTimeOut+0x4a>
  40358c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403590:	b672      	cpsid	i
  403592:	f383 8811 	msr	BASEPRI, r3
  403596:	f3bf 8f6f 	isb	sy
  40359a:	f3bf 8f4f 	dsb	sy
  40359e:	b662      	cpsie	i
  4035a0:	e7fe      	b.n	4035a0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4035a2:	1a9b      	subs	r3, r3, r2
  4035a4:	440b      	add	r3, r1
  4035a6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4035a8:	4620      	mov	r0, r4
  4035aa:	4b08      	ldr	r3, [pc, #32]	; (4035cc <xTaskCheckForTimeOut+0x8c>)
  4035ac:	4798      	blx	r3
			xReturn = pdFALSE;
  4035ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4035b0:	4b07      	ldr	r3, [pc, #28]	; (4035d0 <xTaskCheckForTimeOut+0x90>)
  4035b2:	4798      	blx	r3
}
  4035b4:	4620      	mov	r0, r4
  4035b6:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4035b8:	2400      	movs	r4, #0
  4035ba:	e7f9      	b.n	4035b0 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4035bc:	2401      	movs	r4, #1
  4035be:	e7f7      	b.n	4035b0 <xTaskCheckForTimeOut+0x70>
  4035c0:	0040209d 	.word	0x0040209d
  4035c4:	2040c71c 	.word	0x2040c71c
  4035c8:	2040c6d8 	.word	0x2040c6d8
  4035cc:	00403511 	.word	0x00403511
  4035d0:	004020e9 	.word	0x004020e9

004035d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4035d4:	2201      	movs	r2, #1
  4035d6:	4b01      	ldr	r3, [pc, #4]	; (4035dc <vTaskMissedYield+0x8>)
  4035d8:	601a      	str	r2, [r3, #0]
  4035da:	4770      	bx	lr
  4035dc:	2040c720 	.word	0x2040c720

004035e0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4035e0:	4b05      	ldr	r3, [pc, #20]	; (4035f8 <xTaskGetSchedulerState+0x18>)
  4035e2:	681b      	ldr	r3, [r3, #0]
  4035e4:	b133      	cbz	r3, 4035f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4035e6:	4b05      	ldr	r3, [pc, #20]	; (4035fc <xTaskGetSchedulerState+0x1c>)
  4035e8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	bf0c      	ite	eq
  4035ee:	2002      	moveq	r0, #2
  4035f0:	2000      	movne	r0, #0
  4035f2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4035f4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4035f6:	4770      	bx	lr
  4035f8:	2040c6f0 	.word	0x2040c6f0
  4035fc:	2040c69c 	.word	0x2040c69c

00403600 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  403600:	2800      	cmp	r0, #0
  403602:	d044      	beq.n	40368e <vTaskPriorityInherit+0x8e>
	{
  403604:	b538      	push	{r3, r4, r5, lr}
  403606:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403608:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40360a:	4921      	ldr	r1, [pc, #132]	; (403690 <vTaskPriorityInherit+0x90>)
  40360c:	6809      	ldr	r1, [r1, #0]
  40360e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403610:	428a      	cmp	r2, r1
  403612:	d214      	bcs.n	40363e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403614:	6981      	ldr	r1, [r0, #24]
  403616:	2900      	cmp	r1, #0
  403618:	db05      	blt.n	403626 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40361a:	491d      	ldr	r1, [pc, #116]	; (403690 <vTaskPriorityInherit+0x90>)
  40361c:	6809      	ldr	r1, [r1, #0]
  40361e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403620:	f1c1 0105 	rsb	r1, r1, #5
  403624:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  403626:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40362a:	491a      	ldr	r1, [pc, #104]	; (403694 <vTaskPriorityInherit+0x94>)
  40362c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403630:	6961      	ldr	r1, [r4, #20]
  403632:	4291      	cmp	r1, r2
  403634:	d004      	beq.n	403640 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403636:	4a16      	ldr	r2, [pc, #88]	; (403690 <vTaskPriorityInherit+0x90>)
  403638:	6812      	ldr	r2, [r2, #0]
  40363a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40363c:	62e2      	str	r2, [r4, #44]	; 0x2c
  40363e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403640:	1d25      	adds	r5, r4, #4
  403642:	4628      	mov	r0, r5
  403644:	4b14      	ldr	r3, [pc, #80]	; (403698 <vTaskPriorityInherit+0x98>)
  403646:	4798      	blx	r3
  403648:	b970      	cbnz	r0, 403668 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40364a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40364c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403650:	4a10      	ldr	r2, [pc, #64]	; (403694 <vTaskPriorityInherit+0x94>)
  403652:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403656:	b93a      	cbnz	r2, 403668 <vTaskPriorityInherit+0x68>
  403658:	4810      	ldr	r0, [pc, #64]	; (40369c <vTaskPriorityInherit+0x9c>)
  40365a:	6802      	ldr	r2, [r0, #0]
  40365c:	2101      	movs	r1, #1
  40365e:	fa01 f303 	lsl.w	r3, r1, r3
  403662:	ea22 0303 	bic.w	r3, r2, r3
  403666:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403668:	4b09      	ldr	r3, [pc, #36]	; (403690 <vTaskPriorityInherit+0x90>)
  40366a:	681b      	ldr	r3, [r3, #0]
  40366c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40366e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403670:	4a0a      	ldr	r2, [pc, #40]	; (40369c <vTaskPriorityInherit+0x9c>)
  403672:	6811      	ldr	r1, [r2, #0]
  403674:	2301      	movs	r3, #1
  403676:	4083      	lsls	r3, r0
  403678:	430b      	orrs	r3, r1
  40367a:	6013      	str	r3, [r2, #0]
  40367c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403680:	4629      	mov	r1, r5
  403682:	4b04      	ldr	r3, [pc, #16]	; (403694 <vTaskPriorityInherit+0x94>)
  403684:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403688:	4b05      	ldr	r3, [pc, #20]	; (4036a0 <vTaskPriorityInherit+0xa0>)
  40368a:	4798      	blx	r3
  40368c:	bd38      	pop	{r3, r4, r5, pc}
  40368e:	4770      	bx	lr
  403690:	2040c624 	.word	0x2040c624
  403694:	2040c630 	.word	0x2040c630
  403698:	00401fb9 	.word	0x00401fb9
  40369c:	2040c6a8 	.word	0x2040c6a8
  4036a0:	00401f6d 	.word	0x00401f6d

004036a4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4036a4:	2800      	cmp	r0, #0
  4036a6:	d04d      	beq.n	403744 <xTaskPriorityDisinherit+0xa0>
	{
  4036a8:	b538      	push	{r3, r4, r5, lr}
  4036aa:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4036ac:	4a27      	ldr	r2, [pc, #156]	; (40374c <xTaskPriorityDisinherit+0xa8>)
  4036ae:	6812      	ldr	r2, [r2, #0]
  4036b0:	4290      	cmp	r0, r2
  4036b2:	d00a      	beq.n	4036ca <xTaskPriorityDisinherit+0x26>
  4036b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4036b8:	b672      	cpsid	i
  4036ba:	f383 8811 	msr	BASEPRI, r3
  4036be:	f3bf 8f6f 	isb	sy
  4036c2:	f3bf 8f4f 	dsb	sy
  4036c6:	b662      	cpsie	i
  4036c8:	e7fe      	b.n	4036c8 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4036ca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4036cc:	b952      	cbnz	r2, 4036e4 <xTaskPriorityDisinherit+0x40>
  4036ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4036d2:	b672      	cpsid	i
  4036d4:	f383 8811 	msr	BASEPRI, r3
  4036d8:	f3bf 8f6f 	isb	sy
  4036dc:	f3bf 8f4f 	dsb	sy
  4036e0:	b662      	cpsie	i
  4036e2:	e7fe      	b.n	4036e2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4036e4:	3a01      	subs	r2, #1
  4036e6:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4036e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4036ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4036ec:	4288      	cmp	r0, r1
  4036ee:	d02b      	beq.n	403748 <xTaskPriorityDisinherit+0xa4>
  4036f0:	bb52      	cbnz	r2, 403748 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4036f2:	1d25      	adds	r5, r4, #4
  4036f4:	4628      	mov	r0, r5
  4036f6:	4b16      	ldr	r3, [pc, #88]	; (403750 <xTaskPriorityDisinherit+0xac>)
  4036f8:	4798      	blx	r3
  4036fa:	b968      	cbnz	r0, 403718 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4036fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4036fe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403702:	4b14      	ldr	r3, [pc, #80]	; (403754 <xTaskPriorityDisinherit+0xb0>)
  403704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403708:	b933      	cbnz	r3, 403718 <xTaskPriorityDisinherit+0x74>
  40370a:	4813      	ldr	r0, [pc, #76]	; (403758 <xTaskPriorityDisinherit+0xb4>)
  40370c:	6803      	ldr	r3, [r0, #0]
  40370e:	2201      	movs	r2, #1
  403710:	408a      	lsls	r2, r1
  403712:	ea23 0302 	bic.w	r3, r3, r2
  403716:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403718:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40371a:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40371c:	f1c0 0305 	rsb	r3, r0, #5
  403720:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403722:	4a0d      	ldr	r2, [pc, #52]	; (403758 <xTaskPriorityDisinherit+0xb4>)
  403724:	6811      	ldr	r1, [r2, #0]
  403726:	2401      	movs	r4, #1
  403728:	fa04 f300 	lsl.w	r3, r4, r0
  40372c:	430b      	orrs	r3, r1
  40372e:	6013      	str	r3, [r2, #0]
  403730:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403734:	4629      	mov	r1, r5
  403736:	4b07      	ldr	r3, [pc, #28]	; (403754 <xTaskPriorityDisinherit+0xb0>)
  403738:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40373c:	4b07      	ldr	r3, [pc, #28]	; (40375c <xTaskPriorityDisinherit+0xb8>)
  40373e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403740:	4620      	mov	r0, r4
  403742:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403744:	2000      	movs	r0, #0
  403746:	4770      	bx	lr
  403748:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40374a:	bd38      	pop	{r3, r4, r5, pc}
  40374c:	2040c624 	.word	0x2040c624
  403750:	00401fb9 	.word	0x00401fb9
  403754:	2040c630 	.word	0x2040c630
  403758:	2040c6a8 	.word	0x2040c6a8
  40375c:	00401f6d 	.word	0x00401f6d

00403760 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403760:	4b05      	ldr	r3, [pc, #20]	; (403778 <pvTaskIncrementMutexHeldCount+0x18>)
  403762:	681b      	ldr	r3, [r3, #0]
  403764:	b123      	cbz	r3, 403770 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403766:	4b04      	ldr	r3, [pc, #16]	; (403778 <pvTaskIncrementMutexHeldCount+0x18>)
  403768:	681a      	ldr	r2, [r3, #0]
  40376a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40376c:	3301      	adds	r3, #1
  40376e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403770:	4b01      	ldr	r3, [pc, #4]	; (403778 <pvTaskIncrementMutexHeldCount+0x18>)
  403772:	6818      	ldr	r0, [r3, #0]
	}
  403774:	4770      	bx	lr
  403776:	bf00      	nop
  403778:	2040c624 	.word	0x2040c624

0040377c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40377c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40377e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403780:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403782:	4291      	cmp	r1, r2
  403784:	d80c      	bhi.n	4037a0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403786:	1ad2      	subs	r2, r2, r3
  403788:	6983      	ldr	r3, [r0, #24]
  40378a:	429a      	cmp	r2, r3
  40378c:	d301      	bcc.n	403792 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40378e:	2001      	movs	r0, #1
  403790:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403792:	1d01      	adds	r1, r0, #4
  403794:	4b09      	ldr	r3, [pc, #36]	; (4037bc <prvInsertTimerInActiveList+0x40>)
  403796:	6818      	ldr	r0, [r3, #0]
  403798:	4b09      	ldr	r3, [pc, #36]	; (4037c0 <prvInsertTimerInActiveList+0x44>)
  40379a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40379c:	2000      	movs	r0, #0
  40379e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4037a0:	429a      	cmp	r2, r3
  4037a2:	d203      	bcs.n	4037ac <prvInsertTimerInActiveList+0x30>
  4037a4:	4299      	cmp	r1, r3
  4037a6:	d301      	bcc.n	4037ac <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4037a8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4037aa:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4037ac:	1d01      	adds	r1, r0, #4
  4037ae:	4b05      	ldr	r3, [pc, #20]	; (4037c4 <prvInsertTimerInActiveList+0x48>)
  4037b0:	6818      	ldr	r0, [r3, #0]
  4037b2:	4b03      	ldr	r3, [pc, #12]	; (4037c0 <prvInsertTimerInActiveList+0x44>)
  4037b4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4037b6:	2000      	movs	r0, #0
  4037b8:	bd08      	pop	{r3, pc}
  4037ba:	bf00      	nop
  4037bc:	2040c728 	.word	0x2040c728
  4037c0:	00401f85 	.word	0x00401f85
  4037c4:	2040c724 	.word	0x2040c724

004037c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4037c8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4037ca:	4b15      	ldr	r3, [pc, #84]	; (403820 <prvCheckForValidListAndQueue+0x58>)
  4037cc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4037ce:	4b15      	ldr	r3, [pc, #84]	; (403824 <prvCheckForValidListAndQueue+0x5c>)
  4037d0:	681b      	ldr	r3, [r3, #0]
  4037d2:	b113      	cbz	r3, 4037da <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4037d4:	4b14      	ldr	r3, [pc, #80]	; (403828 <prvCheckForValidListAndQueue+0x60>)
  4037d6:	4798      	blx	r3
  4037d8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4037da:	4d14      	ldr	r5, [pc, #80]	; (40382c <prvCheckForValidListAndQueue+0x64>)
  4037dc:	4628      	mov	r0, r5
  4037de:	4e14      	ldr	r6, [pc, #80]	; (403830 <prvCheckForValidListAndQueue+0x68>)
  4037e0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4037e2:	4c14      	ldr	r4, [pc, #80]	; (403834 <prvCheckForValidListAndQueue+0x6c>)
  4037e4:	4620      	mov	r0, r4
  4037e6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4037e8:	4b13      	ldr	r3, [pc, #76]	; (403838 <prvCheckForValidListAndQueue+0x70>)
  4037ea:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4037ec:	4b13      	ldr	r3, [pc, #76]	; (40383c <prvCheckForValidListAndQueue+0x74>)
  4037ee:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4037f0:	2200      	movs	r2, #0
  4037f2:	2110      	movs	r1, #16
  4037f4:	2005      	movs	r0, #5
  4037f6:	4b12      	ldr	r3, [pc, #72]	; (403840 <prvCheckForValidListAndQueue+0x78>)
  4037f8:	4798      	blx	r3
  4037fa:	4b0a      	ldr	r3, [pc, #40]	; (403824 <prvCheckForValidListAndQueue+0x5c>)
  4037fc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4037fe:	b118      	cbz	r0, 403808 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403800:	4910      	ldr	r1, [pc, #64]	; (403844 <prvCheckForValidListAndQueue+0x7c>)
  403802:	4b11      	ldr	r3, [pc, #68]	; (403848 <prvCheckForValidListAndQueue+0x80>)
  403804:	4798      	blx	r3
  403806:	e7e5      	b.n	4037d4 <prvCheckForValidListAndQueue+0xc>
  403808:	f04f 0380 	mov.w	r3, #128	; 0x80
  40380c:	b672      	cpsid	i
  40380e:	f383 8811 	msr	BASEPRI, r3
  403812:	f3bf 8f6f 	isb	sy
  403816:	f3bf 8f4f 	dsb	sy
  40381a:	b662      	cpsie	i
  40381c:	e7fe      	b.n	40381c <prvCheckForValidListAndQueue+0x54>
  40381e:	bf00      	nop
  403820:	0040209d 	.word	0x0040209d
  403824:	2040c758 	.word	0x2040c758
  403828:	004020e9 	.word	0x004020e9
  40382c:	2040c72c 	.word	0x2040c72c
  403830:	00401f51 	.word	0x00401f51
  403834:	2040c740 	.word	0x2040c740
  403838:	2040c724 	.word	0x2040c724
  40383c:	2040c728 	.word	0x2040c728
  403840:	004025f5 	.word	0x004025f5
  403844:	00407200 	.word	0x00407200
  403848:	00402b25 	.word	0x00402b25

0040384c <xTimerCreateTimerTask>:
{
  40384c:	b510      	push	{r4, lr}
  40384e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403850:	4b0f      	ldr	r3, [pc, #60]	; (403890 <xTimerCreateTimerTask+0x44>)
  403852:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403854:	4b0f      	ldr	r3, [pc, #60]	; (403894 <xTimerCreateTimerTask+0x48>)
  403856:	681b      	ldr	r3, [r3, #0]
  403858:	b173      	cbz	r3, 403878 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40385a:	2300      	movs	r3, #0
  40385c:	9303      	str	r3, [sp, #12]
  40385e:	9302      	str	r3, [sp, #8]
  403860:	9301      	str	r3, [sp, #4]
  403862:	2204      	movs	r2, #4
  403864:	9200      	str	r2, [sp, #0]
  403866:	f44f 7282 	mov.w	r2, #260	; 0x104
  40386a:	490b      	ldr	r1, [pc, #44]	; (403898 <xTimerCreateTimerTask+0x4c>)
  40386c:	480b      	ldr	r0, [pc, #44]	; (40389c <xTimerCreateTimerTask+0x50>)
  40386e:	4c0c      	ldr	r4, [pc, #48]	; (4038a0 <xTimerCreateTimerTask+0x54>)
  403870:	47a0      	blx	r4
	configASSERT( xReturn );
  403872:	b108      	cbz	r0, 403878 <xTimerCreateTimerTask+0x2c>
}
  403874:	b004      	add	sp, #16
  403876:	bd10      	pop	{r4, pc}
  403878:	f04f 0380 	mov.w	r3, #128	; 0x80
  40387c:	b672      	cpsid	i
  40387e:	f383 8811 	msr	BASEPRI, r3
  403882:	f3bf 8f6f 	isb	sy
  403886:	f3bf 8f4f 	dsb	sy
  40388a:	b662      	cpsie	i
  40388c:	e7fe      	b.n	40388c <xTimerCreateTimerTask+0x40>
  40388e:	bf00      	nop
  403890:	004037c9 	.word	0x004037c9
  403894:	2040c758 	.word	0x2040c758
  403898:	00407208 	.word	0x00407208
  40389c:	004039cd 	.word	0x004039cd
  4038a0:	00402c35 	.word	0x00402c35

004038a4 <xTimerGenericCommand>:
	configASSERT( xTimer );
  4038a4:	b1d8      	cbz	r0, 4038de <xTimerGenericCommand+0x3a>
{
  4038a6:	b530      	push	{r4, r5, lr}
  4038a8:	b085      	sub	sp, #20
  4038aa:	4615      	mov	r5, r2
  4038ac:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4038ae:	4a15      	ldr	r2, [pc, #84]	; (403904 <xTimerGenericCommand+0x60>)
  4038b0:	6810      	ldr	r0, [r2, #0]
  4038b2:	b320      	cbz	r0, 4038fe <xTimerGenericCommand+0x5a>
  4038b4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4038b6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4038b8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4038ba:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4038bc:	2905      	cmp	r1, #5
  4038be:	dc19      	bgt.n	4038f4 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4038c0:	4b11      	ldr	r3, [pc, #68]	; (403908 <xTimerGenericCommand+0x64>)
  4038c2:	4798      	blx	r3
  4038c4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4038c6:	f04f 0300 	mov.w	r3, #0
  4038ca:	bf0c      	ite	eq
  4038cc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4038ce:	461a      	movne	r2, r3
  4038d0:	4669      	mov	r1, sp
  4038d2:	480c      	ldr	r0, [pc, #48]	; (403904 <xTimerGenericCommand+0x60>)
  4038d4:	6800      	ldr	r0, [r0, #0]
  4038d6:	4c0d      	ldr	r4, [pc, #52]	; (40390c <xTimerGenericCommand+0x68>)
  4038d8:	47a0      	blx	r4
}
  4038da:	b005      	add	sp, #20
  4038dc:	bd30      	pop	{r4, r5, pc}
  4038de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038e2:	b672      	cpsid	i
  4038e4:	f383 8811 	msr	BASEPRI, r3
  4038e8:	f3bf 8f6f 	isb	sy
  4038ec:	f3bf 8f4f 	dsb	sy
  4038f0:	b662      	cpsie	i
  4038f2:	e7fe      	b.n	4038f2 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4038f4:	2300      	movs	r3, #0
  4038f6:	4669      	mov	r1, sp
  4038f8:	4c05      	ldr	r4, [pc, #20]	; (403910 <xTimerGenericCommand+0x6c>)
  4038fa:	47a0      	blx	r4
  4038fc:	e7ed      	b.n	4038da <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4038fe:	2000      	movs	r0, #0
	return xReturn;
  403900:	e7eb      	b.n	4038da <xTimerGenericCommand+0x36>
  403902:	bf00      	nop
  403904:	2040c758 	.word	0x2040c758
  403908:	004035e1 	.word	0x004035e1
  40390c:	00402671 	.word	0x00402671
  403910:	00402855 	.word	0x00402855

00403914 <prvSampleTimeNow>:
{
  403914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403918:	b082      	sub	sp, #8
  40391a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  40391c:	4b24      	ldr	r3, [pc, #144]	; (4039b0 <prvSampleTimeNow+0x9c>)
  40391e:	4798      	blx	r3
  403920:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403922:	4b24      	ldr	r3, [pc, #144]	; (4039b4 <prvSampleTimeNow+0xa0>)
  403924:	681b      	ldr	r3, [r3, #0]
  403926:	4298      	cmp	r0, r3
  403928:	d31b      	bcc.n	403962 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  40392a:	2300      	movs	r3, #0
  40392c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403930:	4b20      	ldr	r3, [pc, #128]	; (4039b4 <prvSampleTimeNow+0xa0>)
  403932:	601f      	str	r7, [r3, #0]
}
  403934:	4638      	mov	r0, r7
  403936:	b002      	add	sp, #8
  403938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40393c:	2100      	movs	r1, #0
  40393e:	9100      	str	r1, [sp, #0]
  403940:	460b      	mov	r3, r1
  403942:	4652      	mov	r2, sl
  403944:	4620      	mov	r0, r4
  403946:	4c1c      	ldr	r4, [pc, #112]	; (4039b8 <prvSampleTimeNow+0xa4>)
  403948:	47a0      	blx	r4
				configASSERT( xResult );
  40394a:	b960      	cbnz	r0, 403966 <prvSampleTimeNow+0x52>
  40394c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403950:	b672      	cpsid	i
  403952:	f383 8811 	msr	BASEPRI, r3
  403956:	f3bf 8f6f 	isb	sy
  40395a:	f3bf 8f4f 	dsb	sy
  40395e:	b662      	cpsie	i
  403960:	e7fe      	b.n	403960 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403962:	4d16      	ldr	r5, [pc, #88]	; (4039bc <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403964:	4e16      	ldr	r6, [pc, #88]	; (4039c0 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403966:	682b      	ldr	r3, [r5, #0]
  403968:	681a      	ldr	r2, [r3, #0]
  40396a:	b1c2      	cbz	r2, 40399e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40396c:	68db      	ldr	r3, [r3, #12]
  40396e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403972:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403974:	f104 0904 	add.w	r9, r4, #4
  403978:	4648      	mov	r0, r9
  40397a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40397c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40397e:	4620      	mov	r0, r4
  403980:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403982:	69e3      	ldr	r3, [r4, #28]
  403984:	2b01      	cmp	r3, #1
  403986:	d1ee      	bne.n	403966 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403988:	69a3      	ldr	r3, [r4, #24]
  40398a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  40398c:	459a      	cmp	sl, r3
  40398e:	d2d5      	bcs.n	40393c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403990:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403992:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403994:	4649      	mov	r1, r9
  403996:	6828      	ldr	r0, [r5, #0]
  403998:	4b0a      	ldr	r3, [pc, #40]	; (4039c4 <prvSampleTimeNow+0xb0>)
  40399a:	4798      	blx	r3
  40399c:	e7e3      	b.n	403966 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40399e:	4a0a      	ldr	r2, [pc, #40]	; (4039c8 <prvSampleTimeNow+0xb4>)
  4039a0:	6810      	ldr	r0, [r2, #0]
  4039a2:	4906      	ldr	r1, [pc, #24]	; (4039bc <prvSampleTimeNow+0xa8>)
  4039a4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4039a6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4039a8:	2301      	movs	r3, #1
  4039aa:	f8c8 3000 	str.w	r3, [r8]
  4039ae:	e7bf      	b.n	403930 <prvSampleTimeNow+0x1c>
  4039b0:	00402f05 	.word	0x00402f05
  4039b4:	2040c754 	.word	0x2040c754
  4039b8:	004038a5 	.word	0x004038a5
  4039bc:	2040c724 	.word	0x2040c724
  4039c0:	00401fb9 	.word	0x00401fb9
  4039c4:	00401f85 	.word	0x00401f85
  4039c8:	2040c728 	.word	0x2040c728

004039cc <prvTimerTask>:
{
  4039cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4039d0:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4039d2:	4e75      	ldr	r6, [pc, #468]	; (403ba8 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4039d4:	4f75      	ldr	r7, [pc, #468]	; (403bac <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4039d6:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403bd4 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4039da:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403bd8 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4039de:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4039e0:	681a      	ldr	r2, [r3, #0]
  4039e2:	2a00      	cmp	r2, #0
  4039e4:	f000 80ce 	beq.w	403b84 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4039e8:	68db      	ldr	r3, [r3, #12]
  4039ea:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4039ec:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4039ee:	a804      	add	r0, sp, #16
  4039f0:	4b6f      	ldr	r3, [pc, #444]	; (403bb0 <prvTimerTask+0x1e4>)
  4039f2:	4798      	blx	r3
  4039f4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4039f6:	9b04      	ldr	r3, [sp, #16]
  4039f8:	2b00      	cmp	r3, #0
  4039fa:	d144      	bne.n	403a86 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4039fc:	42a0      	cmp	r0, r4
  4039fe:	d212      	bcs.n	403a26 <prvTimerTask+0x5a>
  403a00:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403a02:	1b61      	subs	r1, r4, r5
  403a04:	4b6b      	ldr	r3, [pc, #428]	; (403bb4 <prvTimerTask+0x1e8>)
  403a06:	6818      	ldr	r0, [r3, #0]
  403a08:	4b6b      	ldr	r3, [pc, #428]	; (403bb8 <prvTimerTask+0x1ec>)
  403a0a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403a0c:	4b6b      	ldr	r3, [pc, #428]	; (403bbc <prvTimerTask+0x1f0>)
  403a0e:	4798      	blx	r3
  403a10:	2800      	cmp	r0, #0
  403a12:	d13a      	bne.n	403a8a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403a18:	f8c9 3000 	str.w	r3, [r9]
  403a1c:	f3bf 8f4f 	dsb	sy
  403a20:	f3bf 8f6f 	isb	sy
  403a24:	e031      	b.n	403a8a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403a26:	4b65      	ldr	r3, [pc, #404]	; (403bbc <prvTimerTask+0x1f0>)
  403a28:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403a2a:	6833      	ldr	r3, [r6, #0]
  403a2c:	68db      	ldr	r3, [r3, #12]
  403a2e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403a32:	f10a 0004 	add.w	r0, sl, #4
  403a36:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403a38:	f8da 301c 	ldr.w	r3, [sl, #28]
  403a3c:	2b01      	cmp	r3, #1
  403a3e:	d004      	beq.n	403a4a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403a40:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403a44:	4650      	mov	r0, sl
  403a46:	4798      	blx	r3
  403a48:	e01f      	b.n	403a8a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403a4a:	f8da 1018 	ldr.w	r1, [sl, #24]
  403a4e:	4623      	mov	r3, r4
  403a50:	462a      	mov	r2, r5
  403a52:	4421      	add	r1, r4
  403a54:	4650      	mov	r0, sl
  403a56:	4d5a      	ldr	r5, [pc, #360]	; (403bc0 <prvTimerTask+0x1f4>)
  403a58:	47a8      	blx	r5
  403a5a:	2801      	cmp	r0, #1
  403a5c:	d1f0      	bne.n	403a40 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403a5e:	2100      	movs	r1, #0
  403a60:	9100      	str	r1, [sp, #0]
  403a62:	460b      	mov	r3, r1
  403a64:	4622      	mov	r2, r4
  403a66:	4650      	mov	r0, sl
  403a68:	4c56      	ldr	r4, [pc, #344]	; (403bc4 <prvTimerTask+0x1f8>)
  403a6a:	47a0      	blx	r4
			configASSERT( xResult );
  403a6c:	2800      	cmp	r0, #0
  403a6e:	d1e7      	bne.n	403a40 <prvTimerTask+0x74>
  403a70:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a74:	b672      	cpsid	i
  403a76:	f383 8811 	msr	BASEPRI, r3
  403a7a:	f3bf 8f6f 	isb	sy
  403a7e:	f3bf 8f4f 	dsb	sy
  403a82:	b662      	cpsie	i
  403a84:	e7fe      	b.n	403a84 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403a86:	4b4d      	ldr	r3, [pc, #308]	; (403bbc <prvTimerTask+0x1f0>)
  403a88:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403a8a:	4d4a      	ldr	r5, [pc, #296]	; (403bb4 <prvTimerTask+0x1e8>)
  403a8c:	4c4e      	ldr	r4, [pc, #312]	; (403bc8 <prvTimerTask+0x1fc>)
  403a8e:	e006      	b.n	403a9e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403a90:	9907      	ldr	r1, [sp, #28]
  403a92:	9806      	ldr	r0, [sp, #24]
  403a94:	9b05      	ldr	r3, [sp, #20]
  403a96:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403a98:	9b04      	ldr	r3, [sp, #16]
  403a9a:	2b00      	cmp	r3, #0
  403a9c:	da09      	bge.n	403ab2 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403a9e:	2300      	movs	r3, #0
  403aa0:	461a      	mov	r2, r3
  403aa2:	a904      	add	r1, sp, #16
  403aa4:	6828      	ldr	r0, [r5, #0]
  403aa6:	47a0      	blx	r4
  403aa8:	2800      	cmp	r0, #0
  403aaa:	d098      	beq.n	4039de <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403aac:	9b04      	ldr	r3, [sp, #16]
  403aae:	2b00      	cmp	r3, #0
  403ab0:	dbee      	blt.n	403a90 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403ab2:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403ab6:	f8da 3014 	ldr.w	r3, [sl, #20]
  403aba:	b113      	cbz	r3, 403ac2 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403abc:	f10a 0004 	add.w	r0, sl, #4
  403ac0:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403ac2:	a803      	add	r0, sp, #12
  403ac4:	4b3a      	ldr	r3, [pc, #232]	; (403bb0 <prvTimerTask+0x1e4>)
  403ac6:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403ac8:	9b04      	ldr	r3, [sp, #16]
  403aca:	2b09      	cmp	r3, #9
  403acc:	d8e7      	bhi.n	403a9e <prvTimerTask+0xd2>
  403ace:	a201      	add	r2, pc, #4	; (adr r2, 403ad4 <prvTimerTask+0x108>)
  403ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403ad4:	00403afd 	.word	0x00403afd
  403ad8:	00403afd 	.word	0x00403afd
  403adc:	00403afd 	.word	0x00403afd
  403ae0:	00403a9f 	.word	0x00403a9f
  403ae4:	00403b51 	.word	0x00403b51
  403ae8:	00403b7d 	.word	0x00403b7d
  403aec:	00403afd 	.word	0x00403afd
  403af0:	00403afd 	.word	0x00403afd
  403af4:	00403a9f 	.word	0x00403a9f
  403af8:	00403b51 	.word	0x00403b51
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403afc:	9c05      	ldr	r4, [sp, #20]
  403afe:	f8da 1018 	ldr.w	r1, [sl, #24]
  403b02:	4623      	mov	r3, r4
  403b04:	4602      	mov	r2, r0
  403b06:	4421      	add	r1, r4
  403b08:	4650      	mov	r0, sl
  403b0a:	4c2d      	ldr	r4, [pc, #180]	; (403bc0 <prvTimerTask+0x1f4>)
  403b0c:	47a0      	blx	r4
  403b0e:	2801      	cmp	r0, #1
  403b10:	d1bc      	bne.n	403a8c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403b12:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403b16:	4650      	mov	r0, sl
  403b18:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403b1a:	f8da 301c 	ldr.w	r3, [sl, #28]
  403b1e:	2b01      	cmp	r3, #1
  403b20:	d1b4      	bne.n	403a8c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403b22:	f8da 2018 	ldr.w	r2, [sl, #24]
  403b26:	2100      	movs	r1, #0
  403b28:	9100      	str	r1, [sp, #0]
  403b2a:	460b      	mov	r3, r1
  403b2c:	9805      	ldr	r0, [sp, #20]
  403b2e:	4402      	add	r2, r0
  403b30:	4650      	mov	r0, sl
  403b32:	4c24      	ldr	r4, [pc, #144]	; (403bc4 <prvTimerTask+0x1f8>)
  403b34:	47a0      	blx	r4
							configASSERT( xResult );
  403b36:	2800      	cmp	r0, #0
  403b38:	d1a8      	bne.n	403a8c <prvTimerTask+0xc0>
  403b3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b3e:	b672      	cpsid	i
  403b40:	f383 8811 	msr	BASEPRI, r3
  403b44:	f3bf 8f6f 	isb	sy
  403b48:	f3bf 8f4f 	dsb	sy
  403b4c:	b662      	cpsie	i
  403b4e:	e7fe      	b.n	403b4e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403b50:	9905      	ldr	r1, [sp, #20]
  403b52:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403b56:	b131      	cbz	r1, 403b66 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403b58:	4603      	mov	r3, r0
  403b5a:	4602      	mov	r2, r0
  403b5c:	4401      	add	r1, r0
  403b5e:	4650      	mov	r0, sl
  403b60:	4c17      	ldr	r4, [pc, #92]	; (403bc0 <prvTimerTask+0x1f4>)
  403b62:	47a0      	blx	r4
  403b64:	e792      	b.n	403a8c <prvTimerTask+0xc0>
  403b66:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b6a:	b672      	cpsid	i
  403b6c:	f383 8811 	msr	BASEPRI, r3
  403b70:	f3bf 8f6f 	isb	sy
  403b74:	f3bf 8f4f 	dsb	sy
  403b78:	b662      	cpsie	i
  403b7a:	e7fe      	b.n	403b7a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403b7c:	4650      	mov	r0, sl
  403b7e:	4b13      	ldr	r3, [pc, #76]	; (403bcc <prvTimerTask+0x200>)
  403b80:	4798      	blx	r3
  403b82:	e783      	b.n	403a8c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403b84:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403b86:	a804      	add	r0, sp, #16
  403b88:	4b09      	ldr	r3, [pc, #36]	; (403bb0 <prvTimerTask+0x1e4>)
  403b8a:	4798      	blx	r3
  403b8c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403b8e:	9b04      	ldr	r3, [sp, #16]
  403b90:	2b00      	cmp	r3, #0
  403b92:	f47f af78 	bne.w	403a86 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403b96:	4b0e      	ldr	r3, [pc, #56]	; (403bd0 <prvTimerTask+0x204>)
  403b98:	681b      	ldr	r3, [r3, #0]
  403b9a:	681a      	ldr	r2, [r3, #0]
  403b9c:	fab2 f282 	clz	r2, r2
  403ba0:	0952      	lsrs	r2, r2, #5
  403ba2:	2400      	movs	r4, #0
  403ba4:	e72d      	b.n	403a02 <prvTimerTask+0x36>
  403ba6:	bf00      	nop
  403ba8:	2040c724 	.word	0x2040c724
  403bac:	00402ef5 	.word	0x00402ef5
  403bb0:	00403915 	.word	0x00403915
  403bb4:	2040c758 	.word	0x2040c758
  403bb8:	00402b59 	.word	0x00402b59
  403bbc:	0040305d 	.word	0x0040305d
  403bc0:	0040377d 	.word	0x0040377d
  403bc4:	004038a5 	.word	0x004038a5
  403bc8:	00402955 	.word	0x00402955
  403bcc:	00402369 	.word	0x00402369
  403bd0:	2040c728 	.word	0x2040c728
  403bd4:	e000ed04 	.word	0xe000ed04
  403bd8:	00401fb9 	.word	0x00401fb9

00403bdc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bde:	b083      	sub	sp, #12
  403be0:	4605      	mov	r5, r0
  403be2:	460c      	mov	r4, r1
	uint32_t val = 0;
  403be4:	2300      	movs	r3, #0
  403be6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403be8:	4b2a      	ldr	r3, [pc, #168]	; (403c94 <usart_serial_getchar+0xb8>)
  403bea:	4298      	cmp	r0, r3
  403bec:	d013      	beq.n	403c16 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403bee:	4b2a      	ldr	r3, [pc, #168]	; (403c98 <usart_serial_getchar+0xbc>)
  403bf0:	4298      	cmp	r0, r3
  403bf2:	d018      	beq.n	403c26 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403bf4:	4b29      	ldr	r3, [pc, #164]	; (403c9c <usart_serial_getchar+0xc0>)
  403bf6:	4298      	cmp	r0, r3
  403bf8:	d01d      	beq.n	403c36 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403bfa:	4b29      	ldr	r3, [pc, #164]	; (403ca0 <usart_serial_getchar+0xc4>)
  403bfc:	429d      	cmp	r5, r3
  403bfe:	d022      	beq.n	403c46 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403c00:	4b28      	ldr	r3, [pc, #160]	; (403ca4 <usart_serial_getchar+0xc8>)
  403c02:	429d      	cmp	r5, r3
  403c04:	d027      	beq.n	403c56 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403c06:	4b28      	ldr	r3, [pc, #160]	; (403ca8 <usart_serial_getchar+0xcc>)
  403c08:	429d      	cmp	r5, r3
  403c0a:	d02e      	beq.n	403c6a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403c0c:	4b27      	ldr	r3, [pc, #156]	; (403cac <usart_serial_getchar+0xd0>)
  403c0e:	429d      	cmp	r5, r3
  403c10:	d035      	beq.n	403c7e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403c12:	b003      	add	sp, #12
  403c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403c16:	461f      	mov	r7, r3
  403c18:	4e25      	ldr	r6, [pc, #148]	; (403cb0 <usart_serial_getchar+0xd4>)
  403c1a:	4621      	mov	r1, r4
  403c1c:	4638      	mov	r0, r7
  403c1e:	47b0      	blx	r6
  403c20:	2800      	cmp	r0, #0
  403c22:	d1fa      	bne.n	403c1a <usart_serial_getchar+0x3e>
  403c24:	e7e9      	b.n	403bfa <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403c26:	461f      	mov	r7, r3
  403c28:	4e21      	ldr	r6, [pc, #132]	; (403cb0 <usart_serial_getchar+0xd4>)
  403c2a:	4621      	mov	r1, r4
  403c2c:	4638      	mov	r0, r7
  403c2e:	47b0      	blx	r6
  403c30:	2800      	cmp	r0, #0
  403c32:	d1fa      	bne.n	403c2a <usart_serial_getchar+0x4e>
  403c34:	e7e4      	b.n	403c00 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403c36:	461f      	mov	r7, r3
  403c38:	4e1d      	ldr	r6, [pc, #116]	; (403cb0 <usart_serial_getchar+0xd4>)
  403c3a:	4621      	mov	r1, r4
  403c3c:	4638      	mov	r0, r7
  403c3e:	47b0      	blx	r6
  403c40:	2800      	cmp	r0, #0
  403c42:	d1fa      	bne.n	403c3a <usart_serial_getchar+0x5e>
  403c44:	e7df      	b.n	403c06 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403c46:	461f      	mov	r7, r3
  403c48:	4e19      	ldr	r6, [pc, #100]	; (403cb0 <usart_serial_getchar+0xd4>)
  403c4a:	4621      	mov	r1, r4
  403c4c:	4638      	mov	r0, r7
  403c4e:	47b0      	blx	r6
  403c50:	2800      	cmp	r0, #0
  403c52:	d1fa      	bne.n	403c4a <usart_serial_getchar+0x6e>
  403c54:	e7da      	b.n	403c0c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403c56:	461e      	mov	r6, r3
  403c58:	4d16      	ldr	r5, [pc, #88]	; (403cb4 <usart_serial_getchar+0xd8>)
  403c5a:	a901      	add	r1, sp, #4
  403c5c:	4630      	mov	r0, r6
  403c5e:	47a8      	blx	r5
  403c60:	2800      	cmp	r0, #0
  403c62:	d1fa      	bne.n	403c5a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403c64:	9b01      	ldr	r3, [sp, #4]
  403c66:	7023      	strb	r3, [r4, #0]
  403c68:	e7d3      	b.n	403c12 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c6a:	461e      	mov	r6, r3
  403c6c:	4d11      	ldr	r5, [pc, #68]	; (403cb4 <usart_serial_getchar+0xd8>)
  403c6e:	a901      	add	r1, sp, #4
  403c70:	4630      	mov	r0, r6
  403c72:	47a8      	blx	r5
  403c74:	2800      	cmp	r0, #0
  403c76:	d1fa      	bne.n	403c6e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403c78:	9b01      	ldr	r3, [sp, #4]
  403c7a:	7023      	strb	r3, [r4, #0]
  403c7c:	e7c9      	b.n	403c12 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c7e:	461e      	mov	r6, r3
  403c80:	4d0c      	ldr	r5, [pc, #48]	; (403cb4 <usart_serial_getchar+0xd8>)
  403c82:	a901      	add	r1, sp, #4
  403c84:	4630      	mov	r0, r6
  403c86:	47a8      	blx	r5
  403c88:	2800      	cmp	r0, #0
  403c8a:	d1fa      	bne.n	403c82 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403c8c:	9b01      	ldr	r3, [sp, #4]
  403c8e:	7023      	strb	r3, [r4, #0]
}
  403c90:	e7bf      	b.n	403c12 <usart_serial_getchar+0x36>
  403c92:	bf00      	nop
  403c94:	400e0800 	.word	0x400e0800
  403c98:	400e0a00 	.word	0x400e0a00
  403c9c:	400e1a00 	.word	0x400e1a00
  403ca0:	400e1c00 	.word	0x400e1c00
  403ca4:	40024000 	.word	0x40024000
  403ca8:	40028000 	.word	0x40028000
  403cac:	4002c000 	.word	0x4002c000
  403cb0:	00401b7b 	.word	0x00401b7b
  403cb4:	00401c87 	.word	0x00401c87

00403cb8 <usart_serial_putchar>:
{
  403cb8:	b570      	push	{r4, r5, r6, lr}
  403cba:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403cbc:	4b2a      	ldr	r3, [pc, #168]	; (403d68 <usart_serial_putchar+0xb0>)
  403cbe:	4298      	cmp	r0, r3
  403cc0:	d013      	beq.n	403cea <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403cc2:	4b2a      	ldr	r3, [pc, #168]	; (403d6c <usart_serial_putchar+0xb4>)
  403cc4:	4298      	cmp	r0, r3
  403cc6:	d019      	beq.n	403cfc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403cc8:	4b29      	ldr	r3, [pc, #164]	; (403d70 <usart_serial_putchar+0xb8>)
  403cca:	4298      	cmp	r0, r3
  403ccc:	d01f      	beq.n	403d0e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403cce:	4b29      	ldr	r3, [pc, #164]	; (403d74 <usart_serial_putchar+0xbc>)
  403cd0:	4298      	cmp	r0, r3
  403cd2:	d025      	beq.n	403d20 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403cd4:	4b28      	ldr	r3, [pc, #160]	; (403d78 <usart_serial_putchar+0xc0>)
  403cd6:	4298      	cmp	r0, r3
  403cd8:	d02b      	beq.n	403d32 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403cda:	4b28      	ldr	r3, [pc, #160]	; (403d7c <usart_serial_putchar+0xc4>)
  403cdc:	4298      	cmp	r0, r3
  403cde:	d031      	beq.n	403d44 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403ce0:	4b27      	ldr	r3, [pc, #156]	; (403d80 <usart_serial_putchar+0xc8>)
  403ce2:	4298      	cmp	r0, r3
  403ce4:	d037      	beq.n	403d56 <usart_serial_putchar+0x9e>
	return 0;
  403ce6:	2000      	movs	r0, #0
}
  403ce8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403cea:	461e      	mov	r6, r3
  403cec:	4d25      	ldr	r5, [pc, #148]	; (403d84 <usart_serial_putchar+0xcc>)
  403cee:	4621      	mov	r1, r4
  403cf0:	4630      	mov	r0, r6
  403cf2:	47a8      	blx	r5
  403cf4:	2800      	cmp	r0, #0
  403cf6:	d1fa      	bne.n	403cee <usart_serial_putchar+0x36>
		return 1;
  403cf8:	2001      	movs	r0, #1
  403cfa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403cfc:	461e      	mov	r6, r3
  403cfe:	4d21      	ldr	r5, [pc, #132]	; (403d84 <usart_serial_putchar+0xcc>)
  403d00:	4621      	mov	r1, r4
  403d02:	4630      	mov	r0, r6
  403d04:	47a8      	blx	r5
  403d06:	2800      	cmp	r0, #0
  403d08:	d1fa      	bne.n	403d00 <usart_serial_putchar+0x48>
		return 1;
  403d0a:	2001      	movs	r0, #1
  403d0c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d0e:	461e      	mov	r6, r3
  403d10:	4d1c      	ldr	r5, [pc, #112]	; (403d84 <usart_serial_putchar+0xcc>)
  403d12:	4621      	mov	r1, r4
  403d14:	4630      	mov	r0, r6
  403d16:	47a8      	blx	r5
  403d18:	2800      	cmp	r0, #0
  403d1a:	d1fa      	bne.n	403d12 <usart_serial_putchar+0x5a>
		return 1;
  403d1c:	2001      	movs	r0, #1
  403d1e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403d20:	461e      	mov	r6, r3
  403d22:	4d18      	ldr	r5, [pc, #96]	; (403d84 <usart_serial_putchar+0xcc>)
  403d24:	4621      	mov	r1, r4
  403d26:	4630      	mov	r0, r6
  403d28:	47a8      	blx	r5
  403d2a:	2800      	cmp	r0, #0
  403d2c:	d1fa      	bne.n	403d24 <usart_serial_putchar+0x6c>
		return 1;
  403d2e:	2001      	movs	r0, #1
  403d30:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d32:	461e      	mov	r6, r3
  403d34:	4d14      	ldr	r5, [pc, #80]	; (403d88 <usart_serial_putchar+0xd0>)
  403d36:	4621      	mov	r1, r4
  403d38:	4630      	mov	r0, r6
  403d3a:	47a8      	blx	r5
  403d3c:	2800      	cmp	r0, #0
  403d3e:	d1fa      	bne.n	403d36 <usart_serial_putchar+0x7e>
		return 1;
  403d40:	2001      	movs	r0, #1
  403d42:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d44:	461e      	mov	r6, r3
  403d46:	4d10      	ldr	r5, [pc, #64]	; (403d88 <usart_serial_putchar+0xd0>)
  403d48:	4621      	mov	r1, r4
  403d4a:	4630      	mov	r0, r6
  403d4c:	47a8      	blx	r5
  403d4e:	2800      	cmp	r0, #0
  403d50:	d1fa      	bne.n	403d48 <usart_serial_putchar+0x90>
		return 1;
  403d52:	2001      	movs	r0, #1
  403d54:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d56:	461e      	mov	r6, r3
  403d58:	4d0b      	ldr	r5, [pc, #44]	; (403d88 <usart_serial_putchar+0xd0>)
  403d5a:	4621      	mov	r1, r4
  403d5c:	4630      	mov	r0, r6
  403d5e:	47a8      	blx	r5
  403d60:	2800      	cmp	r0, #0
  403d62:	d1fa      	bne.n	403d5a <usart_serial_putchar+0xa2>
		return 1;
  403d64:	2001      	movs	r0, #1
  403d66:	bd70      	pop	{r4, r5, r6, pc}
  403d68:	400e0800 	.word	0x400e0800
  403d6c:	400e0a00 	.word	0x400e0a00
  403d70:	400e1a00 	.word	0x400e1a00
  403d74:	400e1c00 	.word	0x400e1c00
  403d78:	40024000 	.word	0x40024000
  403d7c:	40028000 	.word	0x40028000
  403d80:	4002c000 	.word	0x4002c000
  403d84:	00401b69 	.word	0x00401b69
  403d88:	00401c71 	.word	0x00401c71

00403d8c <vApplicationStackOverflowHook>:
/**
* \brief Called if stack overflow during execution
*/
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
signed char *pcTaskName)
{
  403d8c:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403d8e:	460a      	mov	r2, r1
  403d90:	4601      	mov	r1, r0
  403d92:	4802      	ldr	r0, [pc, #8]	; (403d9c <vApplicationStackOverflowHook+0x10>)
  403d94:	4b02      	ldr	r3, [pc, #8]	; (403da0 <vApplicationStackOverflowHook+0x14>)
  403d96:	4798      	blx	r3
  403d98:	e7fe      	b.n	403d98 <vApplicationStackOverflowHook+0xc>
  403d9a:	bf00      	nop
  403d9c:	004072d4 	.word	0x004072d4
  403da0:	00404269 	.word	0x00404269

00403da4 <vApplicationTickHook>:

/**
* \brief This function is called by FreeRTOS each tick
*/
extern void vApplicationTickHook(void)
{
  403da4:	4770      	bx	lr

00403da6 <vApplicationMallocFailedHook>:
  403da6:	f04f 0380 	mov.w	r3, #128	; 0x80
  403daa:	b672      	cpsid	i
  403dac:	f383 8811 	msr	BASEPRI, r3
  403db0:	f3bf 8f6f 	isb	sy
  403db4:	f3bf 8f4f 	dsb	sy
  403db8:	b662      	cpsie	i
  403dba:	e7fe      	b.n	403dba <vApplicationMallocFailedHook+0x14>

00403dbc <draw_button_new>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void draw_button_new(t_but but){
  403dbc:	b084      	sub	sp, #16
  403dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403dc0:	ac06      	add	r4, sp, #24
  403dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  403dc6:	4604      	mov	r4, r0
  403dc8:	9d07      	ldr	r5, [sp, #28]
  403dca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403dcc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	uint32_t color;
	if(but.status)
  403dce:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  403dd2:	b983      	cbnz	r3, 403df6 <draw_button_new+0x3a>
	color = but.colorOn;
	else
	color = but.colorOff;
  403dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24

	ili9488_set_foreground_color(COLOR_CONVERT(color));
  403dd6:	4809      	ldr	r0, [pc, #36]	; (403dfc <draw_button_new+0x40>)
  403dd8:	4018      	ands	r0, r3
  403dda:	4b09      	ldr	r3, [pc, #36]	; (403e00 <draw_button_new+0x44>)
  403ddc:	4798      	blx	r3
	ili9488_draw_filled_rectangle(but.x-but.width/2, but.y-but.height/2,
  403dde:	0860      	lsrs	r0, r4, #1
  403de0:	0869      	lsrs	r1, r5, #1
  403de2:	19cb      	adds	r3, r1, r7
  403de4:	1982      	adds	r2, r0, r6
  403de6:	1a79      	subs	r1, r7, r1
  403de8:	1a30      	subs	r0, r6, r0
  403dea:	4c06      	ldr	r4, [pc, #24]	; (403e04 <draw_button_new+0x48>)
  403dec:	47a0      	blx	r4
	but.x+but.width/2, but.y+but.height/2);
}
  403dee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  403df2:	b004      	add	sp, #16
  403df4:	4770      	bx	lr
	color = but.colorOn;
  403df6:	9b08      	ldr	r3, [sp, #32]
  403df8:	e7ed      	b.n	403dd6 <draw_button_new+0x1a>
  403dfa:	bf00      	nop
  403dfc:	00fcfcfc 	.word	0x00fcfcfc
  403e00:	00400fc9 	.word	0x00400fc9
  403e04:	00401219 	.word	0x00401219

00403e08 <draw_screen>:

void draw_screen(void) {
  403e08:	b510      	push	{r4, lr}
  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  403e0a:	4806      	ldr	r0, [pc, #24]	; (403e24 <draw_screen+0x1c>)
  403e0c:	4b06      	ldr	r3, [pc, #24]	; (403e28 <draw_screen+0x20>)
  403e0e:	4798      	blx	r3
  ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  403e10:	f240 13df 	movw	r3, #479	; 0x1df
  403e14:	f240 123f 	movw	r2, #319	; 0x13f
  403e18:	2100      	movs	r1, #0
  403e1a:	4608      	mov	r0, r1
  403e1c:	4c03      	ldr	r4, [pc, #12]	; (403e2c <draw_screen+0x24>)
  403e1e:	47a0      	blx	r4
  403e20:	bd10      	pop	{r4, pc}
  403e22:	bf00      	nop
  403e24:	00fcfcfc 	.word	0x00fcfcfc
  403e28:	00400fc9 	.word	0x00400fc9
  403e2c:	00401219 	.word	0x00401219

00403e30 <mxt_handler>:
    p++;
  }
}

void mxt_handler(struct mxt_device *device, uint *x, uint *y)
{
  403e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e34:	b084      	sub	sp, #16
  403e36:	4605      	mov	r5, r0
  403e38:	4689      	mov	r9, r1
  403e3a:	4690      	mov	r8, r2

  /* Temporary touch event data struct */
  struct mxt_touch_event touch_event;
  
  /* first touch only */
  uint first = 0;
  403e3c:	f04f 0a00 	mov.w	sl, #0
  uint8_t i = 0; /* Iterator */
  403e40:	4654      	mov	r4, sl
  /* Collect touch events and put the data in a string,
  * maximum 2 events at the time */
  do {

    /* Read next next touch event in the queue, discard if read fails */
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403e42:	4f15      	ldr	r7, [pc, #84]	; (403e98 <mxt_handler+0x68>)
    
    i++;

    /* Check if there is still messages in the queue and
    * if we have reached the maximum numbers of events */
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403e44:	4e15      	ldr	r6, [pc, #84]	; (403e9c <mxt_handler+0x6c>)
  403e46:	e008      	b.n	403e5a <mxt_handler+0x2a>
    i++;
  403e48:	3401      	adds	r4, #1
  403e4a:	b2e4      	uxtb	r4, r4
  403e4c:	f04f 0a01 	mov.w	sl, #1
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403e50:	4628      	mov	r0, r5
  403e52:	47b0      	blx	r6
  403e54:	2c02      	cmp	r4, #2
  403e56:	d81b      	bhi.n	403e90 <mxt_handler+0x60>
  403e58:	b1d0      	cbz	r0, 403e90 <mxt_handler+0x60>
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403e5a:	a901      	add	r1, sp, #4
  403e5c:	4628      	mov	r0, r5
  403e5e:	47b8      	blx	r7
  403e60:	2800      	cmp	r0, #0
  403e62:	d1f5      	bne.n	403e50 <mxt_handler+0x20>
    if(first == 0 ){
  403e64:	f1ba 0f00 	cmp.w	sl, #0
  403e68:	d1ee      	bne.n	403e48 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  403e6a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  403e6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403e72:	f3c3 1393 	ubfx	r3, r3, #6, #20
  403e76:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
      *x = convert_axis_system_x(touch_event.y);
  403e7a:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  403e7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  return ILI9488_LCD_HEIGHT*touch_x/4096;
  403e82:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  403e86:	f3c3 13d3 	ubfx	r3, r3, #7, #20
      *y = convert_axis_system_y(touch_event.x);
  403e8a:	f8c8 3000 	str.w	r3, [r8]
  403e8e:	e7db      	b.n	403e48 <mxt_handler+0x18>
}
  403e90:	b004      	add	sp, #16
  403e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e96:	bf00      	nop
  403e98:	004007e9 	.word	0x004007e9
  403e9c:	00400779 	.word	0x00400779

00403ea0 <task_mxt>:

/************************************************************************/
/* tasks                                                                */
/************************************************************************/

void task_mxt(void){
  403ea0:	b580      	push	{r7, lr}
  403ea2:	b08a      	sub	sp, #40	; 0x28
  
  struct mxt_device device; /* Device data container */
  mxt_init(&device);       	/* Initialize the mXT touch device */
  403ea4:	a802      	add	r0, sp, #8
  403ea6:	4b0c      	ldr	r3, [pc, #48]	; (403ed8 <task_mxt+0x38>)
  403ea8:	4798      	blx	r3
  touchData touch;          /* touch queue data type*/
  
  while (true) {
    /* Check for any pending messages and run message handler if any
    * message is found in the queue */
    if (mxt_is_message_pending(&device)) {
  403eaa:	4c0c      	ldr	r4, [pc, #48]	; (403edc <task_mxt+0x3c>)
      mxt_handler(&device, &touch.x, &touch.y);
  403eac:	4f0c      	ldr	r7, [pc, #48]	; (403ee0 <task_mxt+0x40>)
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403eae:	4e0d      	ldr	r6, [pc, #52]	; (403ee4 <task_mxt+0x44>)
  403eb0:	e002      	b.n	403eb8 <task_mxt+0x18>
    }
    vTaskDelay(100);
  403eb2:	2064      	movs	r0, #100	; 0x64
  403eb4:	4b0c      	ldr	r3, [pc, #48]	; (403ee8 <task_mxt+0x48>)
  403eb6:	4798      	blx	r3
    if (mxt_is_message_pending(&device)) {
  403eb8:	a802      	add	r0, sp, #8
  403eba:	47a0      	blx	r4
  403ebc:	2800      	cmp	r0, #0
  403ebe:	d0f8      	beq.n	403eb2 <task_mxt+0x12>
      mxt_handler(&device, &touch.x, &touch.y);
  403ec0:	aa01      	add	r2, sp, #4
  403ec2:	4669      	mov	r1, sp
  403ec4:	a802      	add	r0, sp, #8
  403ec6:	47b8      	blx	r7
      xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403ec8:	2300      	movs	r3, #0
  403eca:	461a      	mov	r2, r3
  403ecc:	4669      	mov	r1, sp
  403ece:	6830      	ldr	r0, [r6, #0]
  403ed0:	4d06      	ldr	r5, [pc, #24]	; (403eec <task_mxt+0x4c>)
  403ed2:	47a8      	blx	r5
  403ed4:	e7ed      	b.n	403eb2 <task_mxt+0x12>
  403ed6:	bf00      	nop
  403ed8:	00400285 	.word	0x00400285
  403edc:	00400779 	.word	0x00400779
  403ee0:	00403e31 	.word	0x00403e31
  403ee4:	2040c86c 	.word	0x2040c86c
  403ee8:	0040317d 	.word	0x0040317d
  403eec:	00402671 	.word	0x00402671

00403ef0 <process_touch>:
  }
}

int process_touch(t_but botoes[], touchData touch, uint32_t n) {
  403ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ef2:	b083      	sub	sp, #12
  403ef4:	ac02      	add	r4, sp, #8
  403ef6:	e904 0006 	stmdb	r4, {r1, r2}
  403efa:	9e00      	ldr	r6, [sp, #0]
  403efc:	f8dd e004 	ldr.w	lr, [sp, #4]
	
	for(int i = 0; i < n; i++) {
  403f00:	b1eb      	cbz	r3, 403f3e <process_touch+0x4e>
  403f02:	4602      	mov	r2, r0
  403f04:	2000      	movs	r0, #0
  403f06:	e003      	b.n	403f10 <process_touch+0x20>
  403f08:	3001      	adds	r0, #1
  403f0a:	321c      	adds	r2, #28
  403f0c:	4298      	cmp	r0, r3
  403f0e:	d012      	beq.n	403f36 <process_touch+0x46>
		if (touch.x > botoes[i].x - botoes[i].width/2 && touch.x < botoes[i].x + botoes[i].width/2 && touch.y > botoes[i].y - botoes[i].height/2 && touch.y < botoes[i].y + botoes[i].height/2) return i;
  403f10:	6914      	ldr	r4, [r2, #16]
  403f12:	6811      	ldr	r1, [r2, #0]
  403f14:	0849      	lsrs	r1, r1, #1
  403f16:	1a65      	subs	r5, r4, r1
  403f18:	42ae      	cmp	r6, r5
  403f1a:	d9f5      	bls.n	403f08 <process_touch+0x18>
  403f1c:	4421      	add	r1, r4
  403f1e:	428e      	cmp	r6, r1
  403f20:	d2f2      	bcs.n	403f08 <process_touch+0x18>
  403f22:	6954      	ldr	r4, [r2, #20]
  403f24:	6851      	ldr	r1, [r2, #4]
  403f26:	0849      	lsrs	r1, r1, #1
  403f28:	1a65      	subs	r5, r4, r1
  403f2a:	4575      	cmp	r5, lr
  403f2c:	d2ec      	bcs.n	403f08 <process_touch+0x18>
  403f2e:	4421      	add	r1, r4
  403f30:	4571      	cmp	r1, lr
  403f32:	d9e9      	bls.n	403f08 <process_touch+0x18>
  403f34:	e001      	b.n	403f3a <process_touch+0x4a>
	}
	
	return -1;
  403f36:	f04f 30ff 	mov.w	r0, #4294967295
}
  403f3a:	b003      	add	sp, #12
  403f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -1;
  403f3e:	f04f 30ff 	mov.w	r0, #4294967295
  403f42:	e7fa      	b.n	403f3a <process_touch+0x4a>

00403f44 <task_lcd>:

void task_lcd(void){
  403f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403f48:	b0cd      	sub	sp, #308	; 0x134
	xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  403f4a:	2200      	movs	r2, #0
  403f4c:	2108      	movs	r1, #8
  403f4e:	200a      	movs	r0, #10
  403f50:	4b63      	ldr	r3, [pc, #396]	; (4040e0 <task_lcd+0x19c>)
  403f52:	4798      	blx	r3
  403f54:	4b63      	ldr	r3, [pc, #396]	; (4040e4 <task_lcd+0x1a0>)
  403f56:	6018      	str	r0, [r3, #0]
  g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  403f58:	4863      	ldr	r0, [pc, #396]	; (4040e8 <task_lcd+0x1a4>)
  403f5a:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403f5e:	6003      	str	r3, [r0, #0]
  g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  403f60:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  403f64:	6043      	str	r3, [r0, #4]
  g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  403f66:	4b61      	ldr	r3, [pc, #388]	; (4040ec <task_lcd+0x1a8>)
  403f68:	6083      	str	r3, [r0, #8]
  g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  403f6a:	60c3      	str	r3, [r0, #12]
  ili9488_init(&g_ili9488_display_opt);
  403f6c:	4b60      	ldr	r3, [pc, #384]	; (4040f0 <task_lcd+0x1ac>)
  403f6e:	4798      	blx	r3
	configure_lcd();
	draw_screen();
  403f70:	4b60      	ldr	r3, [pc, #384]	; (4040f4 <task_lcd+0x1b0>)
  403f72:	4798      	blx	r3
	//font_draw_text(&digital52, "DEMO - BUT", 0, 0, 1);

	t_but but0 = {.width = 120, .height = 75,
  403f74:	4c60      	ldr	r4, [pc, #384]	; (4040f8 <task_lcd+0x1b4>)
  403f76:	ad45      	add	r5, sp, #276	; 0x114
  403f78:	4626      	mov	r6, r4
  403f7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403f7e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  403f82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		.colorOn = COLOR_TOMATO, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 40, .status = 1 };
	draw_button_new(but0);
  403f86:	ab4c      	add	r3, sp, #304	; 0x130
  403f88:	e913 0007 	ldmdb	r3, {r0, r1, r2}
  403f8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  403f90:	f50d 788a 	add.w	r8, sp, #276	; 0x114
  403f94:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
  403f98:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40410c <task_lcd+0x1c8>
  403f9c:	47c8      	blx	r9
	
	t_but but1 = {.width = 120, .height = 75,
  403f9e:	ad3e      	add	r5, sp, #248	; 0xf8
  403fa0:	f104 061c 	add.w	r6, r4, #28
  403fa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403fa8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  403fac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		.colorOn = COLOR_YELLOW, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 140, .status = 1 };
	draw_button_new(but1);
  403fb0:	ab42      	add	r3, sp, #264	; 0x108
  403fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403fb6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  403fba:	af3e      	add	r7, sp, #248	; 0xf8
  403fbc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  403fc0:	47c8      	blx	r9
	
	t_but but2 = {.width = 120, .height = 75,
  403fc2:	ad37      	add	r5, sp, #220	; 0xdc
  403fc4:	f104 0638 	add.w	r6, r4, #56	; 0x38
  403fc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403fcc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  403fd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		.colorOn = COLOR_GREEN, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 240, .status = 1 };
	draw_button_new(but2);
  403fd4:	ab3b      	add	r3, sp, #236	; 0xec
  403fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403fda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  403fde:	ae37      	add	r6, sp, #220	; 0xdc
  403fe0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  403fe4:	47c8      	blx	r9
	
	t_but but3 = {.width = 120, .height = 75,
  403fe6:	ad30      	add	r5, sp, #192	; 0xc0
  403fe8:	f104 0e54 	add.w	lr, r4, #84	; 0x54
  403fec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  403ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403ff2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  403ff6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		.colorOn = COLOR_MAGENTA, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 340, .status = 1 };
	draw_button_new(but3);
  403ffa:	ab34      	add	r3, sp, #208	; 0xd0
  403ffc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404000:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  404004:	ad30      	add	r5, sp, #192	; 0xc0
  404006:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40400a:	47c8      	blx	r9
	
	t_but but4 = {.width = 120, .height = 75,
  40400c:	f10d 0ea4 	add.w	lr, sp, #164	; 0xa4
  404010:	3470      	adds	r4, #112	; 0x70
  404012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  404014:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  404018:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  40401c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
		.colorOn = COLOR_ORANGE, .colorOff = COLOR_BLACK,
	.x = ILI9488_LCD_WIDTH/2, .y = 440, .status = 1 };
	draw_button_new(but4);
  404020:	ab2d      	add	r3, sp, #180	; 0xb4
  404022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404026:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  40402a:	ac29      	add	r4, sp, #164	; 0xa4
  40402c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  404030:	47c8      	blx	r9

	t_but botoes[] = {but0, but1, but2, but3, but4};
  404032:	f10d 0c18 	add.w	ip, sp, #24
  404036:	46c6      	mov	lr, r8
  404038:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40403c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  404040:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  404044:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  404048:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  40404c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  40404e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  404052:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
  404056:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  40405a:	af14      	add	r7, sp, #80	; 0x50
  40405c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40405e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  404060:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  404064:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  404068:	ae1b      	add	r6, sp, #108	; 0x6c
  40406a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40406c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  40406e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  404072:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  404076:	ad22      	add	r5, sp, #136	; 0x88
  404078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40407a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40407c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  404080:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	// struct local para armazenar msg enviada pela task do mxt
	touchData touch;

	while (true) {
		
		 if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404084:	ac04      	add	r4, sp, #16
  404086:	4e17      	ldr	r6, [pc, #92]	; (4040e4 <task_lcd+0x1a0>)
  404088:	4d1c      	ldr	r5, [pc, #112]	; (4040fc <task_lcd+0x1b8>)
  40408a:	e004      	b.n	404096 <task_lcd+0x152>
			 if(b >= 0){
				 botoes[b].status = !botoes[b].status;
				 draw_button_new(botoes[b]);
			 }

			 printf("x:%d y:%d\n", touch.x, touch.y);
  40408c:	6862      	ldr	r2, [r4, #4]
  40408e:	6821      	ldr	r1, [r4, #0]
  404090:	481b      	ldr	r0, [pc, #108]	; (404100 <task_lcd+0x1bc>)
  404092:	4b1c      	ldr	r3, [pc, #112]	; (404104 <task_lcd+0x1c0>)
  404094:	4798      	blx	r3
		 if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  404096:	2300      	movs	r3, #0
  404098:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40409c:	4621      	mov	r1, r4
  40409e:	6830      	ldr	r0, [r6, #0]
  4040a0:	47a8      	blx	r5
  4040a2:	2800      	cmp	r0, #0
  4040a4:	d0f7      	beq.n	404096 <task_lcd+0x152>
			 int b = process_touch(botoes, touch, sizeof(botoes)/sizeof(botoes[0]));
  4040a6:	2305      	movs	r3, #5
  4040a8:	e894 0006 	ldmia.w	r4, {r1, r2}
  4040ac:	a806      	add	r0, sp, #24
  4040ae:	4f16      	ldr	r7, [pc, #88]	; (404108 <task_lcd+0x1c4>)
  4040b0:	47b8      	blx	r7
			 if(b >= 0){
  4040b2:	2800      	cmp	r0, #0
  4040b4:	dbea      	blt.n	40408c <task_lcd+0x148>
				 botoes[b].status = !botoes[b].status;
  4040b6:	00c3      	lsls	r3, r0, #3
  4040b8:	1a19      	subs	r1, r3, r0
  4040ba:	aa06      	add	r2, sp, #24
  4040bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  4040c0:	7e0a      	ldrb	r2, [r1, #24]
  4040c2:	fab2 f282 	clz	r2, r2
  4040c6:	0952      	lsrs	r2, r2, #5
  4040c8:	760a      	strb	r2, [r1, #24]
				 draw_button_new(botoes[b]);
  4040ca:	460b      	mov	r3, r1
  4040cc:	f101 0210 	add.w	r2, r1, #16
  4040d0:	ca07      	ldmia	r2, {r0, r1, r2}
  4040d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  4040d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4040d8:	4f0c      	ldr	r7, [pc, #48]	; (40410c <task_lcd+0x1c8>)
  4040da:	47b8      	blx	r7
  4040dc:	e7d6      	b.n	40408c <task_lcd+0x148>
  4040de:	bf00      	nop
  4040e0:	004025f5 	.word	0x004025f5
  4040e4:	2040c86c 	.word	0x2040c86c
  4040e8:	2040c85c 	.word	0x2040c85c
  4040ec:	00fcfcfc 	.word	0x00fcfcfc
  4040f0:	00401055 	.word	0x00401055
  4040f4:	00403e09 	.word	0x00403e09
  4040f8:	00407210 	.word	0x00407210
  4040fc:	00402955 	.word	0x00402955
  404100:	004072c8 	.word	0x004072c8
  404104:	00404269 	.word	0x00404269
  404108:	00403ef1 	.word	0x00403ef1
  40410c:	00403dbd 	.word	0x00403dbd

00404110 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  404110:	b500      	push	{lr}
  404112:	b08b      	sub	sp, #44	; 0x2c
    .charlength   = USART_SERIAL_CHAR_LENGTH,
    .paritytype   = USART_SERIAL_PARITY,
    .stopbits     = USART_SERIAL_STOP_BIT
  };

  sysclk_init(); /* Initialize system clocks */
  404114:	4b29      	ldr	r3, [pc, #164]	; (4041bc <main+0xac>)
  404116:	4798      	blx	r3
  board_init();  /* Initialize board */
  404118:	4b29      	ldr	r3, [pc, #164]	; (4041c0 <main+0xb0>)
  40411a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40411c:	4d29      	ldr	r5, [pc, #164]	; (4041c4 <main+0xb4>)
  40411e:	4b2a      	ldr	r3, [pc, #168]	; (4041c8 <main+0xb8>)
  404120:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404122:	4a2a      	ldr	r2, [pc, #168]	; (4041cc <main+0xbc>)
  404124:	4b2a      	ldr	r3, [pc, #168]	; (4041d0 <main+0xc0>)
  404126:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404128:	4a2a      	ldr	r2, [pc, #168]	; (4041d4 <main+0xc4>)
  40412a:	4b2b      	ldr	r3, [pc, #172]	; (4041d8 <main+0xc8>)
  40412c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40412e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404132:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  404134:	23c0      	movs	r3, #192	; 0xc0
  404136:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  404138:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40413c:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  40413e:	2400      	movs	r4, #0
  404140:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404142:	9408      	str	r4, [sp, #32]
  404144:	200e      	movs	r0, #14
  404146:	4b25      	ldr	r3, [pc, #148]	; (4041dc <main+0xcc>)
  404148:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40414a:	4a25      	ldr	r2, [pc, #148]	; (4041e0 <main+0xd0>)
  40414c:	a904      	add	r1, sp, #16
  40414e:	4628      	mov	r0, r5
  404150:	4b24      	ldr	r3, [pc, #144]	; (4041e4 <main+0xd4>)
  404152:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404154:	4628      	mov	r0, r5
  404156:	4b24      	ldr	r3, [pc, #144]	; (4041e8 <main+0xd8>)
  404158:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40415a:	4628      	mov	r0, r5
  40415c:	4b23      	ldr	r3, [pc, #140]	; (4041ec <main+0xdc>)
  40415e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404160:	4e23      	ldr	r6, [pc, #140]	; (4041f0 <main+0xe0>)
  404162:	6833      	ldr	r3, [r6, #0]
  404164:	4621      	mov	r1, r4
  404166:	6898      	ldr	r0, [r3, #8]
  404168:	4d22      	ldr	r5, [pc, #136]	; (4041f4 <main+0xe4>)
  40416a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40416c:	6833      	ldr	r3, [r6, #0]
  40416e:	4621      	mov	r1, r4
  404170:	6858      	ldr	r0, [r3, #4]
  404172:	47a8      	blx	r5
  
  /* Initialize stdio on USART */
  stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
  
  /* Create task to handler touch */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  404174:	9403      	str	r4, [sp, #12]
  404176:	9402      	str	r4, [sp, #8]
  404178:	9401      	str	r4, [sp, #4]
  40417a:	9400      	str	r4, [sp, #0]
  40417c:	4623      	mov	r3, r4
  40417e:	f44f 7200 	mov.w	r2, #512	; 0x200
  404182:	491d      	ldr	r1, [pc, #116]	; (4041f8 <main+0xe8>)
  404184:	481d      	ldr	r0, [pc, #116]	; (4041fc <main+0xec>)
  404186:	4c1e      	ldr	r4, [pc, #120]	; (404200 <main+0xf0>)
  404188:	47a0      	blx	r4
  40418a:	2801      	cmp	r0, #1
  40418c:	d002      	beq.n	404194 <main+0x84>
    printf("Failed to create test led task\r\n");
  40418e:	481d      	ldr	r0, [pc, #116]	; (404204 <main+0xf4>)
  404190:	4b1d      	ldr	r3, [pc, #116]	; (404208 <main+0xf8>)
  404192:	4798      	blx	r3
  }
  
  /* Create task to handler LCD */
  if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  404194:	2300      	movs	r3, #0
  404196:	9303      	str	r3, [sp, #12]
  404198:	9302      	str	r3, [sp, #8]
  40419a:	9301      	str	r3, [sp, #4]
  40419c:	9300      	str	r3, [sp, #0]
  40419e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4041a2:	491a      	ldr	r1, [pc, #104]	; (40420c <main+0xfc>)
  4041a4:	481a      	ldr	r0, [pc, #104]	; (404210 <main+0x100>)
  4041a6:	4c16      	ldr	r4, [pc, #88]	; (404200 <main+0xf0>)
  4041a8:	47a0      	blx	r4
  4041aa:	2801      	cmp	r0, #1
  4041ac:	d002      	beq.n	4041b4 <main+0xa4>
    printf("Failed to create test led task\r\n");
  4041ae:	4815      	ldr	r0, [pc, #84]	; (404204 <main+0xf4>)
  4041b0:	4b15      	ldr	r3, [pc, #84]	; (404208 <main+0xf8>)
  4041b2:	4798      	blx	r3
  }
  
  /* Start the scheduler. */
  vTaskStartScheduler();
  4041b4:	4b17      	ldr	r3, [pc, #92]	; (404214 <main+0x104>)
  4041b6:	4798      	blx	r3
  4041b8:	e7fe      	b.n	4041b8 <main+0xa8>
  4041ba:	bf00      	nop
  4041bc:	00400859 	.word	0x00400859
  4041c0:	00400ae9 	.word	0x00400ae9
  4041c4:	40028000 	.word	0x40028000
  4041c8:	2040c818 	.word	0x2040c818
  4041cc:	00403cb9 	.word	0x00403cb9
  4041d0:	2040c814 	.word	0x2040c814
  4041d4:	00403bdd 	.word	0x00403bdd
  4041d8:	2040c810 	.word	0x2040c810
  4041dc:	0040179d 	.word	0x0040179d
  4041e0:	08f0d180 	.word	0x08f0d180
  4041e4:	00401c11 	.word	0x00401c11
  4041e8:	00401c65 	.word	0x00401c65
  4041ec:	00401c6b 	.word	0x00401c6b
  4041f0:	20400014 	.word	0x20400014
  4041f4:	00404a0d 	.word	0x00404a0d
  4041f8:	0040729c 	.word	0x0040729c
  4041fc:	00403ea1 	.word	0x00403ea1
  404200:	00402c35 	.word	0x00402c35
  404204:	004072a0 	.word	0x004072a0
  404208:	00404269 	.word	0x00404269
  40420c:	004072c4 	.word	0x004072c4
  404210:	00403f45 	.word	0x00403f45
  404214:	00402e69 	.word	0x00402e69

00404218 <__libc_init_array>:
  404218:	b570      	push	{r4, r5, r6, lr}
  40421a:	4e0f      	ldr	r6, [pc, #60]	; (404258 <__libc_init_array+0x40>)
  40421c:	4d0f      	ldr	r5, [pc, #60]	; (40425c <__libc_init_array+0x44>)
  40421e:	1b76      	subs	r6, r6, r5
  404220:	10b6      	asrs	r6, r6, #2
  404222:	bf18      	it	ne
  404224:	2400      	movne	r4, #0
  404226:	d005      	beq.n	404234 <__libc_init_array+0x1c>
  404228:	3401      	adds	r4, #1
  40422a:	f855 3b04 	ldr.w	r3, [r5], #4
  40422e:	4798      	blx	r3
  404230:	42a6      	cmp	r6, r4
  404232:	d1f9      	bne.n	404228 <__libc_init_array+0x10>
  404234:	4e0a      	ldr	r6, [pc, #40]	; (404260 <__libc_init_array+0x48>)
  404236:	4d0b      	ldr	r5, [pc, #44]	; (404264 <__libc_init_array+0x4c>)
  404238:	1b76      	subs	r6, r6, r5
  40423a:	f003 f90b 	bl	407454 <_init>
  40423e:	10b6      	asrs	r6, r6, #2
  404240:	bf18      	it	ne
  404242:	2400      	movne	r4, #0
  404244:	d006      	beq.n	404254 <__libc_init_array+0x3c>
  404246:	3401      	adds	r4, #1
  404248:	f855 3b04 	ldr.w	r3, [r5], #4
  40424c:	4798      	blx	r3
  40424e:	42a6      	cmp	r6, r4
  404250:	d1f9      	bne.n	404246 <__libc_init_array+0x2e>
  404252:	bd70      	pop	{r4, r5, r6, pc}
  404254:	bd70      	pop	{r4, r5, r6, pc}
  404256:	bf00      	nop
  404258:	00407460 	.word	0x00407460
  40425c:	00407460 	.word	0x00407460
  404260:	00407468 	.word	0x00407468
  404264:	00407460 	.word	0x00407460

00404268 <iprintf>:
  404268:	b40f      	push	{r0, r1, r2, r3}
  40426a:	b500      	push	{lr}
  40426c:	4907      	ldr	r1, [pc, #28]	; (40428c <iprintf+0x24>)
  40426e:	b083      	sub	sp, #12
  404270:	ab04      	add	r3, sp, #16
  404272:	6808      	ldr	r0, [r1, #0]
  404274:	f853 2b04 	ldr.w	r2, [r3], #4
  404278:	6881      	ldr	r1, [r0, #8]
  40427a:	9301      	str	r3, [sp, #4]
  40427c:	f000 fd4e 	bl	404d1c <_vfiprintf_r>
  404280:	b003      	add	sp, #12
  404282:	f85d eb04 	ldr.w	lr, [sp], #4
  404286:	b004      	add	sp, #16
  404288:	4770      	bx	lr
  40428a:	bf00      	nop
  40428c:	20400014 	.word	0x20400014

00404290 <malloc>:
  404290:	4b02      	ldr	r3, [pc, #8]	; (40429c <malloc+0xc>)
  404292:	4601      	mov	r1, r0
  404294:	6818      	ldr	r0, [r3, #0]
  404296:	f000 b803 	b.w	4042a0 <_malloc_r>
  40429a:	bf00      	nop
  40429c:	20400014 	.word	0x20400014

004042a0 <_malloc_r>:
  4042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042a4:	f101 060b 	add.w	r6, r1, #11
  4042a8:	2e16      	cmp	r6, #22
  4042aa:	b083      	sub	sp, #12
  4042ac:	4605      	mov	r5, r0
  4042ae:	f240 809e 	bls.w	4043ee <_malloc_r+0x14e>
  4042b2:	f036 0607 	bics.w	r6, r6, #7
  4042b6:	f100 80bd 	bmi.w	404434 <_malloc_r+0x194>
  4042ba:	42b1      	cmp	r1, r6
  4042bc:	f200 80ba 	bhi.w	404434 <_malloc_r+0x194>
  4042c0:	f000 fb86 	bl	4049d0 <__malloc_lock>
  4042c4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4042c8:	f0c0 8293 	bcc.w	4047f2 <_malloc_r+0x552>
  4042cc:	0a73      	lsrs	r3, r6, #9
  4042ce:	f000 80b8 	beq.w	404442 <_malloc_r+0x1a2>
  4042d2:	2b04      	cmp	r3, #4
  4042d4:	f200 8179 	bhi.w	4045ca <_malloc_r+0x32a>
  4042d8:	09b3      	lsrs	r3, r6, #6
  4042da:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4042de:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4042e2:	00c3      	lsls	r3, r0, #3
  4042e4:	4fbf      	ldr	r7, [pc, #764]	; (4045e4 <_malloc_r+0x344>)
  4042e6:	443b      	add	r3, r7
  4042e8:	f1a3 0108 	sub.w	r1, r3, #8
  4042ec:	685c      	ldr	r4, [r3, #4]
  4042ee:	42a1      	cmp	r1, r4
  4042f0:	d106      	bne.n	404300 <_malloc_r+0x60>
  4042f2:	e00c      	b.n	40430e <_malloc_r+0x6e>
  4042f4:	2a00      	cmp	r2, #0
  4042f6:	f280 80aa 	bge.w	40444e <_malloc_r+0x1ae>
  4042fa:	68e4      	ldr	r4, [r4, #12]
  4042fc:	42a1      	cmp	r1, r4
  4042fe:	d006      	beq.n	40430e <_malloc_r+0x6e>
  404300:	6863      	ldr	r3, [r4, #4]
  404302:	f023 0303 	bic.w	r3, r3, #3
  404306:	1b9a      	subs	r2, r3, r6
  404308:	2a0f      	cmp	r2, #15
  40430a:	ddf3      	ble.n	4042f4 <_malloc_r+0x54>
  40430c:	4670      	mov	r0, lr
  40430e:	693c      	ldr	r4, [r7, #16]
  404310:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4045f8 <_malloc_r+0x358>
  404314:	4574      	cmp	r4, lr
  404316:	f000 81ab 	beq.w	404670 <_malloc_r+0x3d0>
  40431a:	6863      	ldr	r3, [r4, #4]
  40431c:	f023 0303 	bic.w	r3, r3, #3
  404320:	1b9a      	subs	r2, r3, r6
  404322:	2a0f      	cmp	r2, #15
  404324:	f300 8190 	bgt.w	404648 <_malloc_r+0x3a8>
  404328:	2a00      	cmp	r2, #0
  40432a:	f8c7 e014 	str.w	lr, [r7, #20]
  40432e:	f8c7 e010 	str.w	lr, [r7, #16]
  404332:	f280 809d 	bge.w	404470 <_malloc_r+0x1d0>
  404336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40433a:	f080 8161 	bcs.w	404600 <_malloc_r+0x360>
  40433e:	08db      	lsrs	r3, r3, #3
  404340:	f103 0c01 	add.w	ip, r3, #1
  404344:	1099      	asrs	r1, r3, #2
  404346:	687a      	ldr	r2, [r7, #4]
  404348:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40434c:	f8c4 8008 	str.w	r8, [r4, #8]
  404350:	2301      	movs	r3, #1
  404352:	408b      	lsls	r3, r1
  404354:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404358:	4313      	orrs	r3, r2
  40435a:	3908      	subs	r1, #8
  40435c:	60e1      	str	r1, [r4, #12]
  40435e:	607b      	str	r3, [r7, #4]
  404360:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404364:	f8c8 400c 	str.w	r4, [r8, #12]
  404368:	1082      	asrs	r2, r0, #2
  40436a:	2401      	movs	r4, #1
  40436c:	4094      	lsls	r4, r2
  40436e:	429c      	cmp	r4, r3
  404370:	f200 808b 	bhi.w	40448a <_malloc_r+0x1ea>
  404374:	421c      	tst	r4, r3
  404376:	d106      	bne.n	404386 <_malloc_r+0xe6>
  404378:	f020 0003 	bic.w	r0, r0, #3
  40437c:	0064      	lsls	r4, r4, #1
  40437e:	421c      	tst	r4, r3
  404380:	f100 0004 	add.w	r0, r0, #4
  404384:	d0fa      	beq.n	40437c <_malloc_r+0xdc>
  404386:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40438a:	46cc      	mov	ip, r9
  40438c:	4680      	mov	r8, r0
  40438e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404392:	459c      	cmp	ip, r3
  404394:	d107      	bne.n	4043a6 <_malloc_r+0x106>
  404396:	e16d      	b.n	404674 <_malloc_r+0x3d4>
  404398:	2a00      	cmp	r2, #0
  40439a:	f280 817b 	bge.w	404694 <_malloc_r+0x3f4>
  40439e:	68db      	ldr	r3, [r3, #12]
  4043a0:	459c      	cmp	ip, r3
  4043a2:	f000 8167 	beq.w	404674 <_malloc_r+0x3d4>
  4043a6:	6859      	ldr	r1, [r3, #4]
  4043a8:	f021 0103 	bic.w	r1, r1, #3
  4043ac:	1b8a      	subs	r2, r1, r6
  4043ae:	2a0f      	cmp	r2, #15
  4043b0:	ddf2      	ble.n	404398 <_malloc_r+0xf8>
  4043b2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4043b6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4043ba:	9300      	str	r3, [sp, #0]
  4043bc:	199c      	adds	r4, r3, r6
  4043be:	4628      	mov	r0, r5
  4043c0:	f046 0601 	orr.w	r6, r6, #1
  4043c4:	f042 0501 	orr.w	r5, r2, #1
  4043c8:	605e      	str	r6, [r3, #4]
  4043ca:	f8c8 c00c 	str.w	ip, [r8, #12]
  4043ce:	f8cc 8008 	str.w	r8, [ip, #8]
  4043d2:	617c      	str	r4, [r7, #20]
  4043d4:	613c      	str	r4, [r7, #16]
  4043d6:	f8c4 e00c 	str.w	lr, [r4, #12]
  4043da:	f8c4 e008 	str.w	lr, [r4, #8]
  4043de:	6065      	str	r5, [r4, #4]
  4043e0:	505a      	str	r2, [r3, r1]
  4043e2:	f000 fafb 	bl	4049dc <__malloc_unlock>
  4043e6:	9b00      	ldr	r3, [sp, #0]
  4043e8:	f103 0408 	add.w	r4, r3, #8
  4043ec:	e01e      	b.n	40442c <_malloc_r+0x18c>
  4043ee:	2910      	cmp	r1, #16
  4043f0:	d820      	bhi.n	404434 <_malloc_r+0x194>
  4043f2:	f000 faed 	bl	4049d0 <__malloc_lock>
  4043f6:	2610      	movs	r6, #16
  4043f8:	2318      	movs	r3, #24
  4043fa:	2002      	movs	r0, #2
  4043fc:	4f79      	ldr	r7, [pc, #484]	; (4045e4 <_malloc_r+0x344>)
  4043fe:	443b      	add	r3, r7
  404400:	f1a3 0208 	sub.w	r2, r3, #8
  404404:	685c      	ldr	r4, [r3, #4]
  404406:	4294      	cmp	r4, r2
  404408:	f000 813d 	beq.w	404686 <_malloc_r+0x3e6>
  40440c:	6863      	ldr	r3, [r4, #4]
  40440e:	68e1      	ldr	r1, [r4, #12]
  404410:	68a6      	ldr	r6, [r4, #8]
  404412:	f023 0303 	bic.w	r3, r3, #3
  404416:	4423      	add	r3, r4
  404418:	4628      	mov	r0, r5
  40441a:	685a      	ldr	r2, [r3, #4]
  40441c:	60f1      	str	r1, [r6, #12]
  40441e:	f042 0201 	orr.w	r2, r2, #1
  404422:	608e      	str	r6, [r1, #8]
  404424:	605a      	str	r2, [r3, #4]
  404426:	f000 fad9 	bl	4049dc <__malloc_unlock>
  40442a:	3408      	adds	r4, #8
  40442c:	4620      	mov	r0, r4
  40442e:	b003      	add	sp, #12
  404430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404434:	2400      	movs	r4, #0
  404436:	230c      	movs	r3, #12
  404438:	4620      	mov	r0, r4
  40443a:	602b      	str	r3, [r5, #0]
  40443c:	b003      	add	sp, #12
  40443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404442:	2040      	movs	r0, #64	; 0x40
  404444:	f44f 7300 	mov.w	r3, #512	; 0x200
  404448:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40444c:	e74a      	b.n	4042e4 <_malloc_r+0x44>
  40444e:	4423      	add	r3, r4
  404450:	68e1      	ldr	r1, [r4, #12]
  404452:	685a      	ldr	r2, [r3, #4]
  404454:	68a6      	ldr	r6, [r4, #8]
  404456:	f042 0201 	orr.w	r2, r2, #1
  40445a:	60f1      	str	r1, [r6, #12]
  40445c:	4628      	mov	r0, r5
  40445e:	608e      	str	r6, [r1, #8]
  404460:	605a      	str	r2, [r3, #4]
  404462:	f000 fabb 	bl	4049dc <__malloc_unlock>
  404466:	3408      	adds	r4, #8
  404468:	4620      	mov	r0, r4
  40446a:	b003      	add	sp, #12
  40446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404470:	4423      	add	r3, r4
  404472:	4628      	mov	r0, r5
  404474:	685a      	ldr	r2, [r3, #4]
  404476:	f042 0201 	orr.w	r2, r2, #1
  40447a:	605a      	str	r2, [r3, #4]
  40447c:	f000 faae 	bl	4049dc <__malloc_unlock>
  404480:	3408      	adds	r4, #8
  404482:	4620      	mov	r0, r4
  404484:	b003      	add	sp, #12
  404486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40448a:	68bc      	ldr	r4, [r7, #8]
  40448c:	6863      	ldr	r3, [r4, #4]
  40448e:	f023 0803 	bic.w	r8, r3, #3
  404492:	45b0      	cmp	r8, r6
  404494:	d304      	bcc.n	4044a0 <_malloc_r+0x200>
  404496:	eba8 0306 	sub.w	r3, r8, r6
  40449a:	2b0f      	cmp	r3, #15
  40449c:	f300 8085 	bgt.w	4045aa <_malloc_r+0x30a>
  4044a0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4045fc <_malloc_r+0x35c>
  4044a4:	4b50      	ldr	r3, [pc, #320]	; (4045e8 <_malloc_r+0x348>)
  4044a6:	f8d9 2000 	ldr.w	r2, [r9]
  4044aa:	681b      	ldr	r3, [r3, #0]
  4044ac:	3201      	adds	r2, #1
  4044ae:	4433      	add	r3, r6
  4044b0:	eb04 0a08 	add.w	sl, r4, r8
  4044b4:	f000 8155 	beq.w	404762 <_malloc_r+0x4c2>
  4044b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4044bc:	330f      	adds	r3, #15
  4044be:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4044c2:	f02b 0b0f 	bic.w	fp, fp, #15
  4044c6:	4659      	mov	r1, fp
  4044c8:	4628      	mov	r0, r5
  4044ca:	f000 fa8d 	bl	4049e8 <_sbrk_r>
  4044ce:	1c41      	adds	r1, r0, #1
  4044d0:	4602      	mov	r2, r0
  4044d2:	f000 80fc 	beq.w	4046ce <_malloc_r+0x42e>
  4044d6:	4582      	cmp	sl, r0
  4044d8:	f200 80f7 	bhi.w	4046ca <_malloc_r+0x42a>
  4044dc:	4b43      	ldr	r3, [pc, #268]	; (4045ec <_malloc_r+0x34c>)
  4044de:	6819      	ldr	r1, [r3, #0]
  4044e0:	4459      	add	r1, fp
  4044e2:	6019      	str	r1, [r3, #0]
  4044e4:	f000 814d 	beq.w	404782 <_malloc_r+0x4e2>
  4044e8:	f8d9 0000 	ldr.w	r0, [r9]
  4044ec:	3001      	adds	r0, #1
  4044ee:	bf1b      	ittet	ne
  4044f0:	eba2 0a0a 	subne.w	sl, r2, sl
  4044f4:	4451      	addne	r1, sl
  4044f6:	f8c9 2000 	streq.w	r2, [r9]
  4044fa:	6019      	strne	r1, [r3, #0]
  4044fc:	f012 0107 	ands.w	r1, r2, #7
  404500:	f000 8115 	beq.w	40472e <_malloc_r+0x48e>
  404504:	f1c1 0008 	rsb	r0, r1, #8
  404508:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40450c:	4402      	add	r2, r0
  40450e:	3108      	adds	r1, #8
  404510:	eb02 090b 	add.w	r9, r2, fp
  404514:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404518:	eba1 0909 	sub.w	r9, r1, r9
  40451c:	4649      	mov	r1, r9
  40451e:	4628      	mov	r0, r5
  404520:	9301      	str	r3, [sp, #4]
  404522:	9200      	str	r2, [sp, #0]
  404524:	f000 fa60 	bl	4049e8 <_sbrk_r>
  404528:	1c43      	adds	r3, r0, #1
  40452a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40452e:	f000 8143 	beq.w	4047b8 <_malloc_r+0x518>
  404532:	1a80      	subs	r0, r0, r2
  404534:	4448      	add	r0, r9
  404536:	f040 0001 	orr.w	r0, r0, #1
  40453a:	6819      	ldr	r1, [r3, #0]
  40453c:	60ba      	str	r2, [r7, #8]
  40453e:	4449      	add	r1, r9
  404540:	42bc      	cmp	r4, r7
  404542:	6050      	str	r0, [r2, #4]
  404544:	6019      	str	r1, [r3, #0]
  404546:	d017      	beq.n	404578 <_malloc_r+0x2d8>
  404548:	f1b8 0f0f 	cmp.w	r8, #15
  40454c:	f240 80fb 	bls.w	404746 <_malloc_r+0x4a6>
  404550:	6860      	ldr	r0, [r4, #4]
  404552:	f1a8 020c 	sub.w	r2, r8, #12
  404556:	f022 0207 	bic.w	r2, r2, #7
  40455a:	eb04 0e02 	add.w	lr, r4, r2
  40455e:	f000 0001 	and.w	r0, r0, #1
  404562:	f04f 0c05 	mov.w	ip, #5
  404566:	4310      	orrs	r0, r2
  404568:	2a0f      	cmp	r2, #15
  40456a:	6060      	str	r0, [r4, #4]
  40456c:	f8ce c004 	str.w	ip, [lr, #4]
  404570:	f8ce c008 	str.w	ip, [lr, #8]
  404574:	f200 8117 	bhi.w	4047a6 <_malloc_r+0x506>
  404578:	4b1d      	ldr	r3, [pc, #116]	; (4045f0 <_malloc_r+0x350>)
  40457a:	68bc      	ldr	r4, [r7, #8]
  40457c:	681a      	ldr	r2, [r3, #0]
  40457e:	4291      	cmp	r1, r2
  404580:	bf88      	it	hi
  404582:	6019      	strhi	r1, [r3, #0]
  404584:	4b1b      	ldr	r3, [pc, #108]	; (4045f4 <_malloc_r+0x354>)
  404586:	681a      	ldr	r2, [r3, #0]
  404588:	4291      	cmp	r1, r2
  40458a:	6862      	ldr	r2, [r4, #4]
  40458c:	bf88      	it	hi
  40458e:	6019      	strhi	r1, [r3, #0]
  404590:	f022 0203 	bic.w	r2, r2, #3
  404594:	4296      	cmp	r6, r2
  404596:	eba2 0306 	sub.w	r3, r2, r6
  40459a:	d801      	bhi.n	4045a0 <_malloc_r+0x300>
  40459c:	2b0f      	cmp	r3, #15
  40459e:	dc04      	bgt.n	4045aa <_malloc_r+0x30a>
  4045a0:	4628      	mov	r0, r5
  4045a2:	f000 fa1b 	bl	4049dc <__malloc_unlock>
  4045a6:	2400      	movs	r4, #0
  4045a8:	e740      	b.n	40442c <_malloc_r+0x18c>
  4045aa:	19a2      	adds	r2, r4, r6
  4045ac:	f043 0301 	orr.w	r3, r3, #1
  4045b0:	f046 0601 	orr.w	r6, r6, #1
  4045b4:	6066      	str	r6, [r4, #4]
  4045b6:	4628      	mov	r0, r5
  4045b8:	60ba      	str	r2, [r7, #8]
  4045ba:	6053      	str	r3, [r2, #4]
  4045bc:	f000 fa0e 	bl	4049dc <__malloc_unlock>
  4045c0:	3408      	adds	r4, #8
  4045c2:	4620      	mov	r0, r4
  4045c4:	b003      	add	sp, #12
  4045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045ca:	2b14      	cmp	r3, #20
  4045cc:	d971      	bls.n	4046b2 <_malloc_r+0x412>
  4045ce:	2b54      	cmp	r3, #84	; 0x54
  4045d0:	f200 80a3 	bhi.w	40471a <_malloc_r+0x47a>
  4045d4:	0b33      	lsrs	r3, r6, #12
  4045d6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4045da:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4045de:	00c3      	lsls	r3, r0, #3
  4045e0:	e680      	b.n	4042e4 <_malloc_r+0x44>
  4045e2:	bf00      	nop
  4045e4:	20400440 	.word	0x20400440
  4045e8:	2040c78c 	.word	0x2040c78c
  4045ec:	2040c75c 	.word	0x2040c75c
  4045f0:	2040c784 	.word	0x2040c784
  4045f4:	2040c788 	.word	0x2040c788
  4045f8:	20400448 	.word	0x20400448
  4045fc:	20400848 	.word	0x20400848
  404600:	0a5a      	lsrs	r2, r3, #9
  404602:	2a04      	cmp	r2, #4
  404604:	d95b      	bls.n	4046be <_malloc_r+0x41e>
  404606:	2a14      	cmp	r2, #20
  404608:	f200 80ae 	bhi.w	404768 <_malloc_r+0x4c8>
  40460c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404610:	00c9      	lsls	r1, r1, #3
  404612:	325b      	adds	r2, #91	; 0x5b
  404614:	eb07 0c01 	add.w	ip, r7, r1
  404618:	5879      	ldr	r1, [r7, r1]
  40461a:	f1ac 0c08 	sub.w	ip, ip, #8
  40461e:	458c      	cmp	ip, r1
  404620:	f000 8088 	beq.w	404734 <_malloc_r+0x494>
  404624:	684a      	ldr	r2, [r1, #4]
  404626:	f022 0203 	bic.w	r2, r2, #3
  40462a:	4293      	cmp	r3, r2
  40462c:	d273      	bcs.n	404716 <_malloc_r+0x476>
  40462e:	6889      	ldr	r1, [r1, #8]
  404630:	458c      	cmp	ip, r1
  404632:	d1f7      	bne.n	404624 <_malloc_r+0x384>
  404634:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404638:	687b      	ldr	r3, [r7, #4]
  40463a:	60e2      	str	r2, [r4, #12]
  40463c:	f8c4 c008 	str.w	ip, [r4, #8]
  404640:	6094      	str	r4, [r2, #8]
  404642:	f8cc 400c 	str.w	r4, [ip, #12]
  404646:	e68f      	b.n	404368 <_malloc_r+0xc8>
  404648:	19a1      	adds	r1, r4, r6
  40464a:	f046 0c01 	orr.w	ip, r6, #1
  40464e:	f042 0601 	orr.w	r6, r2, #1
  404652:	f8c4 c004 	str.w	ip, [r4, #4]
  404656:	4628      	mov	r0, r5
  404658:	6179      	str	r1, [r7, #20]
  40465a:	6139      	str	r1, [r7, #16]
  40465c:	f8c1 e00c 	str.w	lr, [r1, #12]
  404660:	f8c1 e008 	str.w	lr, [r1, #8]
  404664:	604e      	str	r6, [r1, #4]
  404666:	50e2      	str	r2, [r4, r3]
  404668:	f000 f9b8 	bl	4049dc <__malloc_unlock>
  40466c:	3408      	adds	r4, #8
  40466e:	e6dd      	b.n	40442c <_malloc_r+0x18c>
  404670:	687b      	ldr	r3, [r7, #4]
  404672:	e679      	b.n	404368 <_malloc_r+0xc8>
  404674:	f108 0801 	add.w	r8, r8, #1
  404678:	f018 0f03 	tst.w	r8, #3
  40467c:	f10c 0c08 	add.w	ip, ip, #8
  404680:	f47f ae85 	bne.w	40438e <_malloc_r+0xee>
  404684:	e02d      	b.n	4046e2 <_malloc_r+0x442>
  404686:	68dc      	ldr	r4, [r3, #12]
  404688:	42a3      	cmp	r3, r4
  40468a:	bf08      	it	eq
  40468c:	3002      	addeq	r0, #2
  40468e:	f43f ae3e 	beq.w	40430e <_malloc_r+0x6e>
  404692:	e6bb      	b.n	40440c <_malloc_r+0x16c>
  404694:	4419      	add	r1, r3
  404696:	461c      	mov	r4, r3
  404698:	684a      	ldr	r2, [r1, #4]
  40469a:	68db      	ldr	r3, [r3, #12]
  40469c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4046a0:	f042 0201 	orr.w	r2, r2, #1
  4046a4:	604a      	str	r2, [r1, #4]
  4046a6:	4628      	mov	r0, r5
  4046a8:	60f3      	str	r3, [r6, #12]
  4046aa:	609e      	str	r6, [r3, #8]
  4046ac:	f000 f996 	bl	4049dc <__malloc_unlock>
  4046b0:	e6bc      	b.n	40442c <_malloc_r+0x18c>
  4046b2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4046b6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4046ba:	00c3      	lsls	r3, r0, #3
  4046bc:	e612      	b.n	4042e4 <_malloc_r+0x44>
  4046be:	099a      	lsrs	r2, r3, #6
  4046c0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4046c4:	00c9      	lsls	r1, r1, #3
  4046c6:	3238      	adds	r2, #56	; 0x38
  4046c8:	e7a4      	b.n	404614 <_malloc_r+0x374>
  4046ca:	42bc      	cmp	r4, r7
  4046cc:	d054      	beq.n	404778 <_malloc_r+0x4d8>
  4046ce:	68bc      	ldr	r4, [r7, #8]
  4046d0:	6862      	ldr	r2, [r4, #4]
  4046d2:	f022 0203 	bic.w	r2, r2, #3
  4046d6:	e75d      	b.n	404594 <_malloc_r+0x2f4>
  4046d8:	f859 3908 	ldr.w	r3, [r9], #-8
  4046dc:	4599      	cmp	r9, r3
  4046de:	f040 8086 	bne.w	4047ee <_malloc_r+0x54e>
  4046e2:	f010 0f03 	tst.w	r0, #3
  4046e6:	f100 30ff 	add.w	r0, r0, #4294967295
  4046ea:	d1f5      	bne.n	4046d8 <_malloc_r+0x438>
  4046ec:	687b      	ldr	r3, [r7, #4]
  4046ee:	ea23 0304 	bic.w	r3, r3, r4
  4046f2:	607b      	str	r3, [r7, #4]
  4046f4:	0064      	lsls	r4, r4, #1
  4046f6:	429c      	cmp	r4, r3
  4046f8:	f63f aec7 	bhi.w	40448a <_malloc_r+0x1ea>
  4046fc:	2c00      	cmp	r4, #0
  4046fe:	f43f aec4 	beq.w	40448a <_malloc_r+0x1ea>
  404702:	421c      	tst	r4, r3
  404704:	4640      	mov	r0, r8
  404706:	f47f ae3e 	bne.w	404386 <_malloc_r+0xe6>
  40470a:	0064      	lsls	r4, r4, #1
  40470c:	421c      	tst	r4, r3
  40470e:	f100 0004 	add.w	r0, r0, #4
  404712:	d0fa      	beq.n	40470a <_malloc_r+0x46a>
  404714:	e637      	b.n	404386 <_malloc_r+0xe6>
  404716:	468c      	mov	ip, r1
  404718:	e78c      	b.n	404634 <_malloc_r+0x394>
  40471a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40471e:	d815      	bhi.n	40474c <_malloc_r+0x4ac>
  404720:	0bf3      	lsrs	r3, r6, #15
  404722:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404726:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40472a:	00c3      	lsls	r3, r0, #3
  40472c:	e5da      	b.n	4042e4 <_malloc_r+0x44>
  40472e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404732:	e6ed      	b.n	404510 <_malloc_r+0x270>
  404734:	687b      	ldr	r3, [r7, #4]
  404736:	1092      	asrs	r2, r2, #2
  404738:	2101      	movs	r1, #1
  40473a:	fa01 f202 	lsl.w	r2, r1, r2
  40473e:	4313      	orrs	r3, r2
  404740:	607b      	str	r3, [r7, #4]
  404742:	4662      	mov	r2, ip
  404744:	e779      	b.n	40463a <_malloc_r+0x39a>
  404746:	2301      	movs	r3, #1
  404748:	6053      	str	r3, [r2, #4]
  40474a:	e729      	b.n	4045a0 <_malloc_r+0x300>
  40474c:	f240 5254 	movw	r2, #1364	; 0x554
  404750:	4293      	cmp	r3, r2
  404752:	d822      	bhi.n	40479a <_malloc_r+0x4fa>
  404754:	0cb3      	lsrs	r3, r6, #18
  404756:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40475a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40475e:	00c3      	lsls	r3, r0, #3
  404760:	e5c0      	b.n	4042e4 <_malloc_r+0x44>
  404762:	f103 0b10 	add.w	fp, r3, #16
  404766:	e6ae      	b.n	4044c6 <_malloc_r+0x226>
  404768:	2a54      	cmp	r2, #84	; 0x54
  40476a:	d829      	bhi.n	4047c0 <_malloc_r+0x520>
  40476c:	0b1a      	lsrs	r2, r3, #12
  40476e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404772:	00c9      	lsls	r1, r1, #3
  404774:	326e      	adds	r2, #110	; 0x6e
  404776:	e74d      	b.n	404614 <_malloc_r+0x374>
  404778:	4b20      	ldr	r3, [pc, #128]	; (4047fc <_malloc_r+0x55c>)
  40477a:	6819      	ldr	r1, [r3, #0]
  40477c:	4459      	add	r1, fp
  40477e:	6019      	str	r1, [r3, #0]
  404780:	e6b2      	b.n	4044e8 <_malloc_r+0x248>
  404782:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404786:	2800      	cmp	r0, #0
  404788:	f47f aeae 	bne.w	4044e8 <_malloc_r+0x248>
  40478c:	eb08 030b 	add.w	r3, r8, fp
  404790:	68ba      	ldr	r2, [r7, #8]
  404792:	f043 0301 	orr.w	r3, r3, #1
  404796:	6053      	str	r3, [r2, #4]
  404798:	e6ee      	b.n	404578 <_malloc_r+0x2d8>
  40479a:	207f      	movs	r0, #127	; 0x7f
  40479c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4047a0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4047a4:	e59e      	b.n	4042e4 <_malloc_r+0x44>
  4047a6:	f104 0108 	add.w	r1, r4, #8
  4047aa:	4628      	mov	r0, r5
  4047ac:	9300      	str	r3, [sp, #0]
  4047ae:	f001 fbd1 	bl	405f54 <_free_r>
  4047b2:	9b00      	ldr	r3, [sp, #0]
  4047b4:	6819      	ldr	r1, [r3, #0]
  4047b6:	e6df      	b.n	404578 <_malloc_r+0x2d8>
  4047b8:	2001      	movs	r0, #1
  4047ba:	f04f 0900 	mov.w	r9, #0
  4047be:	e6bc      	b.n	40453a <_malloc_r+0x29a>
  4047c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4047c4:	d805      	bhi.n	4047d2 <_malloc_r+0x532>
  4047c6:	0bda      	lsrs	r2, r3, #15
  4047c8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4047cc:	00c9      	lsls	r1, r1, #3
  4047ce:	3277      	adds	r2, #119	; 0x77
  4047d0:	e720      	b.n	404614 <_malloc_r+0x374>
  4047d2:	f240 5154 	movw	r1, #1364	; 0x554
  4047d6:	428a      	cmp	r2, r1
  4047d8:	d805      	bhi.n	4047e6 <_malloc_r+0x546>
  4047da:	0c9a      	lsrs	r2, r3, #18
  4047dc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4047e0:	00c9      	lsls	r1, r1, #3
  4047e2:	327c      	adds	r2, #124	; 0x7c
  4047e4:	e716      	b.n	404614 <_malloc_r+0x374>
  4047e6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4047ea:	227e      	movs	r2, #126	; 0x7e
  4047ec:	e712      	b.n	404614 <_malloc_r+0x374>
  4047ee:	687b      	ldr	r3, [r7, #4]
  4047f0:	e780      	b.n	4046f4 <_malloc_r+0x454>
  4047f2:	08f0      	lsrs	r0, r6, #3
  4047f4:	f106 0308 	add.w	r3, r6, #8
  4047f8:	e600      	b.n	4043fc <_malloc_r+0x15c>
  4047fa:	bf00      	nop
  4047fc:	2040c75c 	.word	0x2040c75c

00404800 <memcpy>:
  404800:	4684      	mov	ip, r0
  404802:	ea41 0300 	orr.w	r3, r1, r0
  404806:	f013 0303 	ands.w	r3, r3, #3
  40480a:	d16d      	bne.n	4048e8 <memcpy+0xe8>
  40480c:	3a40      	subs	r2, #64	; 0x40
  40480e:	d341      	bcc.n	404894 <memcpy+0x94>
  404810:	f851 3b04 	ldr.w	r3, [r1], #4
  404814:	f840 3b04 	str.w	r3, [r0], #4
  404818:	f851 3b04 	ldr.w	r3, [r1], #4
  40481c:	f840 3b04 	str.w	r3, [r0], #4
  404820:	f851 3b04 	ldr.w	r3, [r1], #4
  404824:	f840 3b04 	str.w	r3, [r0], #4
  404828:	f851 3b04 	ldr.w	r3, [r1], #4
  40482c:	f840 3b04 	str.w	r3, [r0], #4
  404830:	f851 3b04 	ldr.w	r3, [r1], #4
  404834:	f840 3b04 	str.w	r3, [r0], #4
  404838:	f851 3b04 	ldr.w	r3, [r1], #4
  40483c:	f840 3b04 	str.w	r3, [r0], #4
  404840:	f851 3b04 	ldr.w	r3, [r1], #4
  404844:	f840 3b04 	str.w	r3, [r0], #4
  404848:	f851 3b04 	ldr.w	r3, [r1], #4
  40484c:	f840 3b04 	str.w	r3, [r0], #4
  404850:	f851 3b04 	ldr.w	r3, [r1], #4
  404854:	f840 3b04 	str.w	r3, [r0], #4
  404858:	f851 3b04 	ldr.w	r3, [r1], #4
  40485c:	f840 3b04 	str.w	r3, [r0], #4
  404860:	f851 3b04 	ldr.w	r3, [r1], #4
  404864:	f840 3b04 	str.w	r3, [r0], #4
  404868:	f851 3b04 	ldr.w	r3, [r1], #4
  40486c:	f840 3b04 	str.w	r3, [r0], #4
  404870:	f851 3b04 	ldr.w	r3, [r1], #4
  404874:	f840 3b04 	str.w	r3, [r0], #4
  404878:	f851 3b04 	ldr.w	r3, [r1], #4
  40487c:	f840 3b04 	str.w	r3, [r0], #4
  404880:	f851 3b04 	ldr.w	r3, [r1], #4
  404884:	f840 3b04 	str.w	r3, [r0], #4
  404888:	f851 3b04 	ldr.w	r3, [r1], #4
  40488c:	f840 3b04 	str.w	r3, [r0], #4
  404890:	3a40      	subs	r2, #64	; 0x40
  404892:	d2bd      	bcs.n	404810 <memcpy+0x10>
  404894:	3230      	adds	r2, #48	; 0x30
  404896:	d311      	bcc.n	4048bc <memcpy+0xbc>
  404898:	f851 3b04 	ldr.w	r3, [r1], #4
  40489c:	f840 3b04 	str.w	r3, [r0], #4
  4048a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048a4:	f840 3b04 	str.w	r3, [r0], #4
  4048a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4048ac:	f840 3b04 	str.w	r3, [r0], #4
  4048b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048b4:	f840 3b04 	str.w	r3, [r0], #4
  4048b8:	3a10      	subs	r2, #16
  4048ba:	d2ed      	bcs.n	404898 <memcpy+0x98>
  4048bc:	320c      	adds	r2, #12
  4048be:	d305      	bcc.n	4048cc <memcpy+0xcc>
  4048c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048c4:	f840 3b04 	str.w	r3, [r0], #4
  4048c8:	3a04      	subs	r2, #4
  4048ca:	d2f9      	bcs.n	4048c0 <memcpy+0xc0>
  4048cc:	3204      	adds	r2, #4
  4048ce:	d008      	beq.n	4048e2 <memcpy+0xe2>
  4048d0:	07d2      	lsls	r2, r2, #31
  4048d2:	bf1c      	itt	ne
  4048d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4048d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4048dc:	d301      	bcc.n	4048e2 <memcpy+0xe2>
  4048de:	880b      	ldrh	r3, [r1, #0]
  4048e0:	8003      	strh	r3, [r0, #0]
  4048e2:	4660      	mov	r0, ip
  4048e4:	4770      	bx	lr
  4048e6:	bf00      	nop
  4048e8:	2a08      	cmp	r2, #8
  4048ea:	d313      	bcc.n	404914 <memcpy+0x114>
  4048ec:	078b      	lsls	r3, r1, #30
  4048ee:	d08d      	beq.n	40480c <memcpy+0xc>
  4048f0:	f010 0303 	ands.w	r3, r0, #3
  4048f4:	d08a      	beq.n	40480c <memcpy+0xc>
  4048f6:	f1c3 0304 	rsb	r3, r3, #4
  4048fa:	1ad2      	subs	r2, r2, r3
  4048fc:	07db      	lsls	r3, r3, #31
  4048fe:	bf1c      	itt	ne
  404900:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404904:	f800 3b01 	strbne.w	r3, [r0], #1
  404908:	d380      	bcc.n	40480c <memcpy+0xc>
  40490a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40490e:	f820 3b02 	strh.w	r3, [r0], #2
  404912:	e77b      	b.n	40480c <memcpy+0xc>
  404914:	3a04      	subs	r2, #4
  404916:	d3d9      	bcc.n	4048cc <memcpy+0xcc>
  404918:	3a01      	subs	r2, #1
  40491a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40491e:	f800 3b01 	strb.w	r3, [r0], #1
  404922:	d2f9      	bcs.n	404918 <memcpy+0x118>
  404924:	780b      	ldrb	r3, [r1, #0]
  404926:	7003      	strb	r3, [r0, #0]
  404928:	784b      	ldrb	r3, [r1, #1]
  40492a:	7043      	strb	r3, [r0, #1]
  40492c:	788b      	ldrb	r3, [r1, #2]
  40492e:	7083      	strb	r3, [r0, #2]
  404930:	4660      	mov	r0, ip
  404932:	4770      	bx	lr

00404934 <memset>:
  404934:	b470      	push	{r4, r5, r6}
  404936:	0786      	lsls	r6, r0, #30
  404938:	d046      	beq.n	4049c8 <memset+0x94>
  40493a:	1e54      	subs	r4, r2, #1
  40493c:	2a00      	cmp	r2, #0
  40493e:	d041      	beq.n	4049c4 <memset+0x90>
  404940:	b2ca      	uxtb	r2, r1
  404942:	4603      	mov	r3, r0
  404944:	e002      	b.n	40494c <memset+0x18>
  404946:	f114 34ff 	adds.w	r4, r4, #4294967295
  40494a:	d33b      	bcc.n	4049c4 <memset+0x90>
  40494c:	f803 2b01 	strb.w	r2, [r3], #1
  404950:	079d      	lsls	r5, r3, #30
  404952:	d1f8      	bne.n	404946 <memset+0x12>
  404954:	2c03      	cmp	r4, #3
  404956:	d92e      	bls.n	4049b6 <memset+0x82>
  404958:	b2cd      	uxtb	r5, r1
  40495a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40495e:	2c0f      	cmp	r4, #15
  404960:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404964:	d919      	bls.n	40499a <memset+0x66>
  404966:	f103 0210 	add.w	r2, r3, #16
  40496a:	4626      	mov	r6, r4
  40496c:	3e10      	subs	r6, #16
  40496e:	2e0f      	cmp	r6, #15
  404970:	f842 5c10 	str.w	r5, [r2, #-16]
  404974:	f842 5c0c 	str.w	r5, [r2, #-12]
  404978:	f842 5c08 	str.w	r5, [r2, #-8]
  40497c:	f842 5c04 	str.w	r5, [r2, #-4]
  404980:	f102 0210 	add.w	r2, r2, #16
  404984:	d8f2      	bhi.n	40496c <memset+0x38>
  404986:	f1a4 0210 	sub.w	r2, r4, #16
  40498a:	f022 020f 	bic.w	r2, r2, #15
  40498e:	f004 040f 	and.w	r4, r4, #15
  404992:	3210      	adds	r2, #16
  404994:	2c03      	cmp	r4, #3
  404996:	4413      	add	r3, r2
  404998:	d90d      	bls.n	4049b6 <memset+0x82>
  40499a:	461e      	mov	r6, r3
  40499c:	4622      	mov	r2, r4
  40499e:	3a04      	subs	r2, #4
  4049a0:	2a03      	cmp	r2, #3
  4049a2:	f846 5b04 	str.w	r5, [r6], #4
  4049a6:	d8fa      	bhi.n	40499e <memset+0x6a>
  4049a8:	1f22      	subs	r2, r4, #4
  4049aa:	f022 0203 	bic.w	r2, r2, #3
  4049ae:	3204      	adds	r2, #4
  4049b0:	4413      	add	r3, r2
  4049b2:	f004 0403 	and.w	r4, r4, #3
  4049b6:	b12c      	cbz	r4, 4049c4 <memset+0x90>
  4049b8:	b2c9      	uxtb	r1, r1
  4049ba:	441c      	add	r4, r3
  4049bc:	f803 1b01 	strb.w	r1, [r3], #1
  4049c0:	429c      	cmp	r4, r3
  4049c2:	d1fb      	bne.n	4049bc <memset+0x88>
  4049c4:	bc70      	pop	{r4, r5, r6}
  4049c6:	4770      	bx	lr
  4049c8:	4614      	mov	r4, r2
  4049ca:	4603      	mov	r3, r0
  4049cc:	e7c2      	b.n	404954 <memset+0x20>
  4049ce:	bf00      	nop

004049d0 <__malloc_lock>:
  4049d0:	4801      	ldr	r0, [pc, #4]	; (4049d8 <__malloc_lock+0x8>)
  4049d2:	f001 bd59 	b.w	406488 <__retarget_lock_acquire_recursive>
  4049d6:	bf00      	nop
  4049d8:	2040c880 	.word	0x2040c880

004049dc <__malloc_unlock>:
  4049dc:	4801      	ldr	r0, [pc, #4]	; (4049e4 <__malloc_unlock+0x8>)
  4049de:	f001 bd55 	b.w	40648c <__retarget_lock_release_recursive>
  4049e2:	bf00      	nop
  4049e4:	2040c880 	.word	0x2040c880

004049e8 <_sbrk_r>:
  4049e8:	b538      	push	{r3, r4, r5, lr}
  4049ea:	4c07      	ldr	r4, [pc, #28]	; (404a08 <_sbrk_r+0x20>)
  4049ec:	2300      	movs	r3, #0
  4049ee:	4605      	mov	r5, r0
  4049f0:	4608      	mov	r0, r1
  4049f2:	6023      	str	r3, [r4, #0]
  4049f4:	f7fd fa84 	bl	401f00 <_sbrk>
  4049f8:	1c43      	adds	r3, r0, #1
  4049fa:	d000      	beq.n	4049fe <_sbrk_r+0x16>
  4049fc:	bd38      	pop	{r3, r4, r5, pc}
  4049fe:	6823      	ldr	r3, [r4, #0]
  404a00:	2b00      	cmp	r3, #0
  404a02:	d0fb      	beq.n	4049fc <_sbrk_r+0x14>
  404a04:	602b      	str	r3, [r5, #0]
  404a06:	bd38      	pop	{r3, r4, r5, pc}
  404a08:	2040c894 	.word	0x2040c894

00404a0c <setbuf>:
  404a0c:	2900      	cmp	r1, #0
  404a0e:	bf0c      	ite	eq
  404a10:	2202      	moveq	r2, #2
  404a12:	2200      	movne	r2, #0
  404a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a18:	f000 b800 	b.w	404a1c <setvbuf>

00404a1c <setvbuf>:
  404a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a20:	4c61      	ldr	r4, [pc, #388]	; (404ba8 <setvbuf+0x18c>)
  404a22:	6825      	ldr	r5, [r4, #0]
  404a24:	b083      	sub	sp, #12
  404a26:	4604      	mov	r4, r0
  404a28:	460f      	mov	r7, r1
  404a2a:	4690      	mov	r8, r2
  404a2c:	461e      	mov	r6, r3
  404a2e:	b115      	cbz	r5, 404a36 <setvbuf+0x1a>
  404a30:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404a32:	2b00      	cmp	r3, #0
  404a34:	d064      	beq.n	404b00 <setvbuf+0xe4>
  404a36:	f1b8 0f02 	cmp.w	r8, #2
  404a3a:	d006      	beq.n	404a4a <setvbuf+0x2e>
  404a3c:	f1b8 0f01 	cmp.w	r8, #1
  404a40:	f200 809f 	bhi.w	404b82 <setvbuf+0x166>
  404a44:	2e00      	cmp	r6, #0
  404a46:	f2c0 809c 	blt.w	404b82 <setvbuf+0x166>
  404a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a4c:	07d8      	lsls	r0, r3, #31
  404a4e:	d534      	bpl.n	404aba <setvbuf+0x9e>
  404a50:	4621      	mov	r1, r4
  404a52:	4628      	mov	r0, r5
  404a54:	f001 f900 	bl	405c58 <_fflush_r>
  404a58:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a5a:	b141      	cbz	r1, 404a6e <setvbuf+0x52>
  404a5c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a60:	4299      	cmp	r1, r3
  404a62:	d002      	beq.n	404a6a <setvbuf+0x4e>
  404a64:	4628      	mov	r0, r5
  404a66:	f001 fa75 	bl	405f54 <_free_r>
  404a6a:	2300      	movs	r3, #0
  404a6c:	6323      	str	r3, [r4, #48]	; 0x30
  404a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a72:	2200      	movs	r2, #0
  404a74:	61a2      	str	r2, [r4, #24]
  404a76:	6062      	str	r2, [r4, #4]
  404a78:	061a      	lsls	r2, r3, #24
  404a7a:	d43a      	bmi.n	404af2 <setvbuf+0xd6>
  404a7c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404a80:	f023 0303 	bic.w	r3, r3, #3
  404a84:	f1b8 0f02 	cmp.w	r8, #2
  404a88:	81a3      	strh	r3, [r4, #12]
  404a8a:	d01d      	beq.n	404ac8 <setvbuf+0xac>
  404a8c:	ab01      	add	r3, sp, #4
  404a8e:	466a      	mov	r2, sp
  404a90:	4621      	mov	r1, r4
  404a92:	4628      	mov	r0, r5
  404a94:	f001 fcfc 	bl	406490 <__swhatbuf_r>
  404a98:	89a3      	ldrh	r3, [r4, #12]
  404a9a:	4318      	orrs	r0, r3
  404a9c:	81a0      	strh	r0, [r4, #12]
  404a9e:	2e00      	cmp	r6, #0
  404aa0:	d132      	bne.n	404b08 <setvbuf+0xec>
  404aa2:	9e00      	ldr	r6, [sp, #0]
  404aa4:	4630      	mov	r0, r6
  404aa6:	f7ff fbf3 	bl	404290 <malloc>
  404aaa:	4607      	mov	r7, r0
  404aac:	2800      	cmp	r0, #0
  404aae:	d06b      	beq.n	404b88 <setvbuf+0x16c>
  404ab0:	89a3      	ldrh	r3, [r4, #12]
  404ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404ab6:	81a3      	strh	r3, [r4, #12]
  404ab8:	e028      	b.n	404b0c <setvbuf+0xf0>
  404aba:	89a3      	ldrh	r3, [r4, #12]
  404abc:	0599      	lsls	r1, r3, #22
  404abe:	d4c7      	bmi.n	404a50 <setvbuf+0x34>
  404ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404ac2:	f001 fce1 	bl	406488 <__retarget_lock_acquire_recursive>
  404ac6:	e7c3      	b.n	404a50 <setvbuf+0x34>
  404ac8:	2500      	movs	r5, #0
  404aca:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404acc:	2600      	movs	r6, #0
  404ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404ad2:	f043 0302 	orr.w	r3, r3, #2
  404ad6:	2001      	movs	r0, #1
  404ad8:	60a6      	str	r6, [r4, #8]
  404ada:	07ce      	lsls	r6, r1, #31
  404adc:	81a3      	strh	r3, [r4, #12]
  404ade:	6022      	str	r2, [r4, #0]
  404ae0:	6122      	str	r2, [r4, #16]
  404ae2:	6160      	str	r0, [r4, #20]
  404ae4:	d401      	bmi.n	404aea <setvbuf+0xce>
  404ae6:	0598      	lsls	r0, r3, #22
  404ae8:	d53e      	bpl.n	404b68 <setvbuf+0x14c>
  404aea:	4628      	mov	r0, r5
  404aec:	b003      	add	sp, #12
  404aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404af2:	6921      	ldr	r1, [r4, #16]
  404af4:	4628      	mov	r0, r5
  404af6:	f001 fa2d 	bl	405f54 <_free_r>
  404afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404afe:	e7bd      	b.n	404a7c <setvbuf+0x60>
  404b00:	4628      	mov	r0, r5
  404b02:	f001 f901 	bl	405d08 <__sinit>
  404b06:	e796      	b.n	404a36 <setvbuf+0x1a>
  404b08:	2f00      	cmp	r7, #0
  404b0a:	d0cb      	beq.n	404aa4 <setvbuf+0x88>
  404b0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404b0e:	2b00      	cmp	r3, #0
  404b10:	d033      	beq.n	404b7a <setvbuf+0x15e>
  404b12:	9b00      	ldr	r3, [sp, #0]
  404b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b18:	6027      	str	r7, [r4, #0]
  404b1a:	429e      	cmp	r6, r3
  404b1c:	bf1c      	itt	ne
  404b1e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404b22:	81a2      	strhne	r2, [r4, #12]
  404b24:	f1b8 0f01 	cmp.w	r8, #1
  404b28:	bf04      	itt	eq
  404b2a:	f042 0201 	orreq.w	r2, r2, #1
  404b2e:	81a2      	strheq	r2, [r4, #12]
  404b30:	b292      	uxth	r2, r2
  404b32:	f012 0308 	ands.w	r3, r2, #8
  404b36:	6127      	str	r7, [r4, #16]
  404b38:	6166      	str	r6, [r4, #20]
  404b3a:	d00e      	beq.n	404b5a <setvbuf+0x13e>
  404b3c:	07d1      	lsls	r1, r2, #31
  404b3e:	d51a      	bpl.n	404b76 <setvbuf+0x15a>
  404b40:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b42:	4276      	negs	r6, r6
  404b44:	2300      	movs	r3, #0
  404b46:	f015 0501 	ands.w	r5, r5, #1
  404b4a:	61a6      	str	r6, [r4, #24]
  404b4c:	60a3      	str	r3, [r4, #8]
  404b4e:	d009      	beq.n	404b64 <setvbuf+0x148>
  404b50:	2500      	movs	r5, #0
  404b52:	4628      	mov	r0, r5
  404b54:	b003      	add	sp, #12
  404b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b5a:	60a3      	str	r3, [r4, #8]
  404b5c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b5e:	f015 0501 	ands.w	r5, r5, #1
  404b62:	d1f5      	bne.n	404b50 <setvbuf+0x134>
  404b64:	0593      	lsls	r3, r2, #22
  404b66:	d4c0      	bmi.n	404aea <setvbuf+0xce>
  404b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b6a:	f001 fc8f 	bl	40648c <__retarget_lock_release_recursive>
  404b6e:	4628      	mov	r0, r5
  404b70:	b003      	add	sp, #12
  404b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b76:	60a6      	str	r6, [r4, #8]
  404b78:	e7f0      	b.n	404b5c <setvbuf+0x140>
  404b7a:	4628      	mov	r0, r5
  404b7c:	f001 f8c4 	bl	405d08 <__sinit>
  404b80:	e7c7      	b.n	404b12 <setvbuf+0xf6>
  404b82:	f04f 35ff 	mov.w	r5, #4294967295
  404b86:	e7b0      	b.n	404aea <setvbuf+0xce>
  404b88:	f8dd 9000 	ldr.w	r9, [sp]
  404b8c:	45b1      	cmp	r9, r6
  404b8e:	d004      	beq.n	404b9a <setvbuf+0x17e>
  404b90:	4648      	mov	r0, r9
  404b92:	f7ff fb7d 	bl	404290 <malloc>
  404b96:	4607      	mov	r7, r0
  404b98:	b920      	cbnz	r0, 404ba4 <setvbuf+0x188>
  404b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b9e:	f04f 35ff 	mov.w	r5, #4294967295
  404ba2:	e792      	b.n	404aca <setvbuf+0xae>
  404ba4:	464e      	mov	r6, r9
  404ba6:	e783      	b.n	404ab0 <setvbuf+0x94>
  404ba8:	20400014 	.word	0x20400014
	...

00404bc0 <strlen>:
  404bc0:	f890 f000 	pld	[r0]
  404bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404bc8:	f020 0107 	bic.w	r1, r0, #7
  404bcc:	f06f 0c00 	mvn.w	ip, #0
  404bd0:	f010 0407 	ands.w	r4, r0, #7
  404bd4:	f891 f020 	pld	[r1, #32]
  404bd8:	f040 8049 	bne.w	404c6e <strlen+0xae>
  404bdc:	f04f 0400 	mov.w	r4, #0
  404be0:	f06f 0007 	mvn.w	r0, #7
  404be4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404be8:	f891 f040 	pld	[r1, #64]	; 0x40
  404bec:	f100 0008 	add.w	r0, r0, #8
  404bf0:	fa82 f24c 	uadd8	r2, r2, ip
  404bf4:	faa4 f28c 	sel	r2, r4, ip
  404bf8:	fa83 f34c 	uadd8	r3, r3, ip
  404bfc:	faa2 f38c 	sel	r3, r2, ip
  404c00:	bb4b      	cbnz	r3, 404c56 <strlen+0x96>
  404c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404c06:	fa82 f24c 	uadd8	r2, r2, ip
  404c0a:	f100 0008 	add.w	r0, r0, #8
  404c0e:	faa4 f28c 	sel	r2, r4, ip
  404c12:	fa83 f34c 	uadd8	r3, r3, ip
  404c16:	faa2 f38c 	sel	r3, r2, ip
  404c1a:	b9e3      	cbnz	r3, 404c56 <strlen+0x96>
  404c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404c20:	fa82 f24c 	uadd8	r2, r2, ip
  404c24:	f100 0008 	add.w	r0, r0, #8
  404c28:	faa4 f28c 	sel	r2, r4, ip
  404c2c:	fa83 f34c 	uadd8	r3, r3, ip
  404c30:	faa2 f38c 	sel	r3, r2, ip
  404c34:	b97b      	cbnz	r3, 404c56 <strlen+0x96>
  404c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404c3a:	f101 0120 	add.w	r1, r1, #32
  404c3e:	fa82 f24c 	uadd8	r2, r2, ip
  404c42:	f100 0008 	add.w	r0, r0, #8
  404c46:	faa4 f28c 	sel	r2, r4, ip
  404c4a:	fa83 f34c 	uadd8	r3, r3, ip
  404c4e:	faa2 f38c 	sel	r3, r2, ip
  404c52:	2b00      	cmp	r3, #0
  404c54:	d0c6      	beq.n	404be4 <strlen+0x24>
  404c56:	2a00      	cmp	r2, #0
  404c58:	bf04      	itt	eq
  404c5a:	3004      	addeq	r0, #4
  404c5c:	461a      	moveq	r2, r3
  404c5e:	ba12      	rev	r2, r2
  404c60:	fab2 f282 	clz	r2, r2
  404c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404c6c:	4770      	bx	lr
  404c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404c72:	f004 0503 	and.w	r5, r4, #3
  404c76:	f1c4 0000 	rsb	r0, r4, #0
  404c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404c7e:	f014 0f04 	tst.w	r4, #4
  404c82:	f891 f040 	pld	[r1, #64]	; 0x40
  404c86:	fa0c f505 	lsl.w	r5, ip, r5
  404c8a:	ea62 0205 	orn	r2, r2, r5
  404c8e:	bf1c      	itt	ne
  404c90:	ea63 0305 	ornne	r3, r3, r5
  404c94:	4662      	movne	r2, ip
  404c96:	f04f 0400 	mov.w	r4, #0
  404c9a:	e7a9      	b.n	404bf0 <strlen+0x30>

00404c9c <__sprint_r.part.0>:
  404c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ca0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404ca2:	049c      	lsls	r4, r3, #18
  404ca4:	4693      	mov	fp, r2
  404ca6:	d52f      	bpl.n	404d08 <__sprint_r.part.0+0x6c>
  404ca8:	6893      	ldr	r3, [r2, #8]
  404caa:	6812      	ldr	r2, [r2, #0]
  404cac:	b353      	cbz	r3, 404d04 <__sprint_r.part.0+0x68>
  404cae:	460e      	mov	r6, r1
  404cb0:	4607      	mov	r7, r0
  404cb2:	f102 0908 	add.w	r9, r2, #8
  404cb6:	e919 0420 	ldmdb	r9, {r5, sl}
  404cba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404cbe:	d017      	beq.n	404cf0 <__sprint_r.part.0+0x54>
  404cc0:	3d04      	subs	r5, #4
  404cc2:	2400      	movs	r4, #0
  404cc4:	e001      	b.n	404cca <__sprint_r.part.0+0x2e>
  404cc6:	45a0      	cmp	r8, r4
  404cc8:	d010      	beq.n	404cec <__sprint_r.part.0+0x50>
  404cca:	4632      	mov	r2, r6
  404ccc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404cd0:	4638      	mov	r0, r7
  404cd2:	f001 f8bb 	bl	405e4c <_fputwc_r>
  404cd6:	1c43      	adds	r3, r0, #1
  404cd8:	f104 0401 	add.w	r4, r4, #1
  404cdc:	d1f3      	bne.n	404cc6 <__sprint_r.part.0+0x2a>
  404cde:	2300      	movs	r3, #0
  404ce0:	f8cb 3008 	str.w	r3, [fp, #8]
  404ce4:	f8cb 3004 	str.w	r3, [fp, #4]
  404ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cec:	f8db 3008 	ldr.w	r3, [fp, #8]
  404cf0:	f02a 0a03 	bic.w	sl, sl, #3
  404cf4:	eba3 030a 	sub.w	r3, r3, sl
  404cf8:	f8cb 3008 	str.w	r3, [fp, #8]
  404cfc:	f109 0908 	add.w	r9, r9, #8
  404d00:	2b00      	cmp	r3, #0
  404d02:	d1d8      	bne.n	404cb6 <__sprint_r.part.0+0x1a>
  404d04:	2000      	movs	r0, #0
  404d06:	e7ea      	b.n	404cde <__sprint_r.part.0+0x42>
  404d08:	f001 fa0a 	bl	406120 <__sfvwrite_r>
  404d0c:	2300      	movs	r3, #0
  404d0e:	f8cb 3008 	str.w	r3, [fp, #8]
  404d12:	f8cb 3004 	str.w	r3, [fp, #4]
  404d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d1a:	bf00      	nop

00404d1c <_vfiprintf_r>:
  404d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d20:	b0ad      	sub	sp, #180	; 0xb4
  404d22:	461d      	mov	r5, r3
  404d24:	468b      	mov	fp, r1
  404d26:	4690      	mov	r8, r2
  404d28:	9307      	str	r3, [sp, #28]
  404d2a:	9006      	str	r0, [sp, #24]
  404d2c:	b118      	cbz	r0, 404d36 <_vfiprintf_r+0x1a>
  404d2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404d30:	2b00      	cmp	r3, #0
  404d32:	f000 80f3 	beq.w	404f1c <_vfiprintf_r+0x200>
  404d36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d3a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404d3e:	07df      	lsls	r7, r3, #31
  404d40:	b281      	uxth	r1, r0
  404d42:	d402      	bmi.n	404d4a <_vfiprintf_r+0x2e>
  404d44:	058e      	lsls	r6, r1, #22
  404d46:	f140 80fc 	bpl.w	404f42 <_vfiprintf_r+0x226>
  404d4a:	048c      	lsls	r4, r1, #18
  404d4c:	d40a      	bmi.n	404d64 <_vfiprintf_r+0x48>
  404d4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d52:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404d5a:	f8ab 100c 	strh.w	r1, [fp, #12]
  404d5e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404d62:	b289      	uxth	r1, r1
  404d64:	0708      	lsls	r0, r1, #28
  404d66:	f140 80b3 	bpl.w	404ed0 <_vfiprintf_r+0x1b4>
  404d6a:	f8db 3010 	ldr.w	r3, [fp, #16]
  404d6e:	2b00      	cmp	r3, #0
  404d70:	f000 80ae 	beq.w	404ed0 <_vfiprintf_r+0x1b4>
  404d74:	f001 031a 	and.w	r3, r1, #26
  404d78:	2b0a      	cmp	r3, #10
  404d7a:	f000 80b5 	beq.w	404ee8 <_vfiprintf_r+0x1cc>
  404d7e:	2300      	movs	r3, #0
  404d80:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404d84:	930b      	str	r3, [sp, #44]	; 0x2c
  404d86:	9311      	str	r3, [sp, #68]	; 0x44
  404d88:	9310      	str	r3, [sp, #64]	; 0x40
  404d8a:	9303      	str	r3, [sp, #12]
  404d8c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404d90:	46ca      	mov	sl, r9
  404d92:	f8cd b010 	str.w	fp, [sp, #16]
  404d96:	f898 3000 	ldrb.w	r3, [r8]
  404d9a:	4644      	mov	r4, r8
  404d9c:	b1fb      	cbz	r3, 404dde <_vfiprintf_r+0xc2>
  404d9e:	2b25      	cmp	r3, #37	; 0x25
  404da0:	d102      	bne.n	404da8 <_vfiprintf_r+0x8c>
  404da2:	e01c      	b.n	404dde <_vfiprintf_r+0xc2>
  404da4:	2b25      	cmp	r3, #37	; 0x25
  404da6:	d003      	beq.n	404db0 <_vfiprintf_r+0x94>
  404da8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404dac:	2b00      	cmp	r3, #0
  404dae:	d1f9      	bne.n	404da4 <_vfiprintf_r+0x88>
  404db0:	eba4 0508 	sub.w	r5, r4, r8
  404db4:	b19d      	cbz	r5, 404dde <_vfiprintf_r+0xc2>
  404db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404db8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dba:	f8ca 8000 	str.w	r8, [sl]
  404dbe:	3301      	adds	r3, #1
  404dc0:	442a      	add	r2, r5
  404dc2:	2b07      	cmp	r3, #7
  404dc4:	f8ca 5004 	str.w	r5, [sl, #4]
  404dc8:	9211      	str	r2, [sp, #68]	; 0x44
  404dca:	9310      	str	r3, [sp, #64]	; 0x40
  404dcc:	dd7a      	ble.n	404ec4 <_vfiprintf_r+0x1a8>
  404dce:	2a00      	cmp	r2, #0
  404dd0:	f040 84b0 	bne.w	405734 <_vfiprintf_r+0xa18>
  404dd4:	9b03      	ldr	r3, [sp, #12]
  404dd6:	9210      	str	r2, [sp, #64]	; 0x40
  404dd8:	442b      	add	r3, r5
  404dda:	46ca      	mov	sl, r9
  404ddc:	9303      	str	r3, [sp, #12]
  404dde:	7823      	ldrb	r3, [r4, #0]
  404de0:	2b00      	cmp	r3, #0
  404de2:	f000 83e0 	beq.w	4055a6 <_vfiprintf_r+0x88a>
  404de6:	2000      	movs	r0, #0
  404de8:	f04f 0300 	mov.w	r3, #0
  404dec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404df0:	f104 0801 	add.w	r8, r4, #1
  404df4:	7862      	ldrb	r2, [r4, #1]
  404df6:	4605      	mov	r5, r0
  404df8:	4606      	mov	r6, r0
  404dfa:	4603      	mov	r3, r0
  404dfc:	f04f 34ff 	mov.w	r4, #4294967295
  404e00:	f108 0801 	add.w	r8, r8, #1
  404e04:	f1a2 0120 	sub.w	r1, r2, #32
  404e08:	2958      	cmp	r1, #88	; 0x58
  404e0a:	f200 82de 	bhi.w	4053ca <_vfiprintf_r+0x6ae>
  404e0e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404e12:	0221      	.short	0x0221
  404e14:	02dc02dc 	.word	0x02dc02dc
  404e18:	02dc0229 	.word	0x02dc0229
  404e1c:	02dc02dc 	.word	0x02dc02dc
  404e20:	02dc02dc 	.word	0x02dc02dc
  404e24:	028902dc 	.word	0x028902dc
  404e28:	02dc0295 	.word	0x02dc0295
  404e2c:	02bd00a2 	.word	0x02bd00a2
  404e30:	019f02dc 	.word	0x019f02dc
  404e34:	01a401a4 	.word	0x01a401a4
  404e38:	01a401a4 	.word	0x01a401a4
  404e3c:	01a401a4 	.word	0x01a401a4
  404e40:	01a401a4 	.word	0x01a401a4
  404e44:	02dc01a4 	.word	0x02dc01a4
  404e48:	02dc02dc 	.word	0x02dc02dc
  404e4c:	02dc02dc 	.word	0x02dc02dc
  404e50:	02dc02dc 	.word	0x02dc02dc
  404e54:	02dc02dc 	.word	0x02dc02dc
  404e58:	01b202dc 	.word	0x01b202dc
  404e5c:	02dc02dc 	.word	0x02dc02dc
  404e60:	02dc02dc 	.word	0x02dc02dc
  404e64:	02dc02dc 	.word	0x02dc02dc
  404e68:	02dc02dc 	.word	0x02dc02dc
  404e6c:	02dc02dc 	.word	0x02dc02dc
  404e70:	02dc0197 	.word	0x02dc0197
  404e74:	02dc02dc 	.word	0x02dc02dc
  404e78:	02dc02dc 	.word	0x02dc02dc
  404e7c:	02dc019b 	.word	0x02dc019b
  404e80:	025302dc 	.word	0x025302dc
  404e84:	02dc02dc 	.word	0x02dc02dc
  404e88:	02dc02dc 	.word	0x02dc02dc
  404e8c:	02dc02dc 	.word	0x02dc02dc
  404e90:	02dc02dc 	.word	0x02dc02dc
  404e94:	02dc02dc 	.word	0x02dc02dc
  404e98:	021b025a 	.word	0x021b025a
  404e9c:	02dc02dc 	.word	0x02dc02dc
  404ea0:	026e02dc 	.word	0x026e02dc
  404ea4:	02dc021b 	.word	0x02dc021b
  404ea8:	027302dc 	.word	0x027302dc
  404eac:	01f502dc 	.word	0x01f502dc
  404eb0:	02090182 	.word	0x02090182
  404eb4:	02dc02d7 	.word	0x02dc02d7
  404eb8:	02dc029a 	.word	0x02dc029a
  404ebc:	02dc00a7 	.word	0x02dc00a7
  404ec0:	022e02dc 	.word	0x022e02dc
  404ec4:	f10a 0a08 	add.w	sl, sl, #8
  404ec8:	9b03      	ldr	r3, [sp, #12]
  404eca:	442b      	add	r3, r5
  404ecc:	9303      	str	r3, [sp, #12]
  404ece:	e786      	b.n	404dde <_vfiprintf_r+0xc2>
  404ed0:	4659      	mov	r1, fp
  404ed2:	9806      	ldr	r0, [sp, #24]
  404ed4:	f000 fdac 	bl	405a30 <__swsetup_r>
  404ed8:	bb18      	cbnz	r0, 404f22 <_vfiprintf_r+0x206>
  404eda:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404ede:	f001 031a 	and.w	r3, r1, #26
  404ee2:	2b0a      	cmp	r3, #10
  404ee4:	f47f af4b 	bne.w	404d7e <_vfiprintf_r+0x62>
  404ee8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404eec:	2b00      	cmp	r3, #0
  404eee:	f6ff af46 	blt.w	404d7e <_vfiprintf_r+0x62>
  404ef2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404ef6:	07db      	lsls	r3, r3, #31
  404ef8:	d405      	bmi.n	404f06 <_vfiprintf_r+0x1ea>
  404efa:	058f      	lsls	r7, r1, #22
  404efc:	d403      	bmi.n	404f06 <_vfiprintf_r+0x1ea>
  404efe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f02:	f001 fac3 	bl	40648c <__retarget_lock_release_recursive>
  404f06:	462b      	mov	r3, r5
  404f08:	4642      	mov	r2, r8
  404f0a:	4659      	mov	r1, fp
  404f0c:	9806      	ldr	r0, [sp, #24]
  404f0e:	f000 fd4d 	bl	4059ac <__sbprintf>
  404f12:	9003      	str	r0, [sp, #12]
  404f14:	9803      	ldr	r0, [sp, #12]
  404f16:	b02d      	add	sp, #180	; 0xb4
  404f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f1c:	f000 fef4 	bl	405d08 <__sinit>
  404f20:	e709      	b.n	404d36 <_vfiprintf_r+0x1a>
  404f22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404f26:	07d9      	lsls	r1, r3, #31
  404f28:	d404      	bmi.n	404f34 <_vfiprintf_r+0x218>
  404f2a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404f2e:	059a      	lsls	r2, r3, #22
  404f30:	f140 84aa 	bpl.w	405888 <_vfiprintf_r+0xb6c>
  404f34:	f04f 33ff 	mov.w	r3, #4294967295
  404f38:	9303      	str	r3, [sp, #12]
  404f3a:	9803      	ldr	r0, [sp, #12]
  404f3c:	b02d      	add	sp, #180	; 0xb4
  404f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f42:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f46:	f001 fa9f 	bl	406488 <__retarget_lock_acquire_recursive>
  404f4a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404f4e:	b281      	uxth	r1, r0
  404f50:	e6fb      	b.n	404d4a <_vfiprintf_r+0x2e>
  404f52:	4276      	negs	r6, r6
  404f54:	9207      	str	r2, [sp, #28]
  404f56:	f043 0304 	orr.w	r3, r3, #4
  404f5a:	f898 2000 	ldrb.w	r2, [r8]
  404f5e:	e74f      	b.n	404e00 <_vfiprintf_r+0xe4>
  404f60:	9608      	str	r6, [sp, #32]
  404f62:	069e      	lsls	r6, r3, #26
  404f64:	f100 8450 	bmi.w	405808 <_vfiprintf_r+0xaec>
  404f68:	9907      	ldr	r1, [sp, #28]
  404f6a:	06dd      	lsls	r5, r3, #27
  404f6c:	460a      	mov	r2, r1
  404f6e:	f100 83ef 	bmi.w	405750 <_vfiprintf_r+0xa34>
  404f72:	0658      	lsls	r0, r3, #25
  404f74:	f140 83ec 	bpl.w	405750 <_vfiprintf_r+0xa34>
  404f78:	880e      	ldrh	r6, [r1, #0]
  404f7a:	3104      	adds	r1, #4
  404f7c:	2700      	movs	r7, #0
  404f7e:	2201      	movs	r2, #1
  404f80:	9107      	str	r1, [sp, #28]
  404f82:	f04f 0100 	mov.w	r1, #0
  404f86:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404f8a:	2500      	movs	r5, #0
  404f8c:	1c61      	adds	r1, r4, #1
  404f8e:	f000 8116 	beq.w	4051be <_vfiprintf_r+0x4a2>
  404f92:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404f96:	9102      	str	r1, [sp, #8]
  404f98:	ea56 0107 	orrs.w	r1, r6, r7
  404f9c:	f040 8114 	bne.w	4051c8 <_vfiprintf_r+0x4ac>
  404fa0:	2c00      	cmp	r4, #0
  404fa2:	f040 835c 	bne.w	40565e <_vfiprintf_r+0x942>
  404fa6:	2a00      	cmp	r2, #0
  404fa8:	f040 83b7 	bne.w	40571a <_vfiprintf_r+0x9fe>
  404fac:	f013 0301 	ands.w	r3, r3, #1
  404fb0:	9305      	str	r3, [sp, #20]
  404fb2:	f000 8457 	beq.w	405864 <_vfiprintf_r+0xb48>
  404fb6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404fba:	2330      	movs	r3, #48	; 0x30
  404fbc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404fc0:	9b05      	ldr	r3, [sp, #20]
  404fc2:	42a3      	cmp	r3, r4
  404fc4:	bfb8      	it	lt
  404fc6:	4623      	movlt	r3, r4
  404fc8:	9301      	str	r3, [sp, #4]
  404fca:	b10d      	cbz	r5, 404fd0 <_vfiprintf_r+0x2b4>
  404fcc:	3301      	adds	r3, #1
  404fce:	9301      	str	r3, [sp, #4]
  404fd0:	9b02      	ldr	r3, [sp, #8]
  404fd2:	f013 0302 	ands.w	r3, r3, #2
  404fd6:	9309      	str	r3, [sp, #36]	; 0x24
  404fd8:	d002      	beq.n	404fe0 <_vfiprintf_r+0x2c4>
  404fda:	9b01      	ldr	r3, [sp, #4]
  404fdc:	3302      	adds	r3, #2
  404fde:	9301      	str	r3, [sp, #4]
  404fe0:	9b02      	ldr	r3, [sp, #8]
  404fe2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404fe6:	930a      	str	r3, [sp, #40]	; 0x28
  404fe8:	f040 8217 	bne.w	40541a <_vfiprintf_r+0x6fe>
  404fec:	9b08      	ldr	r3, [sp, #32]
  404fee:	9a01      	ldr	r2, [sp, #4]
  404ff0:	1a9d      	subs	r5, r3, r2
  404ff2:	2d00      	cmp	r5, #0
  404ff4:	f340 8211 	ble.w	40541a <_vfiprintf_r+0x6fe>
  404ff8:	2d10      	cmp	r5, #16
  404ffa:	f340 8490 	ble.w	40591e <_vfiprintf_r+0xc02>
  404ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405000:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405002:	4ec4      	ldr	r6, [pc, #784]	; (405314 <_vfiprintf_r+0x5f8>)
  405004:	46d6      	mov	lr, sl
  405006:	2710      	movs	r7, #16
  405008:	46a2      	mov	sl, r4
  40500a:	4619      	mov	r1, r3
  40500c:	9c06      	ldr	r4, [sp, #24]
  40500e:	e007      	b.n	405020 <_vfiprintf_r+0x304>
  405010:	f101 0c02 	add.w	ip, r1, #2
  405014:	f10e 0e08 	add.w	lr, lr, #8
  405018:	4601      	mov	r1, r0
  40501a:	3d10      	subs	r5, #16
  40501c:	2d10      	cmp	r5, #16
  40501e:	dd11      	ble.n	405044 <_vfiprintf_r+0x328>
  405020:	1c48      	adds	r0, r1, #1
  405022:	3210      	adds	r2, #16
  405024:	2807      	cmp	r0, #7
  405026:	9211      	str	r2, [sp, #68]	; 0x44
  405028:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40502c:	9010      	str	r0, [sp, #64]	; 0x40
  40502e:	ddef      	ble.n	405010 <_vfiprintf_r+0x2f4>
  405030:	2a00      	cmp	r2, #0
  405032:	f040 81e4 	bne.w	4053fe <_vfiprintf_r+0x6e2>
  405036:	3d10      	subs	r5, #16
  405038:	2d10      	cmp	r5, #16
  40503a:	4611      	mov	r1, r2
  40503c:	f04f 0c01 	mov.w	ip, #1
  405040:	46ce      	mov	lr, r9
  405042:	dced      	bgt.n	405020 <_vfiprintf_r+0x304>
  405044:	4654      	mov	r4, sl
  405046:	4661      	mov	r1, ip
  405048:	46f2      	mov	sl, lr
  40504a:	442a      	add	r2, r5
  40504c:	2907      	cmp	r1, #7
  40504e:	9211      	str	r2, [sp, #68]	; 0x44
  405050:	f8ca 6000 	str.w	r6, [sl]
  405054:	f8ca 5004 	str.w	r5, [sl, #4]
  405058:	9110      	str	r1, [sp, #64]	; 0x40
  40505a:	f300 82ec 	bgt.w	405636 <_vfiprintf_r+0x91a>
  40505e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405062:	f10a 0a08 	add.w	sl, sl, #8
  405066:	1c48      	adds	r0, r1, #1
  405068:	2d00      	cmp	r5, #0
  40506a:	f040 81de 	bne.w	40542a <_vfiprintf_r+0x70e>
  40506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405070:	2b00      	cmp	r3, #0
  405072:	f000 81f8 	beq.w	405466 <_vfiprintf_r+0x74a>
  405076:	3202      	adds	r2, #2
  405078:	a90e      	add	r1, sp, #56	; 0x38
  40507a:	2302      	movs	r3, #2
  40507c:	2807      	cmp	r0, #7
  40507e:	9211      	str	r2, [sp, #68]	; 0x44
  405080:	9010      	str	r0, [sp, #64]	; 0x40
  405082:	e88a 000a 	stmia.w	sl, {r1, r3}
  405086:	f340 81ea 	ble.w	40545e <_vfiprintf_r+0x742>
  40508a:	2a00      	cmp	r2, #0
  40508c:	f040 838c 	bne.w	4057a8 <_vfiprintf_r+0xa8c>
  405090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405092:	2b80      	cmp	r3, #128	; 0x80
  405094:	f04f 0001 	mov.w	r0, #1
  405098:	4611      	mov	r1, r2
  40509a:	46ca      	mov	sl, r9
  40509c:	f040 81e7 	bne.w	40546e <_vfiprintf_r+0x752>
  4050a0:	9b08      	ldr	r3, [sp, #32]
  4050a2:	9d01      	ldr	r5, [sp, #4]
  4050a4:	1b5e      	subs	r6, r3, r5
  4050a6:	2e00      	cmp	r6, #0
  4050a8:	f340 81e1 	ble.w	40546e <_vfiprintf_r+0x752>
  4050ac:	2e10      	cmp	r6, #16
  4050ae:	4d9a      	ldr	r5, [pc, #616]	; (405318 <_vfiprintf_r+0x5fc>)
  4050b0:	f340 8450 	ble.w	405954 <_vfiprintf_r+0xc38>
  4050b4:	46d4      	mov	ip, sl
  4050b6:	2710      	movs	r7, #16
  4050b8:	46a2      	mov	sl, r4
  4050ba:	9c06      	ldr	r4, [sp, #24]
  4050bc:	e007      	b.n	4050ce <_vfiprintf_r+0x3b2>
  4050be:	f101 0e02 	add.w	lr, r1, #2
  4050c2:	f10c 0c08 	add.w	ip, ip, #8
  4050c6:	4601      	mov	r1, r0
  4050c8:	3e10      	subs	r6, #16
  4050ca:	2e10      	cmp	r6, #16
  4050cc:	dd11      	ble.n	4050f2 <_vfiprintf_r+0x3d6>
  4050ce:	1c48      	adds	r0, r1, #1
  4050d0:	3210      	adds	r2, #16
  4050d2:	2807      	cmp	r0, #7
  4050d4:	9211      	str	r2, [sp, #68]	; 0x44
  4050d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4050da:	9010      	str	r0, [sp, #64]	; 0x40
  4050dc:	ddef      	ble.n	4050be <_vfiprintf_r+0x3a2>
  4050de:	2a00      	cmp	r2, #0
  4050e0:	f040 829d 	bne.w	40561e <_vfiprintf_r+0x902>
  4050e4:	3e10      	subs	r6, #16
  4050e6:	2e10      	cmp	r6, #16
  4050e8:	f04f 0e01 	mov.w	lr, #1
  4050ec:	4611      	mov	r1, r2
  4050ee:	46cc      	mov	ip, r9
  4050f0:	dced      	bgt.n	4050ce <_vfiprintf_r+0x3b2>
  4050f2:	4654      	mov	r4, sl
  4050f4:	46e2      	mov	sl, ip
  4050f6:	4432      	add	r2, r6
  4050f8:	f1be 0f07 	cmp.w	lr, #7
  4050fc:	9211      	str	r2, [sp, #68]	; 0x44
  4050fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  405102:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405106:	f300 8369 	bgt.w	4057dc <_vfiprintf_r+0xac0>
  40510a:	f10a 0a08 	add.w	sl, sl, #8
  40510e:	f10e 0001 	add.w	r0, lr, #1
  405112:	4671      	mov	r1, lr
  405114:	e1ab      	b.n	40546e <_vfiprintf_r+0x752>
  405116:	9608      	str	r6, [sp, #32]
  405118:	f013 0220 	ands.w	r2, r3, #32
  40511c:	f040 838c 	bne.w	405838 <_vfiprintf_r+0xb1c>
  405120:	f013 0110 	ands.w	r1, r3, #16
  405124:	f040 831a 	bne.w	40575c <_vfiprintf_r+0xa40>
  405128:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40512c:	f000 8316 	beq.w	40575c <_vfiprintf_r+0xa40>
  405130:	9807      	ldr	r0, [sp, #28]
  405132:	460a      	mov	r2, r1
  405134:	4601      	mov	r1, r0
  405136:	3104      	adds	r1, #4
  405138:	8806      	ldrh	r6, [r0, #0]
  40513a:	9107      	str	r1, [sp, #28]
  40513c:	2700      	movs	r7, #0
  40513e:	e720      	b.n	404f82 <_vfiprintf_r+0x266>
  405140:	9608      	str	r6, [sp, #32]
  405142:	f043 0310 	orr.w	r3, r3, #16
  405146:	e7e7      	b.n	405118 <_vfiprintf_r+0x3fc>
  405148:	9608      	str	r6, [sp, #32]
  40514a:	f043 0310 	orr.w	r3, r3, #16
  40514e:	e708      	b.n	404f62 <_vfiprintf_r+0x246>
  405150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405154:	f898 2000 	ldrb.w	r2, [r8]
  405158:	e652      	b.n	404e00 <_vfiprintf_r+0xe4>
  40515a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40515e:	2600      	movs	r6, #0
  405160:	f818 2b01 	ldrb.w	r2, [r8], #1
  405164:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405168:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40516c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405170:	2909      	cmp	r1, #9
  405172:	d9f5      	bls.n	405160 <_vfiprintf_r+0x444>
  405174:	e646      	b.n	404e04 <_vfiprintf_r+0xe8>
  405176:	9608      	str	r6, [sp, #32]
  405178:	2800      	cmp	r0, #0
  40517a:	f040 8408 	bne.w	40598e <_vfiprintf_r+0xc72>
  40517e:	f043 0310 	orr.w	r3, r3, #16
  405182:	069e      	lsls	r6, r3, #26
  405184:	f100 834c 	bmi.w	405820 <_vfiprintf_r+0xb04>
  405188:	06dd      	lsls	r5, r3, #27
  40518a:	f100 82f3 	bmi.w	405774 <_vfiprintf_r+0xa58>
  40518e:	0658      	lsls	r0, r3, #25
  405190:	f140 82f0 	bpl.w	405774 <_vfiprintf_r+0xa58>
  405194:	9d07      	ldr	r5, [sp, #28]
  405196:	f9b5 6000 	ldrsh.w	r6, [r5]
  40519a:	462a      	mov	r2, r5
  40519c:	17f7      	asrs	r7, r6, #31
  40519e:	3204      	adds	r2, #4
  4051a0:	4630      	mov	r0, r6
  4051a2:	4639      	mov	r1, r7
  4051a4:	9207      	str	r2, [sp, #28]
  4051a6:	2800      	cmp	r0, #0
  4051a8:	f171 0200 	sbcs.w	r2, r1, #0
  4051ac:	f2c0 835d 	blt.w	40586a <_vfiprintf_r+0xb4e>
  4051b0:	1c61      	adds	r1, r4, #1
  4051b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4051b6:	f04f 0201 	mov.w	r2, #1
  4051ba:	f47f aeea 	bne.w	404f92 <_vfiprintf_r+0x276>
  4051be:	ea56 0107 	orrs.w	r1, r6, r7
  4051c2:	f000 824d 	beq.w	405660 <_vfiprintf_r+0x944>
  4051c6:	9302      	str	r3, [sp, #8]
  4051c8:	2a01      	cmp	r2, #1
  4051ca:	f000 828c 	beq.w	4056e6 <_vfiprintf_r+0x9ca>
  4051ce:	2a02      	cmp	r2, #2
  4051d0:	f040 825c 	bne.w	40568c <_vfiprintf_r+0x970>
  4051d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4051d6:	46cb      	mov	fp, r9
  4051d8:	0933      	lsrs	r3, r6, #4
  4051da:	f006 010f 	and.w	r1, r6, #15
  4051de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4051e2:	093a      	lsrs	r2, r7, #4
  4051e4:	461e      	mov	r6, r3
  4051e6:	4617      	mov	r7, r2
  4051e8:	5c43      	ldrb	r3, [r0, r1]
  4051ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4051ee:	ea56 0307 	orrs.w	r3, r6, r7
  4051f2:	d1f1      	bne.n	4051d8 <_vfiprintf_r+0x4bc>
  4051f4:	eba9 030b 	sub.w	r3, r9, fp
  4051f8:	9305      	str	r3, [sp, #20]
  4051fa:	e6e1      	b.n	404fc0 <_vfiprintf_r+0x2a4>
  4051fc:	2800      	cmp	r0, #0
  4051fe:	f040 83c0 	bne.w	405982 <_vfiprintf_r+0xc66>
  405202:	0699      	lsls	r1, r3, #26
  405204:	f100 8367 	bmi.w	4058d6 <_vfiprintf_r+0xbba>
  405208:	06da      	lsls	r2, r3, #27
  40520a:	f100 80f1 	bmi.w	4053f0 <_vfiprintf_r+0x6d4>
  40520e:	065b      	lsls	r3, r3, #25
  405210:	f140 80ee 	bpl.w	4053f0 <_vfiprintf_r+0x6d4>
  405214:	9a07      	ldr	r2, [sp, #28]
  405216:	6813      	ldr	r3, [r2, #0]
  405218:	3204      	adds	r2, #4
  40521a:	9207      	str	r2, [sp, #28]
  40521c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405220:	801a      	strh	r2, [r3, #0]
  405222:	e5b8      	b.n	404d96 <_vfiprintf_r+0x7a>
  405224:	9807      	ldr	r0, [sp, #28]
  405226:	4a3d      	ldr	r2, [pc, #244]	; (40531c <_vfiprintf_r+0x600>)
  405228:	9608      	str	r6, [sp, #32]
  40522a:	920b      	str	r2, [sp, #44]	; 0x2c
  40522c:	6806      	ldr	r6, [r0, #0]
  40522e:	2278      	movs	r2, #120	; 0x78
  405230:	2130      	movs	r1, #48	; 0x30
  405232:	3004      	adds	r0, #4
  405234:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405238:	f043 0302 	orr.w	r3, r3, #2
  40523c:	9007      	str	r0, [sp, #28]
  40523e:	2700      	movs	r7, #0
  405240:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405244:	2202      	movs	r2, #2
  405246:	e69c      	b.n	404f82 <_vfiprintf_r+0x266>
  405248:	9608      	str	r6, [sp, #32]
  40524a:	2800      	cmp	r0, #0
  40524c:	d099      	beq.n	405182 <_vfiprintf_r+0x466>
  40524e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405252:	e796      	b.n	405182 <_vfiprintf_r+0x466>
  405254:	f898 2000 	ldrb.w	r2, [r8]
  405258:	2d00      	cmp	r5, #0
  40525a:	f47f add1 	bne.w	404e00 <_vfiprintf_r+0xe4>
  40525e:	2001      	movs	r0, #1
  405260:	2520      	movs	r5, #32
  405262:	e5cd      	b.n	404e00 <_vfiprintf_r+0xe4>
  405264:	f043 0301 	orr.w	r3, r3, #1
  405268:	f898 2000 	ldrb.w	r2, [r8]
  40526c:	e5c8      	b.n	404e00 <_vfiprintf_r+0xe4>
  40526e:	9608      	str	r6, [sp, #32]
  405270:	2800      	cmp	r0, #0
  405272:	f040 8393 	bne.w	40599c <_vfiprintf_r+0xc80>
  405276:	4929      	ldr	r1, [pc, #164]	; (40531c <_vfiprintf_r+0x600>)
  405278:	910b      	str	r1, [sp, #44]	; 0x2c
  40527a:	069f      	lsls	r7, r3, #26
  40527c:	f100 82e8 	bmi.w	405850 <_vfiprintf_r+0xb34>
  405280:	9807      	ldr	r0, [sp, #28]
  405282:	06de      	lsls	r6, r3, #27
  405284:	4601      	mov	r1, r0
  405286:	f100 8270 	bmi.w	40576a <_vfiprintf_r+0xa4e>
  40528a:	065d      	lsls	r5, r3, #25
  40528c:	f140 826d 	bpl.w	40576a <_vfiprintf_r+0xa4e>
  405290:	3104      	adds	r1, #4
  405292:	8806      	ldrh	r6, [r0, #0]
  405294:	9107      	str	r1, [sp, #28]
  405296:	2700      	movs	r7, #0
  405298:	07d8      	lsls	r0, r3, #31
  40529a:	f140 8222 	bpl.w	4056e2 <_vfiprintf_r+0x9c6>
  40529e:	ea56 0107 	orrs.w	r1, r6, r7
  4052a2:	f000 821e 	beq.w	4056e2 <_vfiprintf_r+0x9c6>
  4052a6:	2130      	movs	r1, #48	; 0x30
  4052a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4052ac:	f043 0302 	orr.w	r3, r3, #2
  4052b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4052b4:	2202      	movs	r2, #2
  4052b6:	e664      	b.n	404f82 <_vfiprintf_r+0x266>
  4052b8:	9608      	str	r6, [sp, #32]
  4052ba:	2800      	cmp	r0, #0
  4052bc:	f040 836b 	bne.w	405996 <_vfiprintf_r+0xc7a>
  4052c0:	4917      	ldr	r1, [pc, #92]	; (405320 <_vfiprintf_r+0x604>)
  4052c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4052c4:	e7d9      	b.n	40527a <_vfiprintf_r+0x55e>
  4052c6:	9907      	ldr	r1, [sp, #28]
  4052c8:	9608      	str	r6, [sp, #32]
  4052ca:	680a      	ldr	r2, [r1, #0]
  4052cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4052d0:	f04f 0000 	mov.w	r0, #0
  4052d4:	460a      	mov	r2, r1
  4052d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4052da:	3204      	adds	r2, #4
  4052dc:	2001      	movs	r0, #1
  4052de:	9001      	str	r0, [sp, #4]
  4052e0:	9207      	str	r2, [sp, #28]
  4052e2:	9005      	str	r0, [sp, #20]
  4052e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4052e8:	9302      	str	r3, [sp, #8]
  4052ea:	2400      	movs	r4, #0
  4052ec:	e670      	b.n	404fd0 <_vfiprintf_r+0x2b4>
  4052ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4052f2:	f898 2000 	ldrb.w	r2, [r8]
  4052f6:	e583      	b.n	404e00 <_vfiprintf_r+0xe4>
  4052f8:	f898 2000 	ldrb.w	r2, [r8]
  4052fc:	2a6c      	cmp	r2, #108	; 0x6c
  4052fe:	bf03      	ittte	eq
  405300:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405304:	f043 0320 	orreq.w	r3, r3, #32
  405308:	f108 0801 	addeq.w	r8, r8, #1
  40530c:	f043 0310 	orrne.w	r3, r3, #16
  405310:	e576      	b.n	404e00 <_vfiprintf_r+0xe4>
  405312:	bf00      	nop
  405314:	00407320 	.word	0x00407320
  405318:	00407330 	.word	0x00407330
  40531c:	00407304 	.word	0x00407304
  405320:	004072f0 	.word	0x004072f0
  405324:	9907      	ldr	r1, [sp, #28]
  405326:	680e      	ldr	r6, [r1, #0]
  405328:	460a      	mov	r2, r1
  40532a:	2e00      	cmp	r6, #0
  40532c:	f102 0204 	add.w	r2, r2, #4
  405330:	f6ff ae0f 	blt.w	404f52 <_vfiprintf_r+0x236>
  405334:	9207      	str	r2, [sp, #28]
  405336:	f898 2000 	ldrb.w	r2, [r8]
  40533a:	e561      	b.n	404e00 <_vfiprintf_r+0xe4>
  40533c:	f898 2000 	ldrb.w	r2, [r8]
  405340:	2001      	movs	r0, #1
  405342:	252b      	movs	r5, #43	; 0x2b
  405344:	e55c      	b.n	404e00 <_vfiprintf_r+0xe4>
  405346:	9907      	ldr	r1, [sp, #28]
  405348:	9608      	str	r6, [sp, #32]
  40534a:	f8d1 b000 	ldr.w	fp, [r1]
  40534e:	f04f 0200 	mov.w	r2, #0
  405352:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405356:	1d0e      	adds	r6, r1, #4
  405358:	f1bb 0f00 	cmp.w	fp, #0
  40535c:	f000 82e5 	beq.w	40592a <_vfiprintf_r+0xc0e>
  405360:	1c67      	adds	r7, r4, #1
  405362:	f000 82c4 	beq.w	4058ee <_vfiprintf_r+0xbd2>
  405366:	4622      	mov	r2, r4
  405368:	2100      	movs	r1, #0
  40536a:	4658      	mov	r0, fp
  40536c:	9301      	str	r3, [sp, #4]
  40536e:	f001 f91f 	bl	4065b0 <memchr>
  405372:	9b01      	ldr	r3, [sp, #4]
  405374:	2800      	cmp	r0, #0
  405376:	f000 82e5 	beq.w	405944 <_vfiprintf_r+0xc28>
  40537a:	eba0 020b 	sub.w	r2, r0, fp
  40537e:	9205      	str	r2, [sp, #20]
  405380:	9607      	str	r6, [sp, #28]
  405382:	9302      	str	r3, [sp, #8]
  405384:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405388:	2400      	movs	r4, #0
  40538a:	e619      	b.n	404fc0 <_vfiprintf_r+0x2a4>
  40538c:	f898 2000 	ldrb.w	r2, [r8]
  405390:	2a2a      	cmp	r2, #42	; 0x2a
  405392:	f108 0701 	add.w	r7, r8, #1
  405396:	f000 82e9 	beq.w	40596c <_vfiprintf_r+0xc50>
  40539a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40539e:	2909      	cmp	r1, #9
  4053a0:	46b8      	mov	r8, r7
  4053a2:	f04f 0400 	mov.w	r4, #0
  4053a6:	f63f ad2d 	bhi.w	404e04 <_vfiprintf_r+0xe8>
  4053aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4053ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4053b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4053b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4053ba:	2909      	cmp	r1, #9
  4053bc:	d9f5      	bls.n	4053aa <_vfiprintf_r+0x68e>
  4053be:	e521      	b.n	404e04 <_vfiprintf_r+0xe8>
  4053c0:	f043 0320 	orr.w	r3, r3, #32
  4053c4:	f898 2000 	ldrb.w	r2, [r8]
  4053c8:	e51a      	b.n	404e00 <_vfiprintf_r+0xe4>
  4053ca:	9608      	str	r6, [sp, #32]
  4053cc:	2800      	cmp	r0, #0
  4053ce:	f040 82db 	bne.w	405988 <_vfiprintf_r+0xc6c>
  4053d2:	2a00      	cmp	r2, #0
  4053d4:	f000 80e7 	beq.w	4055a6 <_vfiprintf_r+0x88a>
  4053d8:	2101      	movs	r1, #1
  4053da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4053de:	f04f 0200 	mov.w	r2, #0
  4053e2:	9101      	str	r1, [sp, #4]
  4053e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4053e8:	9105      	str	r1, [sp, #20]
  4053ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4053ee:	e77b      	b.n	4052e8 <_vfiprintf_r+0x5cc>
  4053f0:	9a07      	ldr	r2, [sp, #28]
  4053f2:	6813      	ldr	r3, [r2, #0]
  4053f4:	3204      	adds	r2, #4
  4053f6:	9207      	str	r2, [sp, #28]
  4053f8:	9a03      	ldr	r2, [sp, #12]
  4053fa:	601a      	str	r2, [r3, #0]
  4053fc:	e4cb      	b.n	404d96 <_vfiprintf_r+0x7a>
  4053fe:	aa0f      	add	r2, sp, #60	; 0x3c
  405400:	9904      	ldr	r1, [sp, #16]
  405402:	4620      	mov	r0, r4
  405404:	f7ff fc4a 	bl	404c9c <__sprint_r.part.0>
  405408:	2800      	cmp	r0, #0
  40540a:	f040 8139 	bne.w	405680 <_vfiprintf_r+0x964>
  40540e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405410:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405412:	f101 0c01 	add.w	ip, r1, #1
  405416:	46ce      	mov	lr, r9
  405418:	e5ff      	b.n	40501a <_vfiprintf_r+0x2fe>
  40541a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40541c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40541e:	1c48      	adds	r0, r1, #1
  405420:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405424:	2d00      	cmp	r5, #0
  405426:	f43f ae22 	beq.w	40506e <_vfiprintf_r+0x352>
  40542a:	3201      	adds	r2, #1
  40542c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405430:	2101      	movs	r1, #1
  405432:	2807      	cmp	r0, #7
  405434:	9211      	str	r2, [sp, #68]	; 0x44
  405436:	9010      	str	r0, [sp, #64]	; 0x40
  405438:	f8ca 5000 	str.w	r5, [sl]
  40543c:	f8ca 1004 	str.w	r1, [sl, #4]
  405440:	f340 8108 	ble.w	405654 <_vfiprintf_r+0x938>
  405444:	2a00      	cmp	r2, #0
  405446:	f040 81bc 	bne.w	4057c2 <_vfiprintf_r+0xaa6>
  40544a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40544c:	2b00      	cmp	r3, #0
  40544e:	f43f ae1f 	beq.w	405090 <_vfiprintf_r+0x374>
  405452:	ab0e      	add	r3, sp, #56	; 0x38
  405454:	2202      	movs	r2, #2
  405456:	4608      	mov	r0, r1
  405458:	931c      	str	r3, [sp, #112]	; 0x70
  40545a:	921d      	str	r2, [sp, #116]	; 0x74
  40545c:	46ca      	mov	sl, r9
  40545e:	4601      	mov	r1, r0
  405460:	f10a 0a08 	add.w	sl, sl, #8
  405464:	3001      	adds	r0, #1
  405466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405468:	2b80      	cmp	r3, #128	; 0x80
  40546a:	f43f ae19 	beq.w	4050a0 <_vfiprintf_r+0x384>
  40546e:	9b05      	ldr	r3, [sp, #20]
  405470:	1ae4      	subs	r4, r4, r3
  405472:	2c00      	cmp	r4, #0
  405474:	dd2e      	ble.n	4054d4 <_vfiprintf_r+0x7b8>
  405476:	2c10      	cmp	r4, #16
  405478:	4db3      	ldr	r5, [pc, #716]	; (405748 <_vfiprintf_r+0xa2c>)
  40547a:	dd1e      	ble.n	4054ba <_vfiprintf_r+0x79e>
  40547c:	46d6      	mov	lr, sl
  40547e:	2610      	movs	r6, #16
  405480:	9f06      	ldr	r7, [sp, #24]
  405482:	f8dd a010 	ldr.w	sl, [sp, #16]
  405486:	e006      	b.n	405496 <_vfiprintf_r+0x77a>
  405488:	1c88      	adds	r0, r1, #2
  40548a:	f10e 0e08 	add.w	lr, lr, #8
  40548e:	4619      	mov	r1, r3
  405490:	3c10      	subs	r4, #16
  405492:	2c10      	cmp	r4, #16
  405494:	dd10      	ble.n	4054b8 <_vfiprintf_r+0x79c>
  405496:	1c4b      	adds	r3, r1, #1
  405498:	3210      	adds	r2, #16
  40549a:	2b07      	cmp	r3, #7
  40549c:	9211      	str	r2, [sp, #68]	; 0x44
  40549e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4054a2:	9310      	str	r3, [sp, #64]	; 0x40
  4054a4:	ddf0      	ble.n	405488 <_vfiprintf_r+0x76c>
  4054a6:	2a00      	cmp	r2, #0
  4054a8:	d165      	bne.n	405576 <_vfiprintf_r+0x85a>
  4054aa:	3c10      	subs	r4, #16
  4054ac:	2c10      	cmp	r4, #16
  4054ae:	f04f 0001 	mov.w	r0, #1
  4054b2:	4611      	mov	r1, r2
  4054b4:	46ce      	mov	lr, r9
  4054b6:	dcee      	bgt.n	405496 <_vfiprintf_r+0x77a>
  4054b8:	46f2      	mov	sl, lr
  4054ba:	4422      	add	r2, r4
  4054bc:	2807      	cmp	r0, #7
  4054be:	9211      	str	r2, [sp, #68]	; 0x44
  4054c0:	f8ca 5000 	str.w	r5, [sl]
  4054c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4054c8:	9010      	str	r0, [sp, #64]	; 0x40
  4054ca:	f300 8085 	bgt.w	4055d8 <_vfiprintf_r+0x8bc>
  4054ce:	f10a 0a08 	add.w	sl, sl, #8
  4054d2:	3001      	adds	r0, #1
  4054d4:	9905      	ldr	r1, [sp, #20]
  4054d6:	f8ca b000 	str.w	fp, [sl]
  4054da:	440a      	add	r2, r1
  4054dc:	2807      	cmp	r0, #7
  4054de:	9211      	str	r2, [sp, #68]	; 0x44
  4054e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4054e4:	9010      	str	r0, [sp, #64]	; 0x40
  4054e6:	f340 8082 	ble.w	4055ee <_vfiprintf_r+0x8d2>
  4054ea:	2a00      	cmp	r2, #0
  4054ec:	f040 8118 	bne.w	405720 <_vfiprintf_r+0xa04>
  4054f0:	9b02      	ldr	r3, [sp, #8]
  4054f2:	9210      	str	r2, [sp, #64]	; 0x40
  4054f4:	0758      	lsls	r0, r3, #29
  4054f6:	d535      	bpl.n	405564 <_vfiprintf_r+0x848>
  4054f8:	9b08      	ldr	r3, [sp, #32]
  4054fa:	9901      	ldr	r1, [sp, #4]
  4054fc:	1a5c      	subs	r4, r3, r1
  4054fe:	2c00      	cmp	r4, #0
  405500:	f340 80e7 	ble.w	4056d2 <_vfiprintf_r+0x9b6>
  405504:	46ca      	mov	sl, r9
  405506:	2c10      	cmp	r4, #16
  405508:	f340 8218 	ble.w	40593c <_vfiprintf_r+0xc20>
  40550c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40550e:	4e8f      	ldr	r6, [pc, #572]	; (40574c <_vfiprintf_r+0xa30>)
  405510:	9f06      	ldr	r7, [sp, #24]
  405512:	f8dd b010 	ldr.w	fp, [sp, #16]
  405516:	2510      	movs	r5, #16
  405518:	e006      	b.n	405528 <_vfiprintf_r+0x80c>
  40551a:	1c88      	adds	r0, r1, #2
  40551c:	f10a 0a08 	add.w	sl, sl, #8
  405520:	4619      	mov	r1, r3
  405522:	3c10      	subs	r4, #16
  405524:	2c10      	cmp	r4, #16
  405526:	dd11      	ble.n	40554c <_vfiprintf_r+0x830>
  405528:	1c4b      	adds	r3, r1, #1
  40552a:	3210      	adds	r2, #16
  40552c:	2b07      	cmp	r3, #7
  40552e:	9211      	str	r2, [sp, #68]	; 0x44
  405530:	f8ca 6000 	str.w	r6, [sl]
  405534:	f8ca 5004 	str.w	r5, [sl, #4]
  405538:	9310      	str	r3, [sp, #64]	; 0x40
  40553a:	ddee      	ble.n	40551a <_vfiprintf_r+0x7fe>
  40553c:	bb42      	cbnz	r2, 405590 <_vfiprintf_r+0x874>
  40553e:	3c10      	subs	r4, #16
  405540:	2c10      	cmp	r4, #16
  405542:	f04f 0001 	mov.w	r0, #1
  405546:	4611      	mov	r1, r2
  405548:	46ca      	mov	sl, r9
  40554a:	dced      	bgt.n	405528 <_vfiprintf_r+0x80c>
  40554c:	4422      	add	r2, r4
  40554e:	2807      	cmp	r0, #7
  405550:	9211      	str	r2, [sp, #68]	; 0x44
  405552:	f8ca 6000 	str.w	r6, [sl]
  405556:	f8ca 4004 	str.w	r4, [sl, #4]
  40555a:	9010      	str	r0, [sp, #64]	; 0x40
  40555c:	dd51      	ble.n	405602 <_vfiprintf_r+0x8e6>
  40555e:	2a00      	cmp	r2, #0
  405560:	f040 819b 	bne.w	40589a <_vfiprintf_r+0xb7e>
  405564:	9b03      	ldr	r3, [sp, #12]
  405566:	9a08      	ldr	r2, [sp, #32]
  405568:	9901      	ldr	r1, [sp, #4]
  40556a:	428a      	cmp	r2, r1
  40556c:	bfac      	ite	ge
  40556e:	189b      	addge	r3, r3, r2
  405570:	185b      	addlt	r3, r3, r1
  405572:	9303      	str	r3, [sp, #12]
  405574:	e04e      	b.n	405614 <_vfiprintf_r+0x8f8>
  405576:	aa0f      	add	r2, sp, #60	; 0x3c
  405578:	4651      	mov	r1, sl
  40557a:	4638      	mov	r0, r7
  40557c:	f7ff fb8e 	bl	404c9c <__sprint_r.part.0>
  405580:	2800      	cmp	r0, #0
  405582:	f040 813f 	bne.w	405804 <_vfiprintf_r+0xae8>
  405586:	9910      	ldr	r1, [sp, #64]	; 0x40
  405588:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40558a:	1c48      	adds	r0, r1, #1
  40558c:	46ce      	mov	lr, r9
  40558e:	e77f      	b.n	405490 <_vfiprintf_r+0x774>
  405590:	aa0f      	add	r2, sp, #60	; 0x3c
  405592:	4659      	mov	r1, fp
  405594:	4638      	mov	r0, r7
  405596:	f7ff fb81 	bl	404c9c <__sprint_r.part.0>
  40559a:	b960      	cbnz	r0, 4055b6 <_vfiprintf_r+0x89a>
  40559c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40559e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055a0:	1c48      	adds	r0, r1, #1
  4055a2:	46ca      	mov	sl, r9
  4055a4:	e7bd      	b.n	405522 <_vfiprintf_r+0x806>
  4055a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4055ac:	2b00      	cmp	r3, #0
  4055ae:	f040 81d4 	bne.w	40595a <_vfiprintf_r+0xc3e>
  4055b2:	2300      	movs	r3, #0
  4055b4:	9310      	str	r3, [sp, #64]	; 0x40
  4055b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4055ba:	f013 0f01 	tst.w	r3, #1
  4055be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4055c2:	d102      	bne.n	4055ca <_vfiprintf_r+0x8ae>
  4055c4:	059a      	lsls	r2, r3, #22
  4055c6:	f140 80de 	bpl.w	405786 <_vfiprintf_r+0xa6a>
  4055ca:	065b      	lsls	r3, r3, #25
  4055cc:	f53f acb2 	bmi.w	404f34 <_vfiprintf_r+0x218>
  4055d0:	9803      	ldr	r0, [sp, #12]
  4055d2:	b02d      	add	sp, #180	; 0xb4
  4055d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055d8:	2a00      	cmp	r2, #0
  4055da:	f040 8106 	bne.w	4057ea <_vfiprintf_r+0xace>
  4055de:	9a05      	ldr	r2, [sp, #20]
  4055e0:	921d      	str	r2, [sp, #116]	; 0x74
  4055e2:	2301      	movs	r3, #1
  4055e4:	9211      	str	r2, [sp, #68]	; 0x44
  4055e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4055ea:	9310      	str	r3, [sp, #64]	; 0x40
  4055ec:	46ca      	mov	sl, r9
  4055ee:	f10a 0a08 	add.w	sl, sl, #8
  4055f2:	9b02      	ldr	r3, [sp, #8]
  4055f4:	0759      	lsls	r1, r3, #29
  4055f6:	d504      	bpl.n	405602 <_vfiprintf_r+0x8e6>
  4055f8:	9b08      	ldr	r3, [sp, #32]
  4055fa:	9901      	ldr	r1, [sp, #4]
  4055fc:	1a5c      	subs	r4, r3, r1
  4055fe:	2c00      	cmp	r4, #0
  405600:	dc81      	bgt.n	405506 <_vfiprintf_r+0x7ea>
  405602:	9b03      	ldr	r3, [sp, #12]
  405604:	9908      	ldr	r1, [sp, #32]
  405606:	9801      	ldr	r0, [sp, #4]
  405608:	4281      	cmp	r1, r0
  40560a:	bfac      	ite	ge
  40560c:	185b      	addge	r3, r3, r1
  40560e:	181b      	addlt	r3, r3, r0
  405610:	9303      	str	r3, [sp, #12]
  405612:	bb72      	cbnz	r2, 405672 <_vfiprintf_r+0x956>
  405614:	2300      	movs	r3, #0
  405616:	9310      	str	r3, [sp, #64]	; 0x40
  405618:	46ca      	mov	sl, r9
  40561a:	f7ff bbbc 	b.w	404d96 <_vfiprintf_r+0x7a>
  40561e:	aa0f      	add	r2, sp, #60	; 0x3c
  405620:	9904      	ldr	r1, [sp, #16]
  405622:	4620      	mov	r0, r4
  405624:	f7ff fb3a 	bl	404c9c <__sprint_r.part.0>
  405628:	bb50      	cbnz	r0, 405680 <_vfiprintf_r+0x964>
  40562a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40562c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40562e:	f101 0e01 	add.w	lr, r1, #1
  405632:	46cc      	mov	ip, r9
  405634:	e548      	b.n	4050c8 <_vfiprintf_r+0x3ac>
  405636:	2a00      	cmp	r2, #0
  405638:	f040 8140 	bne.w	4058bc <_vfiprintf_r+0xba0>
  40563c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405640:	2900      	cmp	r1, #0
  405642:	f000 811b 	beq.w	40587c <_vfiprintf_r+0xb60>
  405646:	2201      	movs	r2, #1
  405648:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40564c:	4610      	mov	r0, r2
  40564e:	921d      	str	r2, [sp, #116]	; 0x74
  405650:	911c      	str	r1, [sp, #112]	; 0x70
  405652:	46ca      	mov	sl, r9
  405654:	4601      	mov	r1, r0
  405656:	f10a 0a08 	add.w	sl, sl, #8
  40565a:	3001      	adds	r0, #1
  40565c:	e507      	b.n	40506e <_vfiprintf_r+0x352>
  40565e:	9b02      	ldr	r3, [sp, #8]
  405660:	2a01      	cmp	r2, #1
  405662:	f000 8098 	beq.w	405796 <_vfiprintf_r+0xa7a>
  405666:	2a02      	cmp	r2, #2
  405668:	d10d      	bne.n	405686 <_vfiprintf_r+0x96a>
  40566a:	9302      	str	r3, [sp, #8]
  40566c:	2600      	movs	r6, #0
  40566e:	2700      	movs	r7, #0
  405670:	e5b0      	b.n	4051d4 <_vfiprintf_r+0x4b8>
  405672:	aa0f      	add	r2, sp, #60	; 0x3c
  405674:	9904      	ldr	r1, [sp, #16]
  405676:	9806      	ldr	r0, [sp, #24]
  405678:	f7ff fb10 	bl	404c9c <__sprint_r.part.0>
  40567c:	2800      	cmp	r0, #0
  40567e:	d0c9      	beq.n	405614 <_vfiprintf_r+0x8f8>
  405680:	f8dd b010 	ldr.w	fp, [sp, #16]
  405684:	e797      	b.n	4055b6 <_vfiprintf_r+0x89a>
  405686:	9302      	str	r3, [sp, #8]
  405688:	2600      	movs	r6, #0
  40568a:	2700      	movs	r7, #0
  40568c:	4649      	mov	r1, r9
  40568e:	e000      	b.n	405692 <_vfiprintf_r+0x976>
  405690:	4659      	mov	r1, fp
  405692:	08f2      	lsrs	r2, r6, #3
  405694:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405698:	08f8      	lsrs	r0, r7, #3
  40569a:	f006 0307 	and.w	r3, r6, #7
  40569e:	4607      	mov	r7, r0
  4056a0:	4616      	mov	r6, r2
  4056a2:	3330      	adds	r3, #48	; 0x30
  4056a4:	ea56 0207 	orrs.w	r2, r6, r7
  4056a8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4056ac:	f101 3bff 	add.w	fp, r1, #4294967295
  4056b0:	d1ee      	bne.n	405690 <_vfiprintf_r+0x974>
  4056b2:	9a02      	ldr	r2, [sp, #8]
  4056b4:	07d6      	lsls	r6, r2, #31
  4056b6:	f57f ad9d 	bpl.w	4051f4 <_vfiprintf_r+0x4d8>
  4056ba:	2b30      	cmp	r3, #48	; 0x30
  4056bc:	f43f ad9a 	beq.w	4051f4 <_vfiprintf_r+0x4d8>
  4056c0:	3902      	subs	r1, #2
  4056c2:	2330      	movs	r3, #48	; 0x30
  4056c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4056c8:	eba9 0301 	sub.w	r3, r9, r1
  4056cc:	9305      	str	r3, [sp, #20]
  4056ce:	468b      	mov	fp, r1
  4056d0:	e476      	b.n	404fc0 <_vfiprintf_r+0x2a4>
  4056d2:	9b03      	ldr	r3, [sp, #12]
  4056d4:	9a08      	ldr	r2, [sp, #32]
  4056d6:	428a      	cmp	r2, r1
  4056d8:	bfac      	ite	ge
  4056da:	189b      	addge	r3, r3, r2
  4056dc:	185b      	addlt	r3, r3, r1
  4056de:	9303      	str	r3, [sp, #12]
  4056e0:	e798      	b.n	405614 <_vfiprintf_r+0x8f8>
  4056e2:	2202      	movs	r2, #2
  4056e4:	e44d      	b.n	404f82 <_vfiprintf_r+0x266>
  4056e6:	2f00      	cmp	r7, #0
  4056e8:	bf08      	it	eq
  4056ea:	2e0a      	cmpeq	r6, #10
  4056ec:	d352      	bcc.n	405794 <_vfiprintf_r+0xa78>
  4056ee:	46cb      	mov	fp, r9
  4056f0:	4630      	mov	r0, r6
  4056f2:	4639      	mov	r1, r7
  4056f4:	220a      	movs	r2, #10
  4056f6:	2300      	movs	r3, #0
  4056f8:	f001 fbc6 	bl	406e88 <__aeabi_uldivmod>
  4056fc:	3230      	adds	r2, #48	; 0x30
  4056fe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405702:	4630      	mov	r0, r6
  405704:	4639      	mov	r1, r7
  405706:	2300      	movs	r3, #0
  405708:	220a      	movs	r2, #10
  40570a:	f001 fbbd 	bl	406e88 <__aeabi_uldivmod>
  40570e:	4606      	mov	r6, r0
  405710:	460f      	mov	r7, r1
  405712:	ea56 0307 	orrs.w	r3, r6, r7
  405716:	d1eb      	bne.n	4056f0 <_vfiprintf_r+0x9d4>
  405718:	e56c      	b.n	4051f4 <_vfiprintf_r+0x4d8>
  40571a:	9405      	str	r4, [sp, #20]
  40571c:	46cb      	mov	fp, r9
  40571e:	e44f      	b.n	404fc0 <_vfiprintf_r+0x2a4>
  405720:	aa0f      	add	r2, sp, #60	; 0x3c
  405722:	9904      	ldr	r1, [sp, #16]
  405724:	9806      	ldr	r0, [sp, #24]
  405726:	f7ff fab9 	bl	404c9c <__sprint_r.part.0>
  40572a:	2800      	cmp	r0, #0
  40572c:	d1a8      	bne.n	405680 <_vfiprintf_r+0x964>
  40572e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405730:	46ca      	mov	sl, r9
  405732:	e75e      	b.n	4055f2 <_vfiprintf_r+0x8d6>
  405734:	aa0f      	add	r2, sp, #60	; 0x3c
  405736:	9904      	ldr	r1, [sp, #16]
  405738:	9806      	ldr	r0, [sp, #24]
  40573a:	f7ff faaf 	bl	404c9c <__sprint_r.part.0>
  40573e:	2800      	cmp	r0, #0
  405740:	d19e      	bne.n	405680 <_vfiprintf_r+0x964>
  405742:	46ca      	mov	sl, r9
  405744:	f7ff bbc0 	b.w	404ec8 <_vfiprintf_r+0x1ac>
  405748:	00407330 	.word	0x00407330
  40574c:	00407320 	.word	0x00407320
  405750:	3104      	adds	r1, #4
  405752:	6816      	ldr	r6, [r2, #0]
  405754:	9107      	str	r1, [sp, #28]
  405756:	2201      	movs	r2, #1
  405758:	2700      	movs	r7, #0
  40575a:	e412      	b.n	404f82 <_vfiprintf_r+0x266>
  40575c:	9807      	ldr	r0, [sp, #28]
  40575e:	4601      	mov	r1, r0
  405760:	3104      	adds	r1, #4
  405762:	6806      	ldr	r6, [r0, #0]
  405764:	9107      	str	r1, [sp, #28]
  405766:	2700      	movs	r7, #0
  405768:	e40b      	b.n	404f82 <_vfiprintf_r+0x266>
  40576a:	680e      	ldr	r6, [r1, #0]
  40576c:	3104      	adds	r1, #4
  40576e:	9107      	str	r1, [sp, #28]
  405770:	2700      	movs	r7, #0
  405772:	e591      	b.n	405298 <_vfiprintf_r+0x57c>
  405774:	9907      	ldr	r1, [sp, #28]
  405776:	680e      	ldr	r6, [r1, #0]
  405778:	460a      	mov	r2, r1
  40577a:	17f7      	asrs	r7, r6, #31
  40577c:	3204      	adds	r2, #4
  40577e:	9207      	str	r2, [sp, #28]
  405780:	4630      	mov	r0, r6
  405782:	4639      	mov	r1, r7
  405784:	e50f      	b.n	4051a6 <_vfiprintf_r+0x48a>
  405786:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40578a:	f000 fe7f 	bl	40648c <__retarget_lock_release_recursive>
  40578e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405792:	e71a      	b.n	4055ca <_vfiprintf_r+0x8ae>
  405794:	9b02      	ldr	r3, [sp, #8]
  405796:	9302      	str	r3, [sp, #8]
  405798:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40579c:	3630      	adds	r6, #48	; 0x30
  40579e:	2301      	movs	r3, #1
  4057a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4057a4:	9305      	str	r3, [sp, #20]
  4057a6:	e40b      	b.n	404fc0 <_vfiprintf_r+0x2a4>
  4057a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4057aa:	9904      	ldr	r1, [sp, #16]
  4057ac:	9806      	ldr	r0, [sp, #24]
  4057ae:	f7ff fa75 	bl	404c9c <__sprint_r.part.0>
  4057b2:	2800      	cmp	r0, #0
  4057b4:	f47f af64 	bne.w	405680 <_vfiprintf_r+0x964>
  4057b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057bc:	1c48      	adds	r0, r1, #1
  4057be:	46ca      	mov	sl, r9
  4057c0:	e651      	b.n	405466 <_vfiprintf_r+0x74a>
  4057c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4057c4:	9904      	ldr	r1, [sp, #16]
  4057c6:	9806      	ldr	r0, [sp, #24]
  4057c8:	f7ff fa68 	bl	404c9c <__sprint_r.part.0>
  4057cc:	2800      	cmp	r0, #0
  4057ce:	f47f af57 	bne.w	405680 <_vfiprintf_r+0x964>
  4057d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057d6:	1c48      	adds	r0, r1, #1
  4057d8:	46ca      	mov	sl, r9
  4057da:	e448      	b.n	40506e <_vfiprintf_r+0x352>
  4057dc:	2a00      	cmp	r2, #0
  4057de:	f040 8091 	bne.w	405904 <_vfiprintf_r+0xbe8>
  4057e2:	2001      	movs	r0, #1
  4057e4:	4611      	mov	r1, r2
  4057e6:	46ca      	mov	sl, r9
  4057e8:	e641      	b.n	40546e <_vfiprintf_r+0x752>
  4057ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4057ec:	9904      	ldr	r1, [sp, #16]
  4057ee:	9806      	ldr	r0, [sp, #24]
  4057f0:	f7ff fa54 	bl	404c9c <__sprint_r.part.0>
  4057f4:	2800      	cmp	r0, #0
  4057f6:	f47f af43 	bne.w	405680 <_vfiprintf_r+0x964>
  4057fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  4057fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057fe:	3001      	adds	r0, #1
  405800:	46ca      	mov	sl, r9
  405802:	e667      	b.n	4054d4 <_vfiprintf_r+0x7b8>
  405804:	46d3      	mov	fp, sl
  405806:	e6d6      	b.n	4055b6 <_vfiprintf_r+0x89a>
  405808:	9e07      	ldr	r6, [sp, #28]
  40580a:	3607      	adds	r6, #7
  40580c:	f026 0207 	bic.w	r2, r6, #7
  405810:	f102 0108 	add.w	r1, r2, #8
  405814:	e9d2 6700 	ldrd	r6, r7, [r2]
  405818:	9107      	str	r1, [sp, #28]
  40581a:	2201      	movs	r2, #1
  40581c:	f7ff bbb1 	b.w	404f82 <_vfiprintf_r+0x266>
  405820:	9e07      	ldr	r6, [sp, #28]
  405822:	3607      	adds	r6, #7
  405824:	f026 0607 	bic.w	r6, r6, #7
  405828:	e9d6 0100 	ldrd	r0, r1, [r6]
  40582c:	f106 0208 	add.w	r2, r6, #8
  405830:	9207      	str	r2, [sp, #28]
  405832:	4606      	mov	r6, r0
  405834:	460f      	mov	r7, r1
  405836:	e4b6      	b.n	4051a6 <_vfiprintf_r+0x48a>
  405838:	9e07      	ldr	r6, [sp, #28]
  40583a:	3607      	adds	r6, #7
  40583c:	f026 0207 	bic.w	r2, r6, #7
  405840:	f102 0108 	add.w	r1, r2, #8
  405844:	e9d2 6700 	ldrd	r6, r7, [r2]
  405848:	9107      	str	r1, [sp, #28]
  40584a:	2200      	movs	r2, #0
  40584c:	f7ff bb99 	b.w	404f82 <_vfiprintf_r+0x266>
  405850:	9e07      	ldr	r6, [sp, #28]
  405852:	3607      	adds	r6, #7
  405854:	f026 0107 	bic.w	r1, r6, #7
  405858:	f101 0008 	add.w	r0, r1, #8
  40585c:	9007      	str	r0, [sp, #28]
  40585e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405862:	e519      	b.n	405298 <_vfiprintf_r+0x57c>
  405864:	46cb      	mov	fp, r9
  405866:	f7ff bbab 	b.w	404fc0 <_vfiprintf_r+0x2a4>
  40586a:	252d      	movs	r5, #45	; 0x2d
  40586c:	4276      	negs	r6, r6
  40586e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405872:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405876:	2201      	movs	r2, #1
  405878:	f7ff bb88 	b.w	404f8c <_vfiprintf_r+0x270>
  40587c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40587e:	b9b3      	cbnz	r3, 4058ae <_vfiprintf_r+0xb92>
  405880:	4611      	mov	r1, r2
  405882:	2001      	movs	r0, #1
  405884:	46ca      	mov	sl, r9
  405886:	e5f2      	b.n	40546e <_vfiprintf_r+0x752>
  405888:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40588c:	f000 fdfe 	bl	40648c <__retarget_lock_release_recursive>
  405890:	f04f 33ff 	mov.w	r3, #4294967295
  405894:	9303      	str	r3, [sp, #12]
  405896:	f7ff bb50 	b.w	404f3a <_vfiprintf_r+0x21e>
  40589a:	aa0f      	add	r2, sp, #60	; 0x3c
  40589c:	9904      	ldr	r1, [sp, #16]
  40589e:	9806      	ldr	r0, [sp, #24]
  4058a0:	f7ff f9fc 	bl	404c9c <__sprint_r.part.0>
  4058a4:	2800      	cmp	r0, #0
  4058a6:	f47f aeeb 	bne.w	405680 <_vfiprintf_r+0x964>
  4058aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4058ac:	e6a9      	b.n	405602 <_vfiprintf_r+0x8e6>
  4058ae:	ab0e      	add	r3, sp, #56	; 0x38
  4058b0:	2202      	movs	r2, #2
  4058b2:	931c      	str	r3, [sp, #112]	; 0x70
  4058b4:	921d      	str	r2, [sp, #116]	; 0x74
  4058b6:	2001      	movs	r0, #1
  4058b8:	46ca      	mov	sl, r9
  4058ba:	e5d0      	b.n	40545e <_vfiprintf_r+0x742>
  4058bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4058be:	9904      	ldr	r1, [sp, #16]
  4058c0:	9806      	ldr	r0, [sp, #24]
  4058c2:	f7ff f9eb 	bl	404c9c <__sprint_r.part.0>
  4058c6:	2800      	cmp	r0, #0
  4058c8:	f47f aeda 	bne.w	405680 <_vfiprintf_r+0x964>
  4058cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4058ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4058d0:	1c48      	adds	r0, r1, #1
  4058d2:	46ca      	mov	sl, r9
  4058d4:	e5a4      	b.n	405420 <_vfiprintf_r+0x704>
  4058d6:	9a07      	ldr	r2, [sp, #28]
  4058d8:	9903      	ldr	r1, [sp, #12]
  4058da:	6813      	ldr	r3, [r2, #0]
  4058dc:	17cd      	asrs	r5, r1, #31
  4058de:	4608      	mov	r0, r1
  4058e0:	3204      	adds	r2, #4
  4058e2:	4629      	mov	r1, r5
  4058e4:	9207      	str	r2, [sp, #28]
  4058e6:	e9c3 0100 	strd	r0, r1, [r3]
  4058ea:	f7ff ba54 	b.w	404d96 <_vfiprintf_r+0x7a>
  4058ee:	4658      	mov	r0, fp
  4058f0:	9607      	str	r6, [sp, #28]
  4058f2:	9302      	str	r3, [sp, #8]
  4058f4:	f7ff f964 	bl	404bc0 <strlen>
  4058f8:	2400      	movs	r4, #0
  4058fa:	9005      	str	r0, [sp, #20]
  4058fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405900:	f7ff bb5e 	b.w	404fc0 <_vfiprintf_r+0x2a4>
  405904:	aa0f      	add	r2, sp, #60	; 0x3c
  405906:	9904      	ldr	r1, [sp, #16]
  405908:	9806      	ldr	r0, [sp, #24]
  40590a:	f7ff f9c7 	bl	404c9c <__sprint_r.part.0>
  40590e:	2800      	cmp	r0, #0
  405910:	f47f aeb6 	bne.w	405680 <_vfiprintf_r+0x964>
  405914:	9910      	ldr	r1, [sp, #64]	; 0x40
  405916:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405918:	1c48      	adds	r0, r1, #1
  40591a:	46ca      	mov	sl, r9
  40591c:	e5a7      	b.n	40546e <_vfiprintf_r+0x752>
  40591e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405920:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405922:	4e20      	ldr	r6, [pc, #128]	; (4059a4 <_vfiprintf_r+0xc88>)
  405924:	3101      	adds	r1, #1
  405926:	f7ff bb90 	b.w	40504a <_vfiprintf_r+0x32e>
  40592a:	2c06      	cmp	r4, #6
  40592c:	bf28      	it	cs
  40592e:	2406      	movcs	r4, #6
  405930:	9405      	str	r4, [sp, #20]
  405932:	9607      	str	r6, [sp, #28]
  405934:	9401      	str	r4, [sp, #4]
  405936:	f8df b070 	ldr.w	fp, [pc, #112]	; 4059a8 <_vfiprintf_r+0xc8c>
  40593a:	e4d5      	b.n	4052e8 <_vfiprintf_r+0x5cc>
  40593c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40593e:	4e19      	ldr	r6, [pc, #100]	; (4059a4 <_vfiprintf_r+0xc88>)
  405940:	3001      	adds	r0, #1
  405942:	e603      	b.n	40554c <_vfiprintf_r+0x830>
  405944:	9405      	str	r4, [sp, #20]
  405946:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40594a:	9607      	str	r6, [sp, #28]
  40594c:	9302      	str	r3, [sp, #8]
  40594e:	4604      	mov	r4, r0
  405950:	f7ff bb36 	b.w	404fc0 <_vfiprintf_r+0x2a4>
  405954:	4686      	mov	lr, r0
  405956:	f7ff bbce 	b.w	4050f6 <_vfiprintf_r+0x3da>
  40595a:	9806      	ldr	r0, [sp, #24]
  40595c:	aa0f      	add	r2, sp, #60	; 0x3c
  40595e:	4659      	mov	r1, fp
  405960:	f7ff f99c 	bl	404c9c <__sprint_r.part.0>
  405964:	2800      	cmp	r0, #0
  405966:	f43f ae24 	beq.w	4055b2 <_vfiprintf_r+0x896>
  40596a:	e624      	b.n	4055b6 <_vfiprintf_r+0x89a>
  40596c:	9907      	ldr	r1, [sp, #28]
  40596e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405972:	680c      	ldr	r4, [r1, #0]
  405974:	3104      	adds	r1, #4
  405976:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40597a:	46b8      	mov	r8, r7
  40597c:	9107      	str	r1, [sp, #28]
  40597e:	f7ff ba3f 	b.w	404e00 <_vfiprintf_r+0xe4>
  405982:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405986:	e43c      	b.n	405202 <_vfiprintf_r+0x4e6>
  405988:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40598c:	e521      	b.n	4053d2 <_vfiprintf_r+0x6b6>
  40598e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405992:	f7ff bbf4 	b.w	40517e <_vfiprintf_r+0x462>
  405996:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40599a:	e491      	b.n	4052c0 <_vfiprintf_r+0x5a4>
  40599c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4059a0:	e469      	b.n	405276 <_vfiprintf_r+0x55a>
  4059a2:	bf00      	nop
  4059a4:	00407320 	.word	0x00407320
  4059a8:	00407318 	.word	0x00407318

004059ac <__sbprintf>:
  4059ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059b0:	460c      	mov	r4, r1
  4059b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4059b6:	8989      	ldrh	r1, [r1, #12]
  4059b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4059ba:	89e5      	ldrh	r5, [r4, #14]
  4059bc:	9619      	str	r6, [sp, #100]	; 0x64
  4059be:	f021 0102 	bic.w	r1, r1, #2
  4059c2:	4606      	mov	r6, r0
  4059c4:	69e0      	ldr	r0, [r4, #28]
  4059c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4059ca:	4617      	mov	r7, r2
  4059cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4059d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4059d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4059d6:	4698      	mov	r8, r3
  4059d8:	ad1a      	add	r5, sp, #104	; 0x68
  4059da:	2300      	movs	r3, #0
  4059dc:	9007      	str	r0, [sp, #28]
  4059de:	a816      	add	r0, sp, #88	; 0x58
  4059e0:	9209      	str	r2, [sp, #36]	; 0x24
  4059e2:	9306      	str	r3, [sp, #24]
  4059e4:	9500      	str	r5, [sp, #0]
  4059e6:	9504      	str	r5, [sp, #16]
  4059e8:	9102      	str	r1, [sp, #8]
  4059ea:	9105      	str	r1, [sp, #20]
  4059ec:	f000 fd48 	bl	406480 <__retarget_lock_init_recursive>
  4059f0:	4643      	mov	r3, r8
  4059f2:	463a      	mov	r2, r7
  4059f4:	4669      	mov	r1, sp
  4059f6:	4630      	mov	r0, r6
  4059f8:	f7ff f990 	bl	404d1c <_vfiprintf_r>
  4059fc:	1e05      	subs	r5, r0, #0
  4059fe:	db07      	blt.n	405a10 <__sbprintf+0x64>
  405a00:	4630      	mov	r0, r6
  405a02:	4669      	mov	r1, sp
  405a04:	f000 f928 	bl	405c58 <_fflush_r>
  405a08:	2800      	cmp	r0, #0
  405a0a:	bf18      	it	ne
  405a0c:	f04f 35ff 	movne.w	r5, #4294967295
  405a10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405a14:	065b      	lsls	r3, r3, #25
  405a16:	d503      	bpl.n	405a20 <__sbprintf+0x74>
  405a18:	89a3      	ldrh	r3, [r4, #12]
  405a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a1e:	81a3      	strh	r3, [r4, #12]
  405a20:	9816      	ldr	r0, [sp, #88]	; 0x58
  405a22:	f000 fd2f 	bl	406484 <__retarget_lock_close_recursive>
  405a26:	4628      	mov	r0, r5
  405a28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405a30 <__swsetup_r>:
  405a30:	b538      	push	{r3, r4, r5, lr}
  405a32:	4b30      	ldr	r3, [pc, #192]	; (405af4 <__swsetup_r+0xc4>)
  405a34:	681b      	ldr	r3, [r3, #0]
  405a36:	4605      	mov	r5, r0
  405a38:	460c      	mov	r4, r1
  405a3a:	b113      	cbz	r3, 405a42 <__swsetup_r+0x12>
  405a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405a3e:	2a00      	cmp	r2, #0
  405a40:	d038      	beq.n	405ab4 <__swsetup_r+0x84>
  405a42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405a46:	b293      	uxth	r3, r2
  405a48:	0718      	lsls	r0, r3, #28
  405a4a:	d50c      	bpl.n	405a66 <__swsetup_r+0x36>
  405a4c:	6920      	ldr	r0, [r4, #16]
  405a4e:	b1a8      	cbz	r0, 405a7c <__swsetup_r+0x4c>
  405a50:	f013 0201 	ands.w	r2, r3, #1
  405a54:	d01e      	beq.n	405a94 <__swsetup_r+0x64>
  405a56:	6963      	ldr	r3, [r4, #20]
  405a58:	2200      	movs	r2, #0
  405a5a:	425b      	negs	r3, r3
  405a5c:	61a3      	str	r3, [r4, #24]
  405a5e:	60a2      	str	r2, [r4, #8]
  405a60:	b1f0      	cbz	r0, 405aa0 <__swsetup_r+0x70>
  405a62:	2000      	movs	r0, #0
  405a64:	bd38      	pop	{r3, r4, r5, pc}
  405a66:	06d9      	lsls	r1, r3, #27
  405a68:	d53c      	bpl.n	405ae4 <__swsetup_r+0xb4>
  405a6a:	0758      	lsls	r0, r3, #29
  405a6c:	d426      	bmi.n	405abc <__swsetup_r+0x8c>
  405a6e:	6920      	ldr	r0, [r4, #16]
  405a70:	f042 0308 	orr.w	r3, r2, #8
  405a74:	81a3      	strh	r3, [r4, #12]
  405a76:	b29b      	uxth	r3, r3
  405a78:	2800      	cmp	r0, #0
  405a7a:	d1e9      	bne.n	405a50 <__swsetup_r+0x20>
  405a7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405a80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405a84:	d0e4      	beq.n	405a50 <__swsetup_r+0x20>
  405a86:	4628      	mov	r0, r5
  405a88:	4621      	mov	r1, r4
  405a8a:	f000 fd2f 	bl	4064ec <__smakebuf_r>
  405a8e:	89a3      	ldrh	r3, [r4, #12]
  405a90:	6920      	ldr	r0, [r4, #16]
  405a92:	e7dd      	b.n	405a50 <__swsetup_r+0x20>
  405a94:	0799      	lsls	r1, r3, #30
  405a96:	bf58      	it	pl
  405a98:	6962      	ldrpl	r2, [r4, #20]
  405a9a:	60a2      	str	r2, [r4, #8]
  405a9c:	2800      	cmp	r0, #0
  405a9e:	d1e0      	bne.n	405a62 <__swsetup_r+0x32>
  405aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405aa4:	061a      	lsls	r2, r3, #24
  405aa6:	d5dd      	bpl.n	405a64 <__swsetup_r+0x34>
  405aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405aac:	81a3      	strh	r3, [r4, #12]
  405aae:	f04f 30ff 	mov.w	r0, #4294967295
  405ab2:	bd38      	pop	{r3, r4, r5, pc}
  405ab4:	4618      	mov	r0, r3
  405ab6:	f000 f927 	bl	405d08 <__sinit>
  405aba:	e7c2      	b.n	405a42 <__swsetup_r+0x12>
  405abc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405abe:	b151      	cbz	r1, 405ad6 <__swsetup_r+0xa6>
  405ac0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405ac4:	4299      	cmp	r1, r3
  405ac6:	d004      	beq.n	405ad2 <__swsetup_r+0xa2>
  405ac8:	4628      	mov	r0, r5
  405aca:	f000 fa43 	bl	405f54 <_free_r>
  405ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405ad2:	2300      	movs	r3, #0
  405ad4:	6323      	str	r3, [r4, #48]	; 0x30
  405ad6:	2300      	movs	r3, #0
  405ad8:	6920      	ldr	r0, [r4, #16]
  405ada:	6063      	str	r3, [r4, #4]
  405adc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405ae0:	6020      	str	r0, [r4, #0]
  405ae2:	e7c5      	b.n	405a70 <__swsetup_r+0x40>
  405ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405ae8:	2309      	movs	r3, #9
  405aea:	602b      	str	r3, [r5, #0]
  405aec:	f04f 30ff 	mov.w	r0, #4294967295
  405af0:	81a2      	strh	r2, [r4, #12]
  405af2:	bd38      	pop	{r3, r4, r5, pc}
  405af4:	20400014 	.word	0x20400014

00405af8 <register_fini>:
  405af8:	4b02      	ldr	r3, [pc, #8]	; (405b04 <register_fini+0xc>)
  405afa:	b113      	cbz	r3, 405b02 <register_fini+0xa>
  405afc:	4802      	ldr	r0, [pc, #8]	; (405b08 <register_fini+0x10>)
  405afe:	f000 b805 	b.w	405b0c <atexit>
  405b02:	4770      	bx	lr
  405b04:	00000000 	.word	0x00000000
  405b08:	00405d79 	.word	0x00405d79

00405b0c <atexit>:
  405b0c:	2300      	movs	r3, #0
  405b0e:	4601      	mov	r1, r0
  405b10:	461a      	mov	r2, r3
  405b12:	4618      	mov	r0, r3
  405b14:	f001 b890 	b.w	406c38 <__register_exitproc>

00405b18 <__sflush_r>:
  405b18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405b1c:	b29a      	uxth	r2, r3
  405b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b22:	460d      	mov	r5, r1
  405b24:	0711      	lsls	r1, r2, #28
  405b26:	4680      	mov	r8, r0
  405b28:	d43a      	bmi.n	405ba0 <__sflush_r+0x88>
  405b2a:	686a      	ldr	r2, [r5, #4]
  405b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405b30:	2a00      	cmp	r2, #0
  405b32:	81ab      	strh	r3, [r5, #12]
  405b34:	dd6f      	ble.n	405c16 <__sflush_r+0xfe>
  405b36:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405b38:	2c00      	cmp	r4, #0
  405b3a:	d049      	beq.n	405bd0 <__sflush_r+0xb8>
  405b3c:	2200      	movs	r2, #0
  405b3e:	b29b      	uxth	r3, r3
  405b40:	f8d8 6000 	ldr.w	r6, [r8]
  405b44:	f8c8 2000 	str.w	r2, [r8]
  405b48:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405b4c:	d067      	beq.n	405c1e <__sflush_r+0x106>
  405b4e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405b50:	075f      	lsls	r7, r3, #29
  405b52:	d505      	bpl.n	405b60 <__sflush_r+0x48>
  405b54:	6869      	ldr	r1, [r5, #4]
  405b56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405b58:	1a52      	subs	r2, r2, r1
  405b5a:	b10b      	cbz	r3, 405b60 <__sflush_r+0x48>
  405b5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405b5e:	1ad2      	subs	r2, r2, r3
  405b60:	2300      	movs	r3, #0
  405b62:	69e9      	ldr	r1, [r5, #28]
  405b64:	4640      	mov	r0, r8
  405b66:	47a0      	blx	r4
  405b68:	1c44      	adds	r4, r0, #1
  405b6a:	d03c      	beq.n	405be6 <__sflush_r+0xce>
  405b6c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405b70:	692a      	ldr	r2, [r5, #16]
  405b72:	602a      	str	r2, [r5, #0]
  405b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405b78:	2200      	movs	r2, #0
  405b7a:	81ab      	strh	r3, [r5, #12]
  405b7c:	04db      	lsls	r3, r3, #19
  405b7e:	606a      	str	r2, [r5, #4]
  405b80:	d447      	bmi.n	405c12 <__sflush_r+0xfa>
  405b82:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405b84:	f8c8 6000 	str.w	r6, [r8]
  405b88:	b311      	cbz	r1, 405bd0 <__sflush_r+0xb8>
  405b8a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405b8e:	4299      	cmp	r1, r3
  405b90:	d002      	beq.n	405b98 <__sflush_r+0x80>
  405b92:	4640      	mov	r0, r8
  405b94:	f000 f9de 	bl	405f54 <_free_r>
  405b98:	2000      	movs	r0, #0
  405b9a:	6328      	str	r0, [r5, #48]	; 0x30
  405b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ba0:	692e      	ldr	r6, [r5, #16]
  405ba2:	b1ae      	cbz	r6, 405bd0 <__sflush_r+0xb8>
  405ba4:	682c      	ldr	r4, [r5, #0]
  405ba6:	602e      	str	r6, [r5, #0]
  405ba8:	0791      	lsls	r1, r2, #30
  405baa:	bf0c      	ite	eq
  405bac:	696b      	ldreq	r3, [r5, #20]
  405bae:	2300      	movne	r3, #0
  405bb0:	1ba4      	subs	r4, r4, r6
  405bb2:	60ab      	str	r3, [r5, #8]
  405bb4:	e00a      	b.n	405bcc <__sflush_r+0xb4>
  405bb6:	4623      	mov	r3, r4
  405bb8:	4632      	mov	r2, r6
  405bba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405bbc:	69e9      	ldr	r1, [r5, #28]
  405bbe:	4640      	mov	r0, r8
  405bc0:	47b8      	blx	r7
  405bc2:	2800      	cmp	r0, #0
  405bc4:	eba4 0400 	sub.w	r4, r4, r0
  405bc8:	4406      	add	r6, r0
  405bca:	dd04      	ble.n	405bd6 <__sflush_r+0xbe>
  405bcc:	2c00      	cmp	r4, #0
  405bce:	dcf2      	bgt.n	405bb6 <__sflush_r+0x9e>
  405bd0:	2000      	movs	r0, #0
  405bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405bd6:	89ab      	ldrh	r3, [r5, #12]
  405bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405bdc:	81ab      	strh	r3, [r5, #12]
  405bde:	f04f 30ff 	mov.w	r0, #4294967295
  405be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405be6:	f8d8 4000 	ldr.w	r4, [r8]
  405bea:	2c1d      	cmp	r4, #29
  405bec:	d8f3      	bhi.n	405bd6 <__sflush_r+0xbe>
  405bee:	4b19      	ldr	r3, [pc, #100]	; (405c54 <__sflush_r+0x13c>)
  405bf0:	40e3      	lsrs	r3, r4
  405bf2:	43db      	mvns	r3, r3
  405bf4:	f013 0301 	ands.w	r3, r3, #1
  405bf8:	d1ed      	bne.n	405bd6 <__sflush_r+0xbe>
  405bfa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405bfe:	606b      	str	r3, [r5, #4]
  405c00:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405c04:	6929      	ldr	r1, [r5, #16]
  405c06:	81ab      	strh	r3, [r5, #12]
  405c08:	04da      	lsls	r2, r3, #19
  405c0a:	6029      	str	r1, [r5, #0]
  405c0c:	d5b9      	bpl.n	405b82 <__sflush_r+0x6a>
  405c0e:	2c00      	cmp	r4, #0
  405c10:	d1b7      	bne.n	405b82 <__sflush_r+0x6a>
  405c12:	6528      	str	r0, [r5, #80]	; 0x50
  405c14:	e7b5      	b.n	405b82 <__sflush_r+0x6a>
  405c16:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405c18:	2a00      	cmp	r2, #0
  405c1a:	dc8c      	bgt.n	405b36 <__sflush_r+0x1e>
  405c1c:	e7d8      	b.n	405bd0 <__sflush_r+0xb8>
  405c1e:	2301      	movs	r3, #1
  405c20:	69e9      	ldr	r1, [r5, #28]
  405c22:	4640      	mov	r0, r8
  405c24:	47a0      	blx	r4
  405c26:	1c43      	adds	r3, r0, #1
  405c28:	4602      	mov	r2, r0
  405c2a:	d002      	beq.n	405c32 <__sflush_r+0x11a>
  405c2c:	89ab      	ldrh	r3, [r5, #12]
  405c2e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405c30:	e78e      	b.n	405b50 <__sflush_r+0x38>
  405c32:	f8d8 3000 	ldr.w	r3, [r8]
  405c36:	2b00      	cmp	r3, #0
  405c38:	d0f8      	beq.n	405c2c <__sflush_r+0x114>
  405c3a:	2b1d      	cmp	r3, #29
  405c3c:	d001      	beq.n	405c42 <__sflush_r+0x12a>
  405c3e:	2b16      	cmp	r3, #22
  405c40:	d102      	bne.n	405c48 <__sflush_r+0x130>
  405c42:	f8c8 6000 	str.w	r6, [r8]
  405c46:	e7c3      	b.n	405bd0 <__sflush_r+0xb8>
  405c48:	89ab      	ldrh	r3, [r5, #12]
  405c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405c4e:	81ab      	strh	r3, [r5, #12]
  405c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c54:	20400001 	.word	0x20400001

00405c58 <_fflush_r>:
  405c58:	b538      	push	{r3, r4, r5, lr}
  405c5a:	460d      	mov	r5, r1
  405c5c:	4604      	mov	r4, r0
  405c5e:	b108      	cbz	r0, 405c64 <_fflush_r+0xc>
  405c60:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405c62:	b1bb      	cbz	r3, 405c94 <_fflush_r+0x3c>
  405c64:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405c68:	b188      	cbz	r0, 405c8e <_fflush_r+0x36>
  405c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405c6c:	07db      	lsls	r3, r3, #31
  405c6e:	d401      	bmi.n	405c74 <_fflush_r+0x1c>
  405c70:	0581      	lsls	r1, r0, #22
  405c72:	d517      	bpl.n	405ca4 <_fflush_r+0x4c>
  405c74:	4620      	mov	r0, r4
  405c76:	4629      	mov	r1, r5
  405c78:	f7ff ff4e 	bl	405b18 <__sflush_r>
  405c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405c7e:	07da      	lsls	r2, r3, #31
  405c80:	4604      	mov	r4, r0
  405c82:	d402      	bmi.n	405c8a <_fflush_r+0x32>
  405c84:	89ab      	ldrh	r3, [r5, #12]
  405c86:	059b      	lsls	r3, r3, #22
  405c88:	d507      	bpl.n	405c9a <_fflush_r+0x42>
  405c8a:	4620      	mov	r0, r4
  405c8c:	bd38      	pop	{r3, r4, r5, pc}
  405c8e:	4604      	mov	r4, r0
  405c90:	4620      	mov	r0, r4
  405c92:	bd38      	pop	{r3, r4, r5, pc}
  405c94:	f000 f838 	bl	405d08 <__sinit>
  405c98:	e7e4      	b.n	405c64 <_fflush_r+0xc>
  405c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405c9c:	f000 fbf6 	bl	40648c <__retarget_lock_release_recursive>
  405ca0:	4620      	mov	r0, r4
  405ca2:	bd38      	pop	{r3, r4, r5, pc}
  405ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405ca6:	f000 fbef 	bl	406488 <__retarget_lock_acquire_recursive>
  405caa:	e7e3      	b.n	405c74 <_fflush_r+0x1c>

00405cac <_cleanup_r>:
  405cac:	4901      	ldr	r1, [pc, #4]	; (405cb4 <_cleanup_r+0x8>)
  405cae:	f000 bbaf 	b.w	406410 <_fwalk_reent>
  405cb2:	bf00      	nop
  405cb4:	00406d21 	.word	0x00406d21

00405cb8 <std.isra.0>:
  405cb8:	b510      	push	{r4, lr}
  405cba:	2300      	movs	r3, #0
  405cbc:	4604      	mov	r4, r0
  405cbe:	8181      	strh	r1, [r0, #12]
  405cc0:	81c2      	strh	r2, [r0, #14]
  405cc2:	6003      	str	r3, [r0, #0]
  405cc4:	6043      	str	r3, [r0, #4]
  405cc6:	6083      	str	r3, [r0, #8]
  405cc8:	6643      	str	r3, [r0, #100]	; 0x64
  405cca:	6103      	str	r3, [r0, #16]
  405ccc:	6143      	str	r3, [r0, #20]
  405cce:	6183      	str	r3, [r0, #24]
  405cd0:	4619      	mov	r1, r3
  405cd2:	2208      	movs	r2, #8
  405cd4:	305c      	adds	r0, #92	; 0x5c
  405cd6:	f7fe fe2d 	bl	404934 <memset>
  405cda:	4807      	ldr	r0, [pc, #28]	; (405cf8 <std.isra.0+0x40>)
  405cdc:	4907      	ldr	r1, [pc, #28]	; (405cfc <std.isra.0+0x44>)
  405cde:	4a08      	ldr	r2, [pc, #32]	; (405d00 <std.isra.0+0x48>)
  405ce0:	4b08      	ldr	r3, [pc, #32]	; (405d04 <std.isra.0+0x4c>)
  405ce2:	6220      	str	r0, [r4, #32]
  405ce4:	61e4      	str	r4, [r4, #28]
  405ce6:	6261      	str	r1, [r4, #36]	; 0x24
  405ce8:	62a2      	str	r2, [r4, #40]	; 0x28
  405cea:	62e3      	str	r3, [r4, #44]	; 0x2c
  405cec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405cf4:	f000 bbc4 	b.w	406480 <__retarget_lock_init_recursive>
  405cf8:	00406a65 	.word	0x00406a65
  405cfc:	00406a89 	.word	0x00406a89
  405d00:	00406ac5 	.word	0x00406ac5
  405d04:	00406ae5 	.word	0x00406ae5

00405d08 <__sinit>:
  405d08:	b510      	push	{r4, lr}
  405d0a:	4604      	mov	r4, r0
  405d0c:	4812      	ldr	r0, [pc, #72]	; (405d58 <__sinit+0x50>)
  405d0e:	f000 fbbb 	bl	406488 <__retarget_lock_acquire_recursive>
  405d12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405d14:	b9d2      	cbnz	r2, 405d4c <__sinit+0x44>
  405d16:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  405d1a:	4810      	ldr	r0, [pc, #64]	; (405d5c <__sinit+0x54>)
  405d1c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405d20:	2103      	movs	r1, #3
  405d22:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405d26:	63e0      	str	r0, [r4, #60]	; 0x3c
  405d28:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  405d2c:	6860      	ldr	r0, [r4, #4]
  405d2e:	2104      	movs	r1, #4
  405d30:	f7ff ffc2 	bl	405cb8 <std.isra.0>
  405d34:	2201      	movs	r2, #1
  405d36:	2109      	movs	r1, #9
  405d38:	68a0      	ldr	r0, [r4, #8]
  405d3a:	f7ff ffbd 	bl	405cb8 <std.isra.0>
  405d3e:	2202      	movs	r2, #2
  405d40:	2112      	movs	r1, #18
  405d42:	68e0      	ldr	r0, [r4, #12]
  405d44:	f7ff ffb8 	bl	405cb8 <std.isra.0>
  405d48:	2301      	movs	r3, #1
  405d4a:	63a3      	str	r3, [r4, #56]	; 0x38
  405d4c:	4802      	ldr	r0, [pc, #8]	; (405d58 <__sinit+0x50>)
  405d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405d52:	f000 bb9b 	b.w	40648c <__retarget_lock_release_recursive>
  405d56:	bf00      	nop
  405d58:	2040c87c 	.word	0x2040c87c
  405d5c:	00405cad 	.word	0x00405cad

00405d60 <__sfp_lock_acquire>:
  405d60:	4801      	ldr	r0, [pc, #4]	; (405d68 <__sfp_lock_acquire+0x8>)
  405d62:	f000 bb91 	b.w	406488 <__retarget_lock_acquire_recursive>
  405d66:	bf00      	nop
  405d68:	2040c890 	.word	0x2040c890

00405d6c <__sfp_lock_release>:
  405d6c:	4801      	ldr	r0, [pc, #4]	; (405d74 <__sfp_lock_release+0x8>)
  405d6e:	f000 bb8d 	b.w	40648c <__retarget_lock_release_recursive>
  405d72:	bf00      	nop
  405d74:	2040c890 	.word	0x2040c890

00405d78 <__libc_fini_array>:
  405d78:	b538      	push	{r3, r4, r5, lr}
  405d7a:	4c0a      	ldr	r4, [pc, #40]	; (405da4 <__libc_fini_array+0x2c>)
  405d7c:	4d0a      	ldr	r5, [pc, #40]	; (405da8 <__libc_fini_array+0x30>)
  405d7e:	1b64      	subs	r4, r4, r5
  405d80:	10a4      	asrs	r4, r4, #2
  405d82:	d00a      	beq.n	405d9a <__libc_fini_array+0x22>
  405d84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405d88:	3b01      	subs	r3, #1
  405d8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405d8e:	3c01      	subs	r4, #1
  405d90:	f855 3904 	ldr.w	r3, [r5], #-4
  405d94:	4798      	blx	r3
  405d96:	2c00      	cmp	r4, #0
  405d98:	d1f9      	bne.n	405d8e <__libc_fini_array+0x16>
  405d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405d9e:	f001 bb63 	b.w	407468 <_fini>
  405da2:	bf00      	nop
  405da4:	00407478 	.word	0x00407478
  405da8:	00407474 	.word	0x00407474

00405dac <__fputwc>:
  405dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405db0:	b082      	sub	sp, #8
  405db2:	4680      	mov	r8, r0
  405db4:	4689      	mov	r9, r1
  405db6:	4614      	mov	r4, r2
  405db8:	f000 fb54 	bl	406464 <__locale_mb_cur_max>
  405dbc:	2801      	cmp	r0, #1
  405dbe:	d036      	beq.n	405e2e <__fputwc+0x82>
  405dc0:	464a      	mov	r2, r9
  405dc2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405dc6:	a901      	add	r1, sp, #4
  405dc8:	4640      	mov	r0, r8
  405dca:	f000 fee7 	bl	406b9c <_wcrtomb_r>
  405dce:	1c42      	adds	r2, r0, #1
  405dd0:	4606      	mov	r6, r0
  405dd2:	d025      	beq.n	405e20 <__fputwc+0x74>
  405dd4:	b3a8      	cbz	r0, 405e42 <__fputwc+0x96>
  405dd6:	f89d e004 	ldrb.w	lr, [sp, #4]
  405dda:	2500      	movs	r5, #0
  405ddc:	f10d 0a04 	add.w	sl, sp, #4
  405de0:	e009      	b.n	405df6 <__fputwc+0x4a>
  405de2:	6823      	ldr	r3, [r4, #0]
  405de4:	1c5a      	adds	r2, r3, #1
  405de6:	6022      	str	r2, [r4, #0]
  405de8:	f883 e000 	strb.w	lr, [r3]
  405dec:	3501      	adds	r5, #1
  405dee:	42b5      	cmp	r5, r6
  405df0:	d227      	bcs.n	405e42 <__fputwc+0x96>
  405df2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405df6:	68a3      	ldr	r3, [r4, #8]
  405df8:	3b01      	subs	r3, #1
  405dfa:	2b00      	cmp	r3, #0
  405dfc:	60a3      	str	r3, [r4, #8]
  405dfe:	daf0      	bge.n	405de2 <__fputwc+0x36>
  405e00:	69a7      	ldr	r7, [r4, #24]
  405e02:	42bb      	cmp	r3, r7
  405e04:	4671      	mov	r1, lr
  405e06:	4622      	mov	r2, r4
  405e08:	4640      	mov	r0, r8
  405e0a:	db02      	blt.n	405e12 <__fputwc+0x66>
  405e0c:	f1be 0f0a 	cmp.w	lr, #10
  405e10:	d1e7      	bne.n	405de2 <__fputwc+0x36>
  405e12:	f000 fe6b 	bl	406aec <__swbuf_r>
  405e16:	1c43      	adds	r3, r0, #1
  405e18:	d1e8      	bne.n	405dec <__fputwc+0x40>
  405e1a:	b002      	add	sp, #8
  405e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405e20:	89a3      	ldrh	r3, [r4, #12]
  405e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e26:	81a3      	strh	r3, [r4, #12]
  405e28:	b002      	add	sp, #8
  405e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405e2e:	f109 33ff 	add.w	r3, r9, #4294967295
  405e32:	2bfe      	cmp	r3, #254	; 0xfe
  405e34:	d8c4      	bhi.n	405dc0 <__fputwc+0x14>
  405e36:	fa5f fe89 	uxtb.w	lr, r9
  405e3a:	4606      	mov	r6, r0
  405e3c:	f88d e004 	strb.w	lr, [sp, #4]
  405e40:	e7cb      	b.n	405dda <__fputwc+0x2e>
  405e42:	4648      	mov	r0, r9
  405e44:	b002      	add	sp, #8
  405e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405e4a:	bf00      	nop

00405e4c <_fputwc_r>:
  405e4c:	b530      	push	{r4, r5, lr}
  405e4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405e50:	f013 0f01 	tst.w	r3, #1
  405e54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405e58:	4614      	mov	r4, r2
  405e5a:	b083      	sub	sp, #12
  405e5c:	4605      	mov	r5, r0
  405e5e:	b29a      	uxth	r2, r3
  405e60:	d101      	bne.n	405e66 <_fputwc_r+0x1a>
  405e62:	0590      	lsls	r0, r2, #22
  405e64:	d51c      	bpl.n	405ea0 <_fputwc_r+0x54>
  405e66:	0490      	lsls	r0, r2, #18
  405e68:	d406      	bmi.n	405e78 <_fputwc_r+0x2c>
  405e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405e74:	81a3      	strh	r3, [r4, #12]
  405e76:	6662      	str	r2, [r4, #100]	; 0x64
  405e78:	4628      	mov	r0, r5
  405e7a:	4622      	mov	r2, r4
  405e7c:	f7ff ff96 	bl	405dac <__fputwc>
  405e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405e82:	07da      	lsls	r2, r3, #31
  405e84:	4605      	mov	r5, r0
  405e86:	d402      	bmi.n	405e8e <_fputwc_r+0x42>
  405e88:	89a3      	ldrh	r3, [r4, #12]
  405e8a:	059b      	lsls	r3, r3, #22
  405e8c:	d502      	bpl.n	405e94 <_fputwc_r+0x48>
  405e8e:	4628      	mov	r0, r5
  405e90:	b003      	add	sp, #12
  405e92:	bd30      	pop	{r4, r5, pc}
  405e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405e96:	f000 faf9 	bl	40648c <__retarget_lock_release_recursive>
  405e9a:	4628      	mov	r0, r5
  405e9c:	b003      	add	sp, #12
  405e9e:	bd30      	pop	{r4, r5, pc}
  405ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405ea2:	9101      	str	r1, [sp, #4]
  405ea4:	f000 faf0 	bl	406488 <__retarget_lock_acquire_recursive>
  405ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405eac:	9901      	ldr	r1, [sp, #4]
  405eae:	b29a      	uxth	r2, r3
  405eb0:	e7d9      	b.n	405e66 <_fputwc_r+0x1a>
  405eb2:	bf00      	nop

00405eb4 <_malloc_trim_r>:
  405eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405eb6:	4f24      	ldr	r7, [pc, #144]	; (405f48 <_malloc_trim_r+0x94>)
  405eb8:	460c      	mov	r4, r1
  405eba:	4606      	mov	r6, r0
  405ebc:	f7fe fd88 	bl	4049d0 <__malloc_lock>
  405ec0:	68bb      	ldr	r3, [r7, #8]
  405ec2:	685d      	ldr	r5, [r3, #4]
  405ec4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405ec8:	310f      	adds	r1, #15
  405eca:	f025 0503 	bic.w	r5, r5, #3
  405ece:	4429      	add	r1, r5
  405ed0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405ed4:	f021 010f 	bic.w	r1, r1, #15
  405ed8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405edc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405ee0:	db07      	blt.n	405ef2 <_malloc_trim_r+0x3e>
  405ee2:	2100      	movs	r1, #0
  405ee4:	4630      	mov	r0, r6
  405ee6:	f7fe fd7f 	bl	4049e8 <_sbrk_r>
  405eea:	68bb      	ldr	r3, [r7, #8]
  405eec:	442b      	add	r3, r5
  405eee:	4298      	cmp	r0, r3
  405ef0:	d004      	beq.n	405efc <_malloc_trim_r+0x48>
  405ef2:	4630      	mov	r0, r6
  405ef4:	f7fe fd72 	bl	4049dc <__malloc_unlock>
  405ef8:	2000      	movs	r0, #0
  405efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405efc:	4261      	negs	r1, r4
  405efe:	4630      	mov	r0, r6
  405f00:	f7fe fd72 	bl	4049e8 <_sbrk_r>
  405f04:	3001      	adds	r0, #1
  405f06:	d00d      	beq.n	405f24 <_malloc_trim_r+0x70>
  405f08:	4b10      	ldr	r3, [pc, #64]	; (405f4c <_malloc_trim_r+0x98>)
  405f0a:	68ba      	ldr	r2, [r7, #8]
  405f0c:	6819      	ldr	r1, [r3, #0]
  405f0e:	1b2d      	subs	r5, r5, r4
  405f10:	f045 0501 	orr.w	r5, r5, #1
  405f14:	4630      	mov	r0, r6
  405f16:	1b09      	subs	r1, r1, r4
  405f18:	6055      	str	r5, [r2, #4]
  405f1a:	6019      	str	r1, [r3, #0]
  405f1c:	f7fe fd5e 	bl	4049dc <__malloc_unlock>
  405f20:	2001      	movs	r0, #1
  405f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405f24:	2100      	movs	r1, #0
  405f26:	4630      	mov	r0, r6
  405f28:	f7fe fd5e 	bl	4049e8 <_sbrk_r>
  405f2c:	68ba      	ldr	r2, [r7, #8]
  405f2e:	1a83      	subs	r3, r0, r2
  405f30:	2b0f      	cmp	r3, #15
  405f32:	ddde      	ble.n	405ef2 <_malloc_trim_r+0x3e>
  405f34:	4c06      	ldr	r4, [pc, #24]	; (405f50 <_malloc_trim_r+0x9c>)
  405f36:	4905      	ldr	r1, [pc, #20]	; (405f4c <_malloc_trim_r+0x98>)
  405f38:	6824      	ldr	r4, [r4, #0]
  405f3a:	f043 0301 	orr.w	r3, r3, #1
  405f3e:	1b00      	subs	r0, r0, r4
  405f40:	6053      	str	r3, [r2, #4]
  405f42:	6008      	str	r0, [r1, #0]
  405f44:	e7d5      	b.n	405ef2 <_malloc_trim_r+0x3e>
  405f46:	bf00      	nop
  405f48:	20400440 	.word	0x20400440
  405f4c:	2040c75c 	.word	0x2040c75c
  405f50:	20400848 	.word	0x20400848

00405f54 <_free_r>:
  405f54:	2900      	cmp	r1, #0
  405f56:	d044      	beq.n	405fe2 <_free_r+0x8e>
  405f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f5c:	460d      	mov	r5, r1
  405f5e:	4680      	mov	r8, r0
  405f60:	f7fe fd36 	bl	4049d0 <__malloc_lock>
  405f64:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405f68:	4969      	ldr	r1, [pc, #420]	; (406110 <_free_r+0x1bc>)
  405f6a:	f027 0301 	bic.w	r3, r7, #1
  405f6e:	f1a5 0408 	sub.w	r4, r5, #8
  405f72:	18e2      	adds	r2, r4, r3
  405f74:	688e      	ldr	r6, [r1, #8]
  405f76:	6850      	ldr	r0, [r2, #4]
  405f78:	42b2      	cmp	r2, r6
  405f7a:	f020 0003 	bic.w	r0, r0, #3
  405f7e:	d05e      	beq.n	40603e <_free_r+0xea>
  405f80:	07fe      	lsls	r6, r7, #31
  405f82:	6050      	str	r0, [r2, #4]
  405f84:	d40b      	bmi.n	405f9e <_free_r+0x4a>
  405f86:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405f8a:	1be4      	subs	r4, r4, r7
  405f8c:	f101 0e08 	add.w	lr, r1, #8
  405f90:	68a5      	ldr	r5, [r4, #8]
  405f92:	4575      	cmp	r5, lr
  405f94:	443b      	add	r3, r7
  405f96:	d06d      	beq.n	406074 <_free_r+0x120>
  405f98:	68e7      	ldr	r7, [r4, #12]
  405f9a:	60ef      	str	r7, [r5, #12]
  405f9c:	60bd      	str	r5, [r7, #8]
  405f9e:	1815      	adds	r5, r2, r0
  405fa0:	686d      	ldr	r5, [r5, #4]
  405fa2:	07ed      	lsls	r5, r5, #31
  405fa4:	d53e      	bpl.n	406024 <_free_r+0xd0>
  405fa6:	f043 0201 	orr.w	r2, r3, #1
  405faa:	6062      	str	r2, [r4, #4]
  405fac:	50e3      	str	r3, [r4, r3]
  405fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405fb2:	d217      	bcs.n	405fe4 <_free_r+0x90>
  405fb4:	08db      	lsrs	r3, r3, #3
  405fb6:	1c58      	adds	r0, r3, #1
  405fb8:	109a      	asrs	r2, r3, #2
  405fba:	684d      	ldr	r5, [r1, #4]
  405fbc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405fc0:	60a7      	str	r7, [r4, #8]
  405fc2:	2301      	movs	r3, #1
  405fc4:	4093      	lsls	r3, r2
  405fc6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405fca:	432b      	orrs	r3, r5
  405fcc:	3a08      	subs	r2, #8
  405fce:	60e2      	str	r2, [r4, #12]
  405fd0:	604b      	str	r3, [r1, #4]
  405fd2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405fd6:	60fc      	str	r4, [r7, #12]
  405fd8:	4640      	mov	r0, r8
  405fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405fde:	f7fe bcfd 	b.w	4049dc <__malloc_unlock>
  405fe2:	4770      	bx	lr
  405fe4:	0a5a      	lsrs	r2, r3, #9
  405fe6:	2a04      	cmp	r2, #4
  405fe8:	d852      	bhi.n	406090 <_free_r+0x13c>
  405fea:	099a      	lsrs	r2, r3, #6
  405fec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405ff0:	00ff      	lsls	r7, r7, #3
  405ff2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405ff6:	19c8      	adds	r0, r1, r7
  405ff8:	59ca      	ldr	r2, [r1, r7]
  405ffa:	3808      	subs	r0, #8
  405ffc:	4290      	cmp	r0, r2
  405ffe:	d04f      	beq.n	4060a0 <_free_r+0x14c>
  406000:	6851      	ldr	r1, [r2, #4]
  406002:	f021 0103 	bic.w	r1, r1, #3
  406006:	428b      	cmp	r3, r1
  406008:	d232      	bcs.n	406070 <_free_r+0x11c>
  40600a:	6892      	ldr	r2, [r2, #8]
  40600c:	4290      	cmp	r0, r2
  40600e:	d1f7      	bne.n	406000 <_free_r+0xac>
  406010:	68c3      	ldr	r3, [r0, #12]
  406012:	60a0      	str	r0, [r4, #8]
  406014:	60e3      	str	r3, [r4, #12]
  406016:	609c      	str	r4, [r3, #8]
  406018:	60c4      	str	r4, [r0, #12]
  40601a:	4640      	mov	r0, r8
  40601c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406020:	f7fe bcdc 	b.w	4049dc <__malloc_unlock>
  406024:	6895      	ldr	r5, [r2, #8]
  406026:	4f3b      	ldr	r7, [pc, #236]	; (406114 <_free_r+0x1c0>)
  406028:	42bd      	cmp	r5, r7
  40602a:	4403      	add	r3, r0
  40602c:	d040      	beq.n	4060b0 <_free_r+0x15c>
  40602e:	68d0      	ldr	r0, [r2, #12]
  406030:	60e8      	str	r0, [r5, #12]
  406032:	f043 0201 	orr.w	r2, r3, #1
  406036:	6085      	str	r5, [r0, #8]
  406038:	6062      	str	r2, [r4, #4]
  40603a:	50e3      	str	r3, [r4, r3]
  40603c:	e7b7      	b.n	405fae <_free_r+0x5a>
  40603e:	07ff      	lsls	r7, r7, #31
  406040:	4403      	add	r3, r0
  406042:	d407      	bmi.n	406054 <_free_r+0x100>
  406044:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406048:	1aa4      	subs	r4, r4, r2
  40604a:	4413      	add	r3, r2
  40604c:	68a0      	ldr	r0, [r4, #8]
  40604e:	68e2      	ldr	r2, [r4, #12]
  406050:	60c2      	str	r2, [r0, #12]
  406052:	6090      	str	r0, [r2, #8]
  406054:	4a30      	ldr	r2, [pc, #192]	; (406118 <_free_r+0x1c4>)
  406056:	6812      	ldr	r2, [r2, #0]
  406058:	f043 0001 	orr.w	r0, r3, #1
  40605c:	4293      	cmp	r3, r2
  40605e:	6060      	str	r0, [r4, #4]
  406060:	608c      	str	r4, [r1, #8]
  406062:	d3b9      	bcc.n	405fd8 <_free_r+0x84>
  406064:	4b2d      	ldr	r3, [pc, #180]	; (40611c <_free_r+0x1c8>)
  406066:	4640      	mov	r0, r8
  406068:	6819      	ldr	r1, [r3, #0]
  40606a:	f7ff ff23 	bl	405eb4 <_malloc_trim_r>
  40606e:	e7b3      	b.n	405fd8 <_free_r+0x84>
  406070:	4610      	mov	r0, r2
  406072:	e7cd      	b.n	406010 <_free_r+0xbc>
  406074:	1811      	adds	r1, r2, r0
  406076:	6849      	ldr	r1, [r1, #4]
  406078:	07c9      	lsls	r1, r1, #31
  40607a:	d444      	bmi.n	406106 <_free_r+0x1b2>
  40607c:	6891      	ldr	r1, [r2, #8]
  40607e:	68d2      	ldr	r2, [r2, #12]
  406080:	60ca      	str	r2, [r1, #12]
  406082:	4403      	add	r3, r0
  406084:	f043 0001 	orr.w	r0, r3, #1
  406088:	6091      	str	r1, [r2, #8]
  40608a:	6060      	str	r0, [r4, #4]
  40608c:	50e3      	str	r3, [r4, r3]
  40608e:	e7a3      	b.n	405fd8 <_free_r+0x84>
  406090:	2a14      	cmp	r2, #20
  406092:	d816      	bhi.n	4060c2 <_free_r+0x16e>
  406094:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406098:	00ff      	lsls	r7, r7, #3
  40609a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40609e:	e7aa      	b.n	405ff6 <_free_r+0xa2>
  4060a0:	10aa      	asrs	r2, r5, #2
  4060a2:	2301      	movs	r3, #1
  4060a4:	684d      	ldr	r5, [r1, #4]
  4060a6:	4093      	lsls	r3, r2
  4060a8:	432b      	orrs	r3, r5
  4060aa:	604b      	str	r3, [r1, #4]
  4060ac:	4603      	mov	r3, r0
  4060ae:	e7b0      	b.n	406012 <_free_r+0xbe>
  4060b0:	f043 0201 	orr.w	r2, r3, #1
  4060b4:	614c      	str	r4, [r1, #20]
  4060b6:	610c      	str	r4, [r1, #16]
  4060b8:	60e5      	str	r5, [r4, #12]
  4060ba:	60a5      	str	r5, [r4, #8]
  4060bc:	6062      	str	r2, [r4, #4]
  4060be:	50e3      	str	r3, [r4, r3]
  4060c0:	e78a      	b.n	405fd8 <_free_r+0x84>
  4060c2:	2a54      	cmp	r2, #84	; 0x54
  4060c4:	d806      	bhi.n	4060d4 <_free_r+0x180>
  4060c6:	0b1a      	lsrs	r2, r3, #12
  4060c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4060cc:	00ff      	lsls	r7, r7, #3
  4060ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4060d2:	e790      	b.n	405ff6 <_free_r+0xa2>
  4060d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4060d8:	d806      	bhi.n	4060e8 <_free_r+0x194>
  4060da:	0bda      	lsrs	r2, r3, #15
  4060dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4060e0:	00ff      	lsls	r7, r7, #3
  4060e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4060e6:	e786      	b.n	405ff6 <_free_r+0xa2>
  4060e8:	f240 5054 	movw	r0, #1364	; 0x554
  4060ec:	4282      	cmp	r2, r0
  4060ee:	d806      	bhi.n	4060fe <_free_r+0x1aa>
  4060f0:	0c9a      	lsrs	r2, r3, #18
  4060f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4060f6:	00ff      	lsls	r7, r7, #3
  4060f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4060fc:	e77b      	b.n	405ff6 <_free_r+0xa2>
  4060fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406102:	257e      	movs	r5, #126	; 0x7e
  406104:	e777      	b.n	405ff6 <_free_r+0xa2>
  406106:	f043 0101 	orr.w	r1, r3, #1
  40610a:	6061      	str	r1, [r4, #4]
  40610c:	6013      	str	r3, [r2, #0]
  40610e:	e763      	b.n	405fd8 <_free_r+0x84>
  406110:	20400440 	.word	0x20400440
  406114:	20400448 	.word	0x20400448
  406118:	2040084c 	.word	0x2040084c
  40611c:	2040c78c 	.word	0x2040c78c

00406120 <__sfvwrite_r>:
  406120:	6893      	ldr	r3, [r2, #8]
  406122:	2b00      	cmp	r3, #0
  406124:	d073      	beq.n	40620e <__sfvwrite_r+0xee>
  406126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40612a:	898b      	ldrh	r3, [r1, #12]
  40612c:	b083      	sub	sp, #12
  40612e:	460c      	mov	r4, r1
  406130:	0719      	lsls	r1, r3, #28
  406132:	9000      	str	r0, [sp, #0]
  406134:	4616      	mov	r6, r2
  406136:	d526      	bpl.n	406186 <__sfvwrite_r+0x66>
  406138:	6922      	ldr	r2, [r4, #16]
  40613a:	b322      	cbz	r2, 406186 <__sfvwrite_r+0x66>
  40613c:	f013 0002 	ands.w	r0, r3, #2
  406140:	6835      	ldr	r5, [r6, #0]
  406142:	d02c      	beq.n	40619e <__sfvwrite_r+0x7e>
  406144:	f04f 0900 	mov.w	r9, #0
  406148:	4fb0      	ldr	r7, [pc, #704]	; (40640c <__sfvwrite_r+0x2ec>)
  40614a:	46c8      	mov	r8, r9
  40614c:	46b2      	mov	sl, r6
  40614e:	45b8      	cmp	r8, r7
  406150:	4643      	mov	r3, r8
  406152:	464a      	mov	r2, r9
  406154:	bf28      	it	cs
  406156:	463b      	movcs	r3, r7
  406158:	9800      	ldr	r0, [sp, #0]
  40615a:	f1b8 0f00 	cmp.w	r8, #0
  40615e:	d050      	beq.n	406202 <__sfvwrite_r+0xe2>
  406160:	69e1      	ldr	r1, [r4, #28]
  406162:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406164:	47b0      	blx	r6
  406166:	2800      	cmp	r0, #0
  406168:	dd58      	ble.n	40621c <__sfvwrite_r+0xfc>
  40616a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40616e:	1a1b      	subs	r3, r3, r0
  406170:	4481      	add	r9, r0
  406172:	eba8 0800 	sub.w	r8, r8, r0
  406176:	f8ca 3008 	str.w	r3, [sl, #8]
  40617a:	2b00      	cmp	r3, #0
  40617c:	d1e7      	bne.n	40614e <__sfvwrite_r+0x2e>
  40617e:	2000      	movs	r0, #0
  406180:	b003      	add	sp, #12
  406182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406186:	4621      	mov	r1, r4
  406188:	9800      	ldr	r0, [sp, #0]
  40618a:	f7ff fc51 	bl	405a30 <__swsetup_r>
  40618e:	2800      	cmp	r0, #0
  406190:	f040 8133 	bne.w	4063fa <__sfvwrite_r+0x2da>
  406194:	89a3      	ldrh	r3, [r4, #12]
  406196:	6835      	ldr	r5, [r6, #0]
  406198:	f013 0002 	ands.w	r0, r3, #2
  40619c:	d1d2      	bne.n	406144 <__sfvwrite_r+0x24>
  40619e:	f013 0901 	ands.w	r9, r3, #1
  4061a2:	d145      	bne.n	406230 <__sfvwrite_r+0x110>
  4061a4:	464f      	mov	r7, r9
  4061a6:	9601      	str	r6, [sp, #4]
  4061a8:	b337      	cbz	r7, 4061f8 <__sfvwrite_r+0xd8>
  4061aa:	059a      	lsls	r2, r3, #22
  4061ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4061b0:	f140 8083 	bpl.w	4062ba <__sfvwrite_r+0x19a>
  4061b4:	4547      	cmp	r7, r8
  4061b6:	46c3      	mov	fp, r8
  4061b8:	f0c0 80ab 	bcc.w	406312 <__sfvwrite_r+0x1f2>
  4061bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4061c0:	f040 80ac 	bne.w	40631c <__sfvwrite_r+0x1fc>
  4061c4:	6820      	ldr	r0, [r4, #0]
  4061c6:	46ba      	mov	sl, r7
  4061c8:	465a      	mov	r2, fp
  4061ca:	4649      	mov	r1, r9
  4061cc:	f000 fa40 	bl	406650 <memmove>
  4061d0:	68a2      	ldr	r2, [r4, #8]
  4061d2:	6823      	ldr	r3, [r4, #0]
  4061d4:	eba2 0208 	sub.w	r2, r2, r8
  4061d8:	445b      	add	r3, fp
  4061da:	60a2      	str	r2, [r4, #8]
  4061dc:	6023      	str	r3, [r4, #0]
  4061de:	9a01      	ldr	r2, [sp, #4]
  4061e0:	6893      	ldr	r3, [r2, #8]
  4061e2:	eba3 030a 	sub.w	r3, r3, sl
  4061e6:	44d1      	add	r9, sl
  4061e8:	eba7 070a 	sub.w	r7, r7, sl
  4061ec:	6093      	str	r3, [r2, #8]
  4061ee:	2b00      	cmp	r3, #0
  4061f0:	d0c5      	beq.n	40617e <__sfvwrite_r+0x5e>
  4061f2:	89a3      	ldrh	r3, [r4, #12]
  4061f4:	2f00      	cmp	r7, #0
  4061f6:	d1d8      	bne.n	4061aa <__sfvwrite_r+0x8a>
  4061f8:	f8d5 9000 	ldr.w	r9, [r5]
  4061fc:	686f      	ldr	r7, [r5, #4]
  4061fe:	3508      	adds	r5, #8
  406200:	e7d2      	b.n	4061a8 <__sfvwrite_r+0x88>
  406202:	f8d5 9000 	ldr.w	r9, [r5]
  406206:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40620a:	3508      	adds	r5, #8
  40620c:	e79f      	b.n	40614e <__sfvwrite_r+0x2e>
  40620e:	2000      	movs	r0, #0
  406210:	4770      	bx	lr
  406212:	4621      	mov	r1, r4
  406214:	9800      	ldr	r0, [sp, #0]
  406216:	f7ff fd1f 	bl	405c58 <_fflush_r>
  40621a:	b370      	cbz	r0, 40627a <__sfvwrite_r+0x15a>
  40621c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406224:	f04f 30ff 	mov.w	r0, #4294967295
  406228:	81a3      	strh	r3, [r4, #12]
  40622a:	b003      	add	sp, #12
  40622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406230:	4681      	mov	r9, r0
  406232:	4633      	mov	r3, r6
  406234:	464e      	mov	r6, r9
  406236:	46a8      	mov	r8, r5
  406238:	469a      	mov	sl, r3
  40623a:	464d      	mov	r5, r9
  40623c:	b34e      	cbz	r6, 406292 <__sfvwrite_r+0x172>
  40623e:	b380      	cbz	r0, 4062a2 <__sfvwrite_r+0x182>
  406240:	6820      	ldr	r0, [r4, #0]
  406242:	6923      	ldr	r3, [r4, #16]
  406244:	6962      	ldr	r2, [r4, #20]
  406246:	45b1      	cmp	r9, r6
  406248:	46cb      	mov	fp, r9
  40624a:	bf28      	it	cs
  40624c:	46b3      	movcs	fp, r6
  40624e:	4298      	cmp	r0, r3
  406250:	465f      	mov	r7, fp
  406252:	d904      	bls.n	40625e <__sfvwrite_r+0x13e>
  406254:	68a3      	ldr	r3, [r4, #8]
  406256:	4413      	add	r3, r2
  406258:	459b      	cmp	fp, r3
  40625a:	f300 80a6 	bgt.w	4063aa <__sfvwrite_r+0x28a>
  40625e:	4593      	cmp	fp, r2
  406260:	db4b      	blt.n	4062fa <__sfvwrite_r+0x1da>
  406262:	4613      	mov	r3, r2
  406264:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406266:	69e1      	ldr	r1, [r4, #28]
  406268:	9800      	ldr	r0, [sp, #0]
  40626a:	462a      	mov	r2, r5
  40626c:	47b8      	blx	r7
  40626e:	1e07      	subs	r7, r0, #0
  406270:	ddd4      	ble.n	40621c <__sfvwrite_r+0xfc>
  406272:	ebb9 0907 	subs.w	r9, r9, r7
  406276:	d0cc      	beq.n	406212 <__sfvwrite_r+0xf2>
  406278:	2001      	movs	r0, #1
  40627a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40627e:	1bdb      	subs	r3, r3, r7
  406280:	443d      	add	r5, r7
  406282:	1bf6      	subs	r6, r6, r7
  406284:	f8ca 3008 	str.w	r3, [sl, #8]
  406288:	2b00      	cmp	r3, #0
  40628a:	f43f af78 	beq.w	40617e <__sfvwrite_r+0x5e>
  40628e:	2e00      	cmp	r6, #0
  406290:	d1d5      	bne.n	40623e <__sfvwrite_r+0x11e>
  406292:	f108 0308 	add.w	r3, r8, #8
  406296:	e913 0060 	ldmdb	r3, {r5, r6}
  40629a:	4698      	mov	r8, r3
  40629c:	3308      	adds	r3, #8
  40629e:	2e00      	cmp	r6, #0
  4062a0:	d0f9      	beq.n	406296 <__sfvwrite_r+0x176>
  4062a2:	4632      	mov	r2, r6
  4062a4:	210a      	movs	r1, #10
  4062a6:	4628      	mov	r0, r5
  4062a8:	f000 f982 	bl	4065b0 <memchr>
  4062ac:	2800      	cmp	r0, #0
  4062ae:	f000 80a1 	beq.w	4063f4 <__sfvwrite_r+0x2d4>
  4062b2:	3001      	adds	r0, #1
  4062b4:	eba0 0905 	sub.w	r9, r0, r5
  4062b8:	e7c2      	b.n	406240 <__sfvwrite_r+0x120>
  4062ba:	6820      	ldr	r0, [r4, #0]
  4062bc:	6923      	ldr	r3, [r4, #16]
  4062be:	4298      	cmp	r0, r3
  4062c0:	d802      	bhi.n	4062c8 <__sfvwrite_r+0x1a8>
  4062c2:	6963      	ldr	r3, [r4, #20]
  4062c4:	429f      	cmp	r7, r3
  4062c6:	d25d      	bcs.n	406384 <__sfvwrite_r+0x264>
  4062c8:	45b8      	cmp	r8, r7
  4062ca:	bf28      	it	cs
  4062cc:	46b8      	movcs	r8, r7
  4062ce:	4642      	mov	r2, r8
  4062d0:	4649      	mov	r1, r9
  4062d2:	f000 f9bd 	bl	406650 <memmove>
  4062d6:	68a3      	ldr	r3, [r4, #8]
  4062d8:	6822      	ldr	r2, [r4, #0]
  4062da:	eba3 0308 	sub.w	r3, r3, r8
  4062de:	4442      	add	r2, r8
  4062e0:	60a3      	str	r3, [r4, #8]
  4062e2:	6022      	str	r2, [r4, #0]
  4062e4:	b10b      	cbz	r3, 4062ea <__sfvwrite_r+0x1ca>
  4062e6:	46c2      	mov	sl, r8
  4062e8:	e779      	b.n	4061de <__sfvwrite_r+0xbe>
  4062ea:	4621      	mov	r1, r4
  4062ec:	9800      	ldr	r0, [sp, #0]
  4062ee:	f7ff fcb3 	bl	405c58 <_fflush_r>
  4062f2:	2800      	cmp	r0, #0
  4062f4:	d192      	bne.n	40621c <__sfvwrite_r+0xfc>
  4062f6:	46c2      	mov	sl, r8
  4062f8:	e771      	b.n	4061de <__sfvwrite_r+0xbe>
  4062fa:	465a      	mov	r2, fp
  4062fc:	4629      	mov	r1, r5
  4062fe:	f000 f9a7 	bl	406650 <memmove>
  406302:	68a2      	ldr	r2, [r4, #8]
  406304:	6823      	ldr	r3, [r4, #0]
  406306:	eba2 020b 	sub.w	r2, r2, fp
  40630a:	445b      	add	r3, fp
  40630c:	60a2      	str	r2, [r4, #8]
  40630e:	6023      	str	r3, [r4, #0]
  406310:	e7af      	b.n	406272 <__sfvwrite_r+0x152>
  406312:	6820      	ldr	r0, [r4, #0]
  406314:	46b8      	mov	r8, r7
  406316:	46ba      	mov	sl, r7
  406318:	46bb      	mov	fp, r7
  40631a:	e755      	b.n	4061c8 <__sfvwrite_r+0xa8>
  40631c:	6962      	ldr	r2, [r4, #20]
  40631e:	6820      	ldr	r0, [r4, #0]
  406320:	6921      	ldr	r1, [r4, #16]
  406322:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406326:	eba0 0a01 	sub.w	sl, r0, r1
  40632a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40632e:	f10a 0001 	add.w	r0, sl, #1
  406332:	ea4f 0868 	mov.w	r8, r8, asr #1
  406336:	4438      	add	r0, r7
  406338:	4540      	cmp	r0, r8
  40633a:	4642      	mov	r2, r8
  40633c:	bf84      	itt	hi
  40633e:	4680      	movhi	r8, r0
  406340:	4642      	movhi	r2, r8
  406342:	055b      	lsls	r3, r3, #21
  406344:	d544      	bpl.n	4063d0 <__sfvwrite_r+0x2b0>
  406346:	4611      	mov	r1, r2
  406348:	9800      	ldr	r0, [sp, #0]
  40634a:	f7fd ffa9 	bl	4042a0 <_malloc_r>
  40634e:	4683      	mov	fp, r0
  406350:	2800      	cmp	r0, #0
  406352:	d055      	beq.n	406400 <__sfvwrite_r+0x2e0>
  406354:	4652      	mov	r2, sl
  406356:	6921      	ldr	r1, [r4, #16]
  406358:	f7fe fa52 	bl	404800 <memcpy>
  40635c:	89a3      	ldrh	r3, [r4, #12]
  40635e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406366:	81a3      	strh	r3, [r4, #12]
  406368:	eb0b 000a 	add.w	r0, fp, sl
  40636c:	eba8 030a 	sub.w	r3, r8, sl
  406370:	f8c4 b010 	str.w	fp, [r4, #16]
  406374:	f8c4 8014 	str.w	r8, [r4, #20]
  406378:	6020      	str	r0, [r4, #0]
  40637a:	60a3      	str	r3, [r4, #8]
  40637c:	46b8      	mov	r8, r7
  40637e:	46ba      	mov	sl, r7
  406380:	46bb      	mov	fp, r7
  406382:	e721      	b.n	4061c8 <__sfvwrite_r+0xa8>
  406384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406388:	42b9      	cmp	r1, r7
  40638a:	bf28      	it	cs
  40638c:	4639      	movcs	r1, r7
  40638e:	464a      	mov	r2, r9
  406390:	fb91 f1f3 	sdiv	r1, r1, r3
  406394:	9800      	ldr	r0, [sp, #0]
  406396:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406398:	fb03 f301 	mul.w	r3, r3, r1
  40639c:	69e1      	ldr	r1, [r4, #28]
  40639e:	47b0      	blx	r6
  4063a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4063a4:	f73f af1b 	bgt.w	4061de <__sfvwrite_r+0xbe>
  4063a8:	e738      	b.n	40621c <__sfvwrite_r+0xfc>
  4063aa:	461a      	mov	r2, r3
  4063ac:	4629      	mov	r1, r5
  4063ae:	9301      	str	r3, [sp, #4]
  4063b0:	f000 f94e 	bl	406650 <memmove>
  4063b4:	6822      	ldr	r2, [r4, #0]
  4063b6:	9b01      	ldr	r3, [sp, #4]
  4063b8:	9800      	ldr	r0, [sp, #0]
  4063ba:	441a      	add	r2, r3
  4063bc:	6022      	str	r2, [r4, #0]
  4063be:	4621      	mov	r1, r4
  4063c0:	f7ff fc4a 	bl	405c58 <_fflush_r>
  4063c4:	9b01      	ldr	r3, [sp, #4]
  4063c6:	2800      	cmp	r0, #0
  4063c8:	f47f af28 	bne.w	40621c <__sfvwrite_r+0xfc>
  4063cc:	461f      	mov	r7, r3
  4063ce:	e750      	b.n	406272 <__sfvwrite_r+0x152>
  4063d0:	9800      	ldr	r0, [sp, #0]
  4063d2:	f000 f9a1 	bl	406718 <_realloc_r>
  4063d6:	4683      	mov	fp, r0
  4063d8:	2800      	cmp	r0, #0
  4063da:	d1c5      	bne.n	406368 <__sfvwrite_r+0x248>
  4063dc:	9d00      	ldr	r5, [sp, #0]
  4063de:	6921      	ldr	r1, [r4, #16]
  4063e0:	4628      	mov	r0, r5
  4063e2:	f7ff fdb7 	bl	405f54 <_free_r>
  4063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063ea:	220c      	movs	r2, #12
  4063ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4063f0:	602a      	str	r2, [r5, #0]
  4063f2:	e715      	b.n	406220 <__sfvwrite_r+0x100>
  4063f4:	f106 0901 	add.w	r9, r6, #1
  4063f8:	e722      	b.n	406240 <__sfvwrite_r+0x120>
  4063fa:	f04f 30ff 	mov.w	r0, #4294967295
  4063fe:	e6bf      	b.n	406180 <__sfvwrite_r+0x60>
  406400:	9a00      	ldr	r2, [sp, #0]
  406402:	230c      	movs	r3, #12
  406404:	6013      	str	r3, [r2, #0]
  406406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40640a:	e709      	b.n	406220 <__sfvwrite_r+0x100>
  40640c:	7ffffc00 	.word	0x7ffffc00

00406410 <_fwalk_reent>:
  406410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406414:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406418:	d01f      	beq.n	40645a <_fwalk_reent+0x4a>
  40641a:	4688      	mov	r8, r1
  40641c:	4606      	mov	r6, r0
  40641e:	f04f 0900 	mov.w	r9, #0
  406422:	687d      	ldr	r5, [r7, #4]
  406424:	68bc      	ldr	r4, [r7, #8]
  406426:	3d01      	subs	r5, #1
  406428:	d411      	bmi.n	40644e <_fwalk_reent+0x3e>
  40642a:	89a3      	ldrh	r3, [r4, #12]
  40642c:	2b01      	cmp	r3, #1
  40642e:	f105 35ff 	add.w	r5, r5, #4294967295
  406432:	d908      	bls.n	406446 <_fwalk_reent+0x36>
  406434:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406438:	3301      	adds	r3, #1
  40643a:	4621      	mov	r1, r4
  40643c:	4630      	mov	r0, r6
  40643e:	d002      	beq.n	406446 <_fwalk_reent+0x36>
  406440:	47c0      	blx	r8
  406442:	ea49 0900 	orr.w	r9, r9, r0
  406446:	1c6b      	adds	r3, r5, #1
  406448:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40644c:	d1ed      	bne.n	40642a <_fwalk_reent+0x1a>
  40644e:	683f      	ldr	r7, [r7, #0]
  406450:	2f00      	cmp	r7, #0
  406452:	d1e6      	bne.n	406422 <_fwalk_reent+0x12>
  406454:	4648      	mov	r0, r9
  406456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40645a:	46b9      	mov	r9, r7
  40645c:	4648      	mov	r0, r9
  40645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406462:	bf00      	nop

00406464 <__locale_mb_cur_max>:
  406464:	4b04      	ldr	r3, [pc, #16]	; (406478 <__locale_mb_cur_max+0x14>)
  406466:	4a05      	ldr	r2, [pc, #20]	; (40647c <__locale_mb_cur_max+0x18>)
  406468:	681b      	ldr	r3, [r3, #0]
  40646a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40646c:	2b00      	cmp	r3, #0
  40646e:	bf08      	it	eq
  406470:	4613      	moveq	r3, r2
  406472:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406476:	4770      	bx	lr
  406478:	20400014 	.word	0x20400014
  40647c:	20400854 	.word	0x20400854

00406480 <__retarget_lock_init_recursive>:
  406480:	4770      	bx	lr
  406482:	bf00      	nop

00406484 <__retarget_lock_close_recursive>:
  406484:	4770      	bx	lr
  406486:	bf00      	nop

00406488 <__retarget_lock_acquire_recursive>:
  406488:	4770      	bx	lr
  40648a:	bf00      	nop

0040648c <__retarget_lock_release_recursive>:
  40648c:	4770      	bx	lr
  40648e:	bf00      	nop

00406490 <__swhatbuf_r>:
  406490:	b570      	push	{r4, r5, r6, lr}
  406492:	460c      	mov	r4, r1
  406494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406498:	2900      	cmp	r1, #0
  40649a:	b090      	sub	sp, #64	; 0x40
  40649c:	4615      	mov	r5, r2
  40649e:	461e      	mov	r6, r3
  4064a0:	db14      	blt.n	4064cc <__swhatbuf_r+0x3c>
  4064a2:	aa01      	add	r2, sp, #4
  4064a4:	f000 fc9e 	bl	406de4 <_fstat_r>
  4064a8:	2800      	cmp	r0, #0
  4064aa:	db0f      	blt.n	4064cc <__swhatbuf_r+0x3c>
  4064ac:	9a02      	ldr	r2, [sp, #8]
  4064ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4064b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4064b6:	fab2 f282 	clz	r2, r2
  4064ba:	0952      	lsrs	r2, r2, #5
  4064bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4064c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4064c4:	6032      	str	r2, [r6, #0]
  4064c6:	602b      	str	r3, [r5, #0]
  4064c8:	b010      	add	sp, #64	; 0x40
  4064ca:	bd70      	pop	{r4, r5, r6, pc}
  4064cc:	89a2      	ldrh	r2, [r4, #12]
  4064ce:	2300      	movs	r3, #0
  4064d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4064d4:	6033      	str	r3, [r6, #0]
  4064d6:	d004      	beq.n	4064e2 <__swhatbuf_r+0x52>
  4064d8:	2240      	movs	r2, #64	; 0x40
  4064da:	4618      	mov	r0, r3
  4064dc:	602a      	str	r2, [r5, #0]
  4064de:	b010      	add	sp, #64	; 0x40
  4064e0:	bd70      	pop	{r4, r5, r6, pc}
  4064e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4064e6:	602b      	str	r3, [r5, #0]
  4064e8:	b010      	add	sp, #64	; 0x40
  4064ea:	bd70      	pop	{r4, r5, r6, pc}

004064ec <__smakebuf_r>:
  4064ec:	898a      	ldrh	r2, [r1, #12]
  4064ee:	0792      	lsls	r2, r2, #30
  4064f0:	460b      	mov	r3, r1
  4064f2:	d506      	bpl.n	406502 <__smakebuf_r+0x16>
  4064f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4064f8:	2101      	movs	r1, #1
  4064fa:	601a      	str	r2, [r3, #0]
  4064fc:	611a      	str	r2, [r3, #16]
  4064fe:	6159      	str	r1, [r3, #20]
  406500:	4770      	bx	lr
  406502:	b5f0      	push	{r4, r5, r6, r7, lr}
  406504:	b083      	sub	sp, #12
  406506:	ab01      	add	r3, sp, #4
  406508:	466a      	mov	r2, sp
  40650a:	460c      	mov	r4, r1
  40650c:	4606      	mov	r6, r0
  40650e:	f7ff ffbf 	bl	406490 <__swhatbuf_r>
  406512:	9900      	ldr	r1, [sp, #0]
  406514:	4605      	mov	r5, r0
  406516:	4630      	mov	r0, r6
  406518:	f7fd fec2 	bl	4042a0 <_malloc_r>
  40651c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406520:	b1d8      	cbz	r0, 40655a <__smakebuf_r+0x6e>
  406522:	9a01      	ldr	r2, [sp, #4]
  406524:	4f15      	ldr	r7, [pc, #84]	; (40657c <__smakebuf_r+0x90>)
  406526:	9900      	ldr	r1, [sp, #0]
  406528:	63f7      	str	r7, [r6, #60]	; 0x3c
  40652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40652e:	81a3      	strh	r3, [r4, #12]
  406530:	6020      	str	r0, [r4, #0]
  406532:	6120      	str	r0, [r4, #16]
  406534:	6161      	str	r1, [r4, #20]
  406536:	b91a      	cbnz	r2, 406540 <__smakebuf_r+0x54>
  406538:	432b      	orrs	r3, r5
  40653a:	81a3      	strh	r3, [r4, #12]
  40653c:	b003      	add	sp, #12
  40653e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406540:	4630      	mov	r0, r6
  406542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406546:	f000 fc61 	bl	406e0c <_isatty_r>
  40654a:	b1a0      	cbz	r0, 406576 <__smakebuf_r+0x8a>
  40654c:	89a3      	ldrh	r3, [r4, #12]
  40654e:	f023 0303 	bic.w	r3, r3, #3
  406552:	f043 0301 	orr.w	r3, r3, #1
  406556:	b21b      	sxth	r3, r3
  406558:	e7ee      	b.n	406538 <__smakebuf_r+0x4c>
  40655a:	059a      	lsls	r2, r3, #22
  40655c:	d4ee      	bmi.n	40653c <__smakebuf_r+0x50>
  40655e:	f023 0303 	bic.w	r3, r3, #3
  406562:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406566:	f043 0302 	orr.w	r3, r3, #2
  40656a:	2101      	movs	r1, #1
  40656c:	81a3      	strh	r3, [r4, #12]
  40656e:	6022      	str	r2, [r4, #0]
  406570:	6122      	str	r2, [r4, #16]
  406572:	6161      	str	r1, [r4, #20]
  406574:	e7e2      	b.n	40653c <__smakebuf_r+0x50>
  406576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40657a:	e7dd      	b.n	406538 <__smakebuf_r+0x4c>
  40657c:	00405cad 	.word	0x00405cad

00406580 <__ascii_mbtowc>:
  406580:	b082      	sub	sp, #8
  406582:	b149      	cbz	r1, 406598 <__ascii_mbtowc+0x18>
  406584:	b15a      	cbz	r2, 40659e <__ascii_mbtowc+0x1e>
  406586:	b16b      	cbz	r3, 4065a4 <__ascii_mbtowc+0x24>
  406588:	7813      	ldrb	r3, [r2, #0]
  40658a:	600b      	str	r3, [r1, #0]
  40658c:	7812      	ldrb	r2, [r2, #0]
  40658e:	1c10      	adds	r0, r2, #0
  406590:	bf18      	it	ne
  406592:	2001      	movne	r0, #1
  406594:	b002      	add	sp, #8
  406596:	4770      	bx	lr
  406598:	a901      	add	r1, sp, #4
  40659a:	2a00      	cmp	r2, #0
  40659c:	d1f3      	bne.n	406586 <__ascii_mbtowc+0x6>
  40659e:	4610      	mov	r0, r2
  4065a0:	b002      	add	sp, #8
  4065a2:	4770      	bx	lr
  4065a4:	f06f 0001 	mvn.w	r0, #1
  4065a8:	e7f4      	b.n	406594 <__ascii_mbtowc+0x14>
  4065aa:	bf00      	nop
  4065ac:	0000      	movs	r0, r0
	...

004065b0 <memchr>:
  4065b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4065b4:	2a10      	cmp	r2, #16
  4065b6:	db2b      	blt.n	406610 <memchr+0x60>
  4065b8:	f010 0f07 	tst.w	r0, #7
  4065bc:	d008      	beq.n	4065d0 <memchr+0x20>
  4065be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4065c2:	3a01      	subs	r2, #1
  4065c4:	428b      	cmp	r3, r1
  4065c6:	d02d      	beq.n	406624 <memchr+0x74>
  4065c8:	f010 0f07 	tst.w	r0, #7
  4065cc:	b342      	cbz	r2, 406620 <memchr+0x70>
  4065ce:	d1f6      	bne.n	4065be <memchr+0xe>
  4065d0:	b4f0      	push	{r4, r5, r6, r7}
  4065d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4065d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4065da:	f022 0407 	bic.w	r4, r2, #7
  4065de:	f07f 0700 	mvns.w	r7, #0
  4065e2:	2300      	movs	r3, #0
  4065e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4065e8:	3c08      	subs	r4, #8
  4065ea:	ea85 0501 	eor.w	r5, r5, r1
  4065ee:	ea86 0601 	eor.w	r6, r6, r1
  4065f2:	fa85 f547 	uadd8	r5, r5, r7
  4065f6:	faa3 f587 	sel	r5, r3, r7
  4065fa:	fa86 f647 	uadd8	r6, r6, r7
  4065fe:	faa5 f687 	sel	r6, r5, r7
  406602:	b98e      	cbnz	r6, 406628 <memchr+0x78>
  406604:	d1ee      	bne.n	4065e4 <memchr+0x34>
  406606:	bcf0      	pop	{r4, r5, r6, r7}
  406608:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40660c:	f002 0207 	and.w	r2, r2, #7
  406610:	b132      	cbz	r2, 406620 <memchr+0x70>
  406612:	f810 3b01 	ldrb.w	r3, [r0], #1
  406616:	3a01      	subs	r2, #1
  406618:	ea83 0301 	eor.w	r3, r3, r1
  40661c:	b113      	cbz	r3, 406624 <memchr+0x74>
  40661e:	d1f8      	bne.n	406612 <memchr+0x62>
  406620:	2000      	movs	r0, #0
  406622:	4770      	bx	lr
  406624:	3801      	subs	r0, #1
  406626:	4770      	bx	lr
  406628:	2d00      	cmp	r5, #0
  40662a:	bf06      	itte	eq
  40662c:	4635      	moveq	r5, r6
  40662e:	3803      	subeq	r0, #3
  406630:	3807      	subne	r0, #7
  406632:	f015 0f01 	tst.w	r5, #1
  406636:	d107      	bne.n	406648 <memchr+0x98>
  406638:	3001      	adds	r0, #1
  40663a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40663e:	bf02      	ittt	eq
  406640:	3001      	addeq	r0, #1
  406642:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406646:	3001      	addeq	r0, #1
  406648:	bcf0      	pop	{r4, r5, r6, r7}
  40664a:	3801      	subs	r0, #1
  40664c:	4770      	bx	lr
  40664e:	bf00      	nop

00406650 <memmove>:
  406650:	4288      	cmp	r0, r1
  406652:	b5f0      	push	{r4, r5, r6, r7, lr}
  406654:	d90d      	bls.n	406672 <memmove+0x22>
  406656:	188b      	adds	r3, r1, r2
  406658:	4298      	cmp	r0, r3
  40665a:	d20a      	bcs.n	406672 <memmove+0x22>
  40665c:	1884      	adds	r4, r0, r2
  40665e:	2a00      	cmp	r2, #0
  406660:	d051      	beq.n	406706 <memmove+0xb6>
  406662:	4622      	mov	r2, r4
  406664:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406668:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40666c:	4299      	cmp	r1, r3
  40666e:	d1f9      	bne.n	406664 <memmove+0x14>
  406670:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406672:	2a0f      	cmp	r2, #15
  406674:	d948      	bls.n	406708 <memmove+0xb8>
  406676:	ea41 0300 	orr.w	r3, r1, r0
  40667a:	079b      	lsls	r3, r3, #30
  40667c:	d146      	bne.n	40670c <memmove+0xbc>
  40667e:	f100 0410 	add.w	r4, r0, #16
  406682:	f101 0310 	add.w	r3, r1, #16
  406686:	4615      	mov	r5, r2
  406688:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40668c:	f844 6c10 	str.w	r6, [r4, #-16]
  406690:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406694:	f844 6c0c 	str.w	r6, [r4, #-12]
  406698:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40669c:	f844 6c08 	str.w	r6, [r4, #-8]
  4066a0:	3d10      	subs	r5, #16
  4066a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4066a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4066aa:	2d0f      	cmp	r5, #15
  4066ac:	f103 0310 	add.w	r3, r3, #16
  4066b0:	f104 0410 	add.w	r4, r4, #16
  4066b4:	d8e8      	bhi.n	406688 <memmove+0x38>
  4066b6:	f1a2 0310 	sub.w	r3, r2, #16
  4066ba:	f023 030f 	bic.w	r3, r3, #15
  4066be:	f002 0e0f 	and.w	lr, r2, #15
  4066c2:	3310      	adds	r3, #16
  4066c4:	f1be 0f03 	cmp.w	lr, #3
  4066c8:	4419      	add	r1, r3
  4066ca:	4403      	add	r3, r0
  4066cc:	d921      	bls.n	406712 <memmove+0xc2>
  4066ce:	1f1e      	subs	r6, r3, #4
  4066d0:	460d      	mov	r5, r1
  4066d2:	4674      	mov	r4, lr
  4066d4:	3c04      	subs	r4, #4
  4066d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4066da:	f846 7f04 	str.w	r7, [r6, #4]!
  4066de:	2c03      	cmp	r4, #3
  4066e0:	d8f8      	bhi.n	4066d4 <memmove+0x84>
  4066e2:	f1ae 0404 	sub.w	r4, lr, #4
  4066e6:	f024 0403 	bic.w	r4, r4, #3
  4066ea:	3404      	adds	r4, #4
  4066ec:	4421      	add	r1, r4
  4066ee:	4423      	add	r3, r4
  4066f0:	f002 0203 	and.w	r2, r2, #3
  4066f4:	b162      	cbz	r2, 406710 <memmove+0xc0>
  4066f6:	3b01      	subs	r3, #1
  4066f8:	440a      	add	r2, r1
  4066fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4066fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  406702:	428a      	cmp	r2, r1
  406704:	d1f9      	bne.n	4066fa <memmove+0xaa>
  406706:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406708:	4603      	mov	r3, r0
  40670a:	e7f3      	b.n	4066f4 <memmove+0xa4>
  40670c:	4603      	mov	r3, r0
  40670e:	e7f2      	b.n	4066f6 <memmove+0xa6>
  406710:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406712:	4672      	mov	r2, lr
  406714:	e7ee      	b.n	4066f4 <memmove+0xa4>
  406716:	bf00      	nop

00406718 <_realloc_r>:
  406718:	2900      	cmp	r1, #0
  40671a:	f000 8095 	beq.w	406848 <_realloc_r+0x130>
  40671e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406722:	460d      	mov	r5, r1
  406724:	4616      	mov	r6, r2
  406726:	b083      	sub	sp, #12
  406728:	4680      	mov	r8, r0
  40672a:	f106 070b 	add.w	r7, r6, #11
  40672e:	f7fe f94f 	bl	4049d0 <__malloc_lock>
  406732:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406736:	2f16      	cmp	r7, #22
  406738:	f02e 0403 	bic.w	r4, lr, #3
  40673c:	f1a5 0908 	sub.w	r9, r5, #8
  406740:	d83c      	bhi.n	4067bc <_realloc_r+0xa4>
  406742:	2210      	movs	r2, #16
  406744:	4617      	mov	r7, r2
  406746:	42be      	cmp	r6, r7
  406748:	d83d      	bhi.n	4067c6 <_realloc_r+0xae>
  40674a:	4294      	cmp	r4, r2
  40674c:	da43      	bge.n	4067d6 <_realloc_r+0xbe>
  40674e:	4bc4      	ldr	r3, [pc, #784]	; (406a60 <_realloc_r+0x348>)
  406750:	6899      	ldr	r1, [r3, #8]
  406752:	eb09 0004 	add.w	r0, r9, r4
  406756:	4288      	cmp	r0, r1
  406758:	f000 80b4 	beq.w	4068c4 <_realloc_r+0x1ac>
  40675c:	6843      	ldr	r3, [r0, #4]
  40675e:	f023 0101 	bic.w	r1, r3, #1
  406762:	4401      	add	r1, r0
  406764:	6849      	ldr	r1, [r1, #4]
  406766:	07c9      	lsls	r1, r1, #31
  406768:	d54c      	bpl.n	406804 <_realloc_r+0xec>
  40676a:	f01e 0f01 	tst.w	lr, #1
  40676e:	f000 809b 	beq.w	4068a8 <_realloc_r+0x190>
  406772:	4631      	mov	r1, r6
  406774:	4640      	mov	r0, r8
  406776:	f7fd fd93 	bl	4042a0 <_malloc_r>
  40677a:	4606      	mov	r6, r0
  40677c:	2800      	cmp	r0, #0
  40677e:	d03a      	beq.n	4067f6 <_realloc_r+0xde>
  406780:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406784:	f023 0301 	bic.w	r3, r3, #1
  406788:	444b      	add	r3, r9
  40678a:	f1a0 0208 	sub.w	r2, r0, #8
  40678e:	429a      	cmp	r2, r3
  406790:	f000 8121 	beq.w	4069d6 <_realloc_r+0x2be>
  406794:	1f22      	subs	r2, r4, #4
  406796:	2a24      	cmp	r2, #36	; 0x24
  406798:	f200 8107 	bhi.w	4069aa <_realloc_r+0x292>
  40679c:	2a13      	cmp	r2, #19
  40679e:	f200 80db 	bhi.w	406958 <_realloc_r+0x240>
  4067a2:	4603      	mov	r3, r0
  4067a4:	462a      	mov	r2, r5
  4067a6:	6811      	ldr	r1, [r2, #0]
  4067a8:	6019      	str	r1, [r3, #0]
  4067aa:	6851      	ldr	r1, [r2, #4]
  4067ac:	6059      	str	r1, [r3, #4]
  4067ae:	6892      	ldr	r2, [r2, #8]
  4067b0:	609a      	str	r2, [r3, #8]
  4067b2:	4629      	mov	r1, r5
  4067b4:	4640      	mov	r0, r8
  4067b6:	f7ff fbcd 	bl	405f54 <_free_r>
  4067ba:	e01c      	b.n	4067f6 <_realloc_r+0xde>
  4067bc:	f027 0707 	bic.w	r7, r7, #7
  4067c0:	2f00      	cmp	r7, #0
  4067c2:	463a      	mov	r2, r7
  4067c4:	dabf      	bge.n	406746 <_realloc_r+0x2e>
  4067c6:	2600      	movs	r6, #0
  4067c8:	230c      	movs	r3, #12
  4067ca:	4630      	mov	r0, r6
  4067cc:	f8c8 3000 	str.w	r3, [r8]
  4067d0:	b003      	add	sp, #12
  4067d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067d6:	462e      	mov	r6, r5
  4067d8:	1be3      	subs	r3, r4, r7
  4067da:	2b0f      	cmp	r3, #15
  4067dc:	d81e      	bhi.n	40681c <_realloc_r+0x104>
  4067de:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4067e2:	f003 0301 	and.w	r3, r3, #1
  4067e6:	4323      	orrs	r3, r4
  4067e8:	444c      	add	r4, r9
  4067ea:	f8c9 3004 	str.w	r3, [r9, #4]
  4067ee:	6863      	ldr	r3, [r4, #4]
  4067f0:	f043 0301 	orr.w	r3, r3, #1
  4067f4:	6063      	str	r3, [r4, #4]
  4067f6:	4640      	mov	r0, r8
  4067f8:	f7fe f8f0 	bl	4049dc <__malloc_unlock>
  4067fc:	4630      	mov	r0, r6
  4067fe:	b003      	add	sp, #12
  406800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406804:	f023 0303 	bic.w	r3, r3, #3
  406808:	18e1      	adds	r1, r4, r3
  40680a:	4291      	cmp	r1, r2
  40680c:	db1f      	blt.n	40684e <_realloc_r+0x136>
  40680e:	68c3      	ldr	r3, [r0, #12]
  406810:	6882      	ldr	r2, [r0, #8]
  406812:	462e      	mov	r6, r5
  406814:	60d3      	str	r3, [r2, #12]
  406816:	460c      	mov	r4, r1
  406818:	609a      	str	r2, [r3, #8]
  40681a:	e7dd      	b.n	4067d8 <_realloc_r+0xc0>
  40681c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406820:	eb09 0107 	add.w	r1, r9, r7
  406824:	f002 0201 	and.w	r2, r2, #1
  406828:	444c      	add	r4, r9
  40682a:	f043 0301 	orr.w	r3, r3, #1
  40682e:	4317      	orrs	r7, r2
  406830:	f8c9 7004 	str.w	r7, [r9, #4]
  406834:	604b      	str	r3, [r1, #4]
  406836:	6863      	ldr	r3, [r4, #4]
  406838:	f043 0301 	orr.w	r3, r3, #1
  40683c:	3108      	adds	r1, #8
  40683e:	6063      	str	r3, [r4, #4]
  406840:	4640      	mov	r0, r8
  406842:	f7ff fb87 	bl	405f54 <_free_r>
  406846:	e7d6      	b.n	4067f6 <_realloc_r+0xde>
  406848:	4611      	mov	r1, r2
  40684a:	f7fd bd29 	b.w	4042a0 <_malloc_r>
  40684e:	f01e 0f01 	tst.w	lr, #1
  406852:	d18e      	bne.n	406772 <_realloc_r+0x5a>
  406854:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406858:	eba9 0a01 	sub.w	sl, r9, r1
  40685c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406860:	f021 0103 	bic.w	r1, r1, #3
  406864:	440b      	add	r3, r1
  406866:	4423      	add	r3, r4
  406868:	4293      	cmp	r3, r2
  40686a:	db25      	blt.n	4068b8 <_realloc_r+0x1a0>
  40686c:	68c2      	ldr	r2, [r0, #12]
  40686e:	6881      	ldr	r1, [r0, #8]
  406870:	4656      	mov	r6, sl
  406872:	60ca      	str	r2, [r1, #12]
  406874:	6091      	str	r1, [r2, #8]
  406876:	f8da 100c 	ldr.w	r1, [sl, #12]
  40687a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40687e:	1f22      	subs	r2, r4, #4
  406880:	2a24      	cmp	r2, #36	; 0x24
  406882:	60c1      	str	r1, [r0, #12]
  406884:	6088      	str	r0, [r1, #8]
  406886:	f200 8094 	bhi.w	4069b2 <_realloc_r+0x29a>
  40688a:	2a13      	cmp	r2, #19
  40688c:	d96f      	bls.n	40696e <_realloc_r+0x256>
  40688e:	6829      	ldr	r1, [r5, #0]
  406890:	f8ca 1008 	str.w	r1, [sl, #8]
  406894:	6869      	ldr	r1, [r5, #4]
  406896:	f8ca 100c 	str.w	r1, [sl, #12]
  40689a:	2a1b      	cmp	r2, #27
  40689c:	f200 80a2 	bhi.w	4069e4 <_realloc_r+0x2cc>
  4068a0:	3508      	adds	r5, #8
  4068a2:	f10a 0210 	add.w	r2, sl, #16
  4068a6:	e063      	b.n	406970 <_realloc_r+0x258>
  4068a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4068ac:	eba9 0a03 	sub.w	sl, r9, r3
  4068b0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4068b4:	f021 0103 	bic.w	r1, r1, #3
  4068b8:	1863      	adds	r3, r4, r1
  4068ba:	4293      	cmp	r3, r2
  4068bc:	f6ff af59 	blt.w	406772 <_realloc_r+0x5a>
  4068c0:	4656      	mov	r6, sl
  4068c2:	e7d8      	b.n	406876 <_realloc_r+0x15e>
  4068c4:	6841      	ldr	r1, [r0, #4]
  4068c6:	f021 0b03 	bic.w	fp, r1, #3
  4068ca:	44a3      	add	fp, r4
  4068cc:	f107 0010 	add.w	r0, r7, #16
  4068d0:	4583      	cmp	fp, r0
  4068d2:	da56      	bge.n	406982 <_realloc_r+0x26a>
  4068d4:	f01e 0f01 	tst.w	lr, #1
  4068d8:	f47f af4b 	bne.w	406772 <_realloc_r+0x5a>
  4068dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4068e0:	eba9 0a01 	sub.w	sl, r9, r1
  4068e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4068e8:	f021 0103 	bic.w	r1, r1, #3
  4068ec:	448b      	add	fp, r1
  4068ee:	4558      	cmp	r0, fp
  4068f0:	dce2      	bgt.n	4068b8 <_realloc_r+0x1a0>
  4068f2:	4656      	mov	r6, sl
  4068f4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4068f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4068fc:	1f22      	subs	r2, r4, #4
  4068fe:	2a24      	cmp	r2, #36	; 0x24
  406900:	60c1      	str	r1, [r0, #12]
  406902:	6088      	str	r0, [r1, #8]
  406904:	f200 808f 	bhi.w	406a26 <_realloc_r+0x30e>
  406908:	2a13      	cmp	r2, #19
  40690a:	f240 808a 	bls.w	406a22 <_realloc_r+0x30a>
  40690e:	6829      	ldr	r1, [r5, #0]
  406910:	f8ca 1008 	str.w	r1, [sl, #8]
  406914:	6869      	ldr	r1, [r5, #4]
  406916:	f8ca 100c 	str.w	r1, [sl, #12]
  40691a:	2a1b      	cmp	r2, #27
  40691c:	f200 808a 	bhi.w	406a34 <_realloc_r+0x31c>
  406920:	3508      	adds	r5, #8
  406922:	f10a 0210 	add.w	r2, sl, #16
  406926:	6829      	ldr	r1, [r5, #0]
  406928:	6011      	str	r1, [r2, #0]
  40692a:	6869      	ldr	r1, [r5, #4]
  40692c:	6051      	str	r1, [r2, #4]
  40692e:	68a9      	ldr	r1, [r5, #8]
  406930:	6091      	str	r1, [r2, #8]
  406932:	eb0a 0107 	add.w	r1, sl, r7
  406936:	ebab 0207 	sub.w	r2, fp, r7
  40693a:	f042 0201 	orr.w	r2, r2, #1
  40693e:	6099      	str	r1, [r3, #8]
  406940:	604a      	str	r2, [r1, #4]
  406942:	f8da 3004 	ldr.w	r3, [sl, #4]
  406946:	f003 0301 	and.w	r3, r3, #1
  40694a:	431f      	orrs	r7, r3
  40694c:	4640      	mov	r0, r8
  40694e:	f8ca 7004 	str.w	r7, [sl, #4]
  406952:	f7fe f843 	bl	4049dc <__malloc_unlock>
  406956:	e751      	b.n	4067fc <_realloc_r+0xe4>
  406958:	682b      	ldr	r3, [r5, #0]
  40695a:	6003      	str	r3, [r0, #0]
  40695c:	686b      	ldr	r3, [r5, #4]
  40695e:	6043      	str	r3, [r0, #4]
  406960:	2a1b      	cmp	r2, #27
  406962:	d82d      	bhi.n	4069c0 <_realloc_r+0x2a8>
  406964:	f100 0308 	add.w	r3, r0, #8
  406968:	f105 0208 	add.w	r2, r5, #8
  40696c:	e71b      	b.n	4067a6 <_realloc_r+0x8e>
  40696e:	4632      	mov	r2, r6
  406970:	6829      	ldr	r1, [r5, #0]
  406972:	6011      	str	r1, [r2, #0]
  406974:	6869      	ldr	r1, [r5, #4]
  406976:	6051      	str	r1, [r2, #4]
  406978:	68a9      	ldr	r1, [r5, #8]
  40697a:	6091      	str	r1, [r2, #8]
  40697c:	461c      	mov	r4, r3
  40697e:	46d1      	mov	r9, sl
  406980:	e72a      	b.n	4067d8 <_realloc_r+0xc0>
  406982:	eb09 0107 	add.w	r1, r9, r7
  406986:	ebab 0b07 	sub.w	fp, fp, r7
  40698a:	f04b 0201 	orr.w	r2, fp, #1
  40698e:	6099      	str	r1, [r3, #8]
  406990:	604a      	str	r2, [r1, #4]
  406992:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406996:	f003 0301 	and.w	r3, r3, #1
  40699a:	431f      	orrs	r7, r3
  40699c:	4640      	mov	r0, r8
  40699e:	f845 7c04 	str.w	r7, [r5, #-4]
  4069a2:	f7fe f81b 	bl	4049dc <__malloc_unlock>
  4069a6:	462e      	mov	r6, r5
  4069a8:	e728      	b.n	4067fc <_realloc_r+0xe4>
  4069aa:	4629      	mov	r1, r5
  4069ac:	f7ff fe50 	bl	406650 <memmove>
  4069b0:	e6ff      	b.n	4067b2 <_realloc_r+0x9a>
  4069b2:	4629      	mov	r1, r5
  4069b4:	4630      	mov	r0, r6
  4069b6:	461c      	mov	r4, r3
  4069b8:	46d1      	mov	r9, sl
  4069ba:	f7ff fe49 	bl	406650 <memmove>
  4069be:	e70b      	b.n	4067d8 <_realloc_r+0xc0>
  4069c0:	68ab      	ldr	r3, [r5, #8]
  4069c2:	6083      	str	r3, [r0, #8]
  4069c4:	68eb      	ldr	r3, [r5, #12]
  4069c6:	60c3      	str	r3, [r0, #12]
  4069c8:	2a24      	cmp	r2, #36	; 0x24
  4069ca:	d017      	beq.n	4069fc <_realloc_r+0x2e4>
  4069cc:	f100 0310 	add.w	r3, r0, #16
  4069d0:	f105 0210 	add.w	r2, r5, #16
  4069d4:	e6e7      	b.n	4067a6 <_realloc_r+0x8e>
  4069d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4069da:	f023 0303 	bic.w	r3, r3, #3
  4069de:	441c      	add	r4, r3
  4069e0:	462e      	mov	r6, r5
  4069e2:	e6f9      	b.n	4067d8 <_realloc_r+0xc0>
  4069e4:	68a9      	ldr	r1, [r5, #8]
  4069e6:	f8ca 1010 	str.w	r1, [sl, #16]
  4069ea:	68e9      	ldr	r1, [r5, #12]
  4069ec:	f8ca 1014 	str.w	r1, [sl, #20]
  4069f0:	2a24      	cmp	r2, #36	; 0x24
  4069f2:	d00c      	beq.n	406a0e <_realloc_r+0x2f6>
  4069f4:	3510      	adds	r5, #16
  4069f6:	f10a 0218 	add.w	r2, sl, #24
  4069fa:	e7b9      	b.n	406970 <_realloc_r+0x258>
  4069fc:	692b      	ldr	r3, [r5, #16]
  4069fe:	6103      	str	r3, [r0, #16]
  406a00:	696b      	ldr	r3, [r5, #20]
  406a02:	6143      	str	r3, [r0, #20]
  406a04:	f105 0218 	add.w	r2, r5, #24
  406a08:	f100 0318 	add.w	r3, r0, #24
  406a0c:	e6cb      	b.n	4067a6 <_realloc_r+0x8e>
  406a0e:	692a      	ldr	r2, [r5, #16]
  406a10:	f8ca 2018 	str.w	r2, [sl, #24]
  406a14:	696a      	ldr	r2, [r5, #20]
  406a16:	f8ca 201c 	str.w	r2, [sl, #28]
  406a1a:	3518      	adds	r5, #24
  406a1c:	f10a 0220 	add.w	r2, sl, #32
  406a20:	e7a6      	b.n	406970 <_realloc_r+0x258>
  406a22:	4632      	mov	r2, r6
  406a24:	e77f      	b.n	406926 <_realloc_r+0x20e>
  406a26:	4629      	mov	r1, r5
  406a28:	4630      	mov	r0, r6
  406a2a:	9301      	str	r3, [sp, #4]
  406a2c:	f7ff fe10 	bl	406650 <memmove>
  406a30:	9b01      	ldr	r3, [sp, #4]
  406a32:	e77e      	b.n	406932 <_realloc_r+0x21a>
  406a34:	68a9      	ldr	r1, [r5, #8]
  406a36:	f8ca 1010 	str.w	r1, [sl, #16]
  406a3a:	68e9      	ldr	r1, [r5, #12]
  406a3c:	f8ca 1014 	str.w	r1, [sl, #20]
  406a40:	2a24      	cmp	r2, #36	; 0x24
  406a42:	d003      	beq.n	406a4c <_realloc_r+0x334>
  406a44:	3510      	adds	r5, #16
  406a46:	f10a 0218 	add.w	r2, sl, #24
  406a4a:	e76c      	b.n	406926 <_realloc_r+0x20e>
  406a4c:	692a      	ldr	r2, [r5, #16]
  406a4e:	f8ca 2018 	str.w	r2, [sl, #24]
  406a52:	696a      	ldr	r2, [r5, #20]
  406a54:	f8ca 201c 	str.w	r2, [sl, #28]
  406a58:	3518      	adds	r5, #24
  406a5a:	f10a 0220 	add.w	r2, sl, #32
  406a5e:	e762      	b.n	406926 <_realloc_r+0x20e>
  406a60:	20400440 	.word	0x20400440

00406a64 <__sread>:
  406a64:	b510      	push	{r4, lr}
  406a66:	460c      	mov	r4, r1
  406a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406a6c:	f000 f9f6 	bl	406e5c <_read_r>
  406a70:	2800      	cmp	r0, #0
  406a72:	db03      	blt.n	406a7c <__sread+0x18>
  406a74:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406a76:	4403      	add	r3, r0
  406a78:	6523      	str	r3, [r4, #80]	; 0x50
  406a7a:	bd10      	pop	{r4, pc}
  406a7c:	89a3      	ldrh	r3, [r4, #12]
  406a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406a82:	81a3      	strh	r3, [r4, #12]
  406a84:	bd10      	pop	{r4, pc}
  406a86:	bf00      	nop

00406a88 <__swrite>:
  406a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a8c:	4616      	mov	r6, r2
  406a8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406a92:	461f      	mov	r7, r3
  406a94:	05d3      	lsls	r3, r2, #23
  406a96:	460c      	mov	r4, r1
  406a98:	4605      	mov	r5, r0
  406a9a:	d507      	bpl.n	406aac <__swrite+0x24>
  406a9c:	2200      	movs	r2, #0
  406a9e:	2302      	movs	r3, #2
  406aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406aa4:	f000 f9c4 	bl	406e30 <_lseek_r>
  406aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406ab4:	81a2      	strh	r2, [r4, #12]
  406ab6:	463b      	mov	r3, r7
  406ab8:	4632      	mov	r2, r6
  406aba:	4628      	mov	r0, r5
  406abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406ac0:	f000 b8a4 	b.w	406c0c <_write_r>

00406ac4 <__sseek>:
  406ac4:	b510      	push	{r4, lr}
  406ac6:	460c      	mov	r4, r1
  406ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406acc:	f000 f9b0 	bl	406e30 <_lseek_r>
  406ad0:	89a3      	ldrh	r3, [r4, #12]
  406ad2:	1c42      	adds	r2, r0, #1
  406ad4:	bf0e      	itee	eq
  406ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406ade:	6520      	strne	r0, [r4, #80]	; 0x50
  406ae0:	81a3      	strh	r3, [r4, #12]
  406ae2:	bd10      	pop	{r4, pc}

00406ae4 <__sclose>:
  406ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ae8:	f000 b908 	b.w	406cfc <_close_r>

00406aec <__swbuf_r>:
  406aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406aee:	460d      	mov	r5, r1
  406af0:	4614      	mov	r4, r2
  406af2:	4606      	mov	r6, r0
  406af4:	b110      	cbz	r0, 406afc <__swbuf_r+0x10>
  406af6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406af8:	2b00      	cmp	r3, #0
  406afa:	d04b      	beq.n	406b94 <__swbuf_r+0xa8>
  406afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b00:	69a3      	ldr	r3, [r4, #24]
  406b02:	60a3      	str	r3, [r4, #8]
  406b04:	b291      	uxth	r1, r2
  406b06:	0708      	lsls	r0, r1, #28
  406b08:	d539      	bpl.n	406b7e <__swbuf_r+0x92>
  406b0a:	6923      	ldr	r3, [r4, #16]
  406b0c:	2b00      	cmp	r3, #0
  406b0e:	d036      	beq.n	406b7e <__swbuf_r+0x92>
  406b10:	b2ed      	uxtb	r5, r5
  406b12:	0489      	lsls	r1, r1, #18
  406b14:	462f      	mov	r7, r5
  406b16:	d515      	bpl.n	406b44 <__swbuf_r+0x58>
  406b18:	6822      	ldr	r2, [r4, #0]
  406b1a:	6961      	ldr	r1, [r4, #20]
  406b1c:	1ad3      	subs	r3, r2, r3
  406b1e:	428b      	cmp	r3, r1
  406b20:	da1c      	bge.n	406b5c <__swbuf_r+0x70>
  406b22:	3301      	adds	r3, #1
  406b24:	68a1      	ldr	r1, [r4, #8]
  406b26:	1c50      	adds	r0, r2, #1
  406b28:	3901      	subs	r1, #1
  406b2a:	60a1      	str	r1, [r4, #8]
  406b2c:	6020      	str	r0, [r4, #0]
  406b2e:	7015      	strb	r5, [r2, #0]
  406b30:	6962      	ldr	r2, [r4, #20]
  406b32:	429a      	cmp	r2, r3
  406b34:	d01a      	beq.n	406b6c <__swbuf_r+0x80>
  406b36:	89a3      	ldrh	r3, [r4, #12]
  406b38:	07db      	lsls	r3, r3, #31
  406b3a:	d501      	bpl.n	406b40 <__swbuf_r+0x54>
  406b3c:	2d0a      	cmp	r5, #10
  406b3e:	d015      	beq.n	406b6c <__swbuf_r+0x80>
  406b40:	4638      	mov	r0, r7
  406b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406b44:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406b46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406b4a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406b4e:	81a2      	strh	r2, [r4, #12]
  406b50:	6822      	ldr	r2, [r4, #0]
  406b52:	6661      	str	r1, [r4, #100]	; 0x64
  406b54:	6961      	ldr	r1, [r4, #20]
  406b56:	1ad3      	subs	r3, r2, r3
  406b58:	428b      	cmp	r3, r1
  406b5a:	dbe2      	blt.n	406b22 <__swbuf_r+0x36>
  406b5c:	4621      	mov	r1, r4
  406b5e:	4630      	mov	r0, r6
  406b60:	f7ff f87a 	bl	405c58 <_fflush_r>
  406b64:	b940      	cbnz	r0, 406b78 <__swbuf_r+0x8c>
  406b66:	6822      	ldr	r2, [r4, #0]
  406b68:	2301      	movs	r3, #1
  406b6a:	e7db      	b.n	406b24 <__swbuf_r+0x38>
  406b6c:	4621      	mov	r1, r4
  406b6e:	4630      	mov	r0, r6
  406b70:	f7ff f872 	bl	405c58 <_fflush_r>
  406b74:	2800      	cmp	r0, #0
  406b76:	d0e3      	beq.n	406b40 <__swbuf_r+0x54>
  406b78:	f04f 37ff 	mov.w	r7, #4294967295
  406b7c:	e7e0      	b.n	406b40 <__swbuf_r+0x54>
  406b7e:	4621      	mov	r1, r4
  406b80:	4630      	mov	r0, r6
  406b82:	f7fe ff55 	bl	405a30 <__swsetup_r>
  406b86:	2800      	cmp	r0, #0
  406b88:	d1f6      	bne.n	406b78 <__swbuf_r+0x8c>
  406b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b8e:	6923      	ldr	r3, [r4, #16]
  406b90:	b291      	uxth	r1, r2
  406b92:	e7bd      	b.n	406b10 <__swbuf_r+0x24>
  406b94:	f7ff f8b8 	bl	405d08 <__sinit>
  406b98:	e7b0      	b.n	406afc <__swbuf_r+0x10>
  406b9a:	bf00      	nop

00406b9c <_wcrtomb_r>:
  406b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b9e:	4606      	mov	r6, r0
  406ba0:	b085      	sub	sp, #20
  406ba2:	461f      	mov	r7, r3
  406ba4:	b189      	cbz	r1, 406bca <_wcrtomb_r+0x2e>
  406ba6:	4c10      	ldr	r4, [pc, #64]	; (406be8 <_wcrtomb_r+0x4c>)
  406ba8:	4d10      	ldr	r5, [pc, #64]	; (406bec <_wcrtomb_r+0x50>)
  406baa:	6824      	ldr	r4, [r4, #0]
  406bac:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406bae:	2c00      	cmp	r4, #0
  406bb0:	bf08      	it	eq
  406bb2:	462c      	moveq	r4, r5
  406bb4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406bb8:	47a0      	blx	r4
  406bba:	1c43      	adds	r3, r0, #1
  406bbc:	d103      	bne.n	406bc6 <_wcrtomb_r+0x2a>
  406bbe:	2200      	movs	r2, #0
  406bc0:	238a      	movs	r3, #138	; 0x8a
  406bc2:	603a      	str	r2, [r7, #0]
  406bc4:	6033      	str	r3, [r6, #0]
  406bc6:	b005      	add	sp, #20
  406bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406bca:	460c      	mov	r4, r1
  406bcc:	4906      	ldr	r1, [pc, #24]	; (406be8 <_wcrtomb_r+0x4c>)
  406bce:	4a07      	ldr	r2, [pc, #28]	; (406bec <_wcrtomb_r+0x50>)
  406bd0:	6809      	ldr	r1, [r1, #0]
  406bd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406bd4:	2900      	cmp	r1, #0
  406bd6:	bf08      	it	eq
  406bd8:	4611      	moveq	r1, r2
  406bda:	4622      	mov	r2, r4
  406bdc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406be0:	a901      	add	r1, sp, #4
  406be2:	47a0      	blx	r4
  406be4:	e7e9      	b.n	406bba <_wcrtomb_r+0x1e>
  406be6:	bf00      	nop
  406be8:	20400014 	.word	0x20400014
  406bec:	20400854 	.word	0x20400854

00406bf0 <__ascii_wctomb>:
  406bf0:	b121      	cbz	r1, 406bfc <__ascii_wctomb+0xc>
  406bf2:	2aff      	cmp	r2, #255	; 0xff
  406bf4:	d804      	bhi.n	406c00 <__ascii_wctomb+0x10>
  406bf6:	700a      	strb	r2, [r1, #0]
  406bf8:	2001      	movs	r0, #1
  406bfa:	4770      	bx	lr
  406bfc:	4608      	mov	r0, r1
  406bfe:	4770      	bx	lr
  406c00:	238a      	movs	r3, #138	; 0x8a
  406c02:	6003      	str	r3, [r0, #0]
  406c04:	f04f 30ff 	mov.w	r0, #4294967295
  406c08:	4770      	bx	lr
  406c0a:	bf00      	nop

00406c0c <_write_r>:
  406c0c:	b570      	push	{r4, r5, r6, lr}
  406c0e:	460d      	mov	r5, r1
  406c10:	4c08      	ldr	r4, [pc, #32]	; (406c34 <_write_r+0x28>)
  406c12:	4611      	mov	r1, r2
  406c14:	4606      	mov	r6, r0
  406c16:	461a      	mov	r2, r3
  406c18:	4628      	mov	r0, r5
  406c1a:	2300      	movs	r3, #0
  406c1c:	6023      	str	r3, [r4, #0]
  406c1e:	f7f9 ff3b 	bl	400a98 <_write>
  406c22:	1c43      	adds	r3, r0, #1
  406c24:	d000      	beq.n	406c28 <_write_r+0x1c>
  406c26:	bd70      	pop	{r4, r5, r6, pc}
  406c28:	6823      	ldr	r3, [r4, #0]
  406c2a:	2b00      	cmp	r3, #0
  406c2c:	d0fb      	beq.n	406c26 <_write_r+0x1a>
  406c2e:	6033      	str	r3, [r6, #0]
  406c30:	bd70      	pop	{r4, r5, r6, pc}
  406c32:	bf00      	nop
  406c34:	2040c894 	.word	0x2040c894

00406c38 <__register_exitproc>:
  406c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406c3c:	4d2c      	ldr	r5, [pc, #176]	; (406cf0 <__register_exitproc+0xb8>)
  406c3e:	4606      	mov	r6, r0
  406c40:	6828      	ldr	r0, [r5, #0]
  406c42:	4698      	mov	r8, r3
  406c44:	460f      	mov	r7, r1
  406c46:	4691      	mov	r9, r2
  406c48:	f7ff fc1e 	bl	406488 <__retarget_lock_acquire_recursive>
  406c4c:	4b29      	ldr	r3, [pc, #164]	; (406cf4 <__register_exitproc+0xbc>)
  406c4e:	681c      	ldr	r4, [r3, #0]
  406c50:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406c54:	2b00      	cmp	r3, #0
  406c56:	d03e      	beq.n	406cd6 <__register_exitproc+0x9e>
  406c58:	685a      	ldr	r2, [r3, #4]
  406c5a:	2a1f      	cmp	r2, #31
  406c5c:	dc1c      	bgt.n	406c98 <__register_exitproc+0x60>
  406c5e:	f102 0e01 	add.w	lr, r2, #1
  406c62:	b176      	cbz	r6, 406c82 <__register_exitproc+0x4a>
  406c64:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406c68:	2401      	movs	r4, #1
  406c6a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406c6e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406c72:	4094      	lsls	r4, r2
  406c74:	4320      	orrs	r0, r4
  406c76:	2e02      	cmp	r6, #2
  406c78:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406c7c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406c80:	d023      	beq.n	406cca <__register_exitproc+0x92>
  406c82:	3202      	adds	r2, #2
  406c84:	f8c3 e004 	str.w	lr, [r3, #4]
  406c88:	6828      	ldr	r0, [r5, #0]
  406c8a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406c8e:	f7ff fbfd 	bl	40648c <__retarget_lock_release_recursive>
  406c92:	2000      	movs	r0, #0
  406c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c98:	4b17      	ldr	r3, [pc, #92]	; (406cf8 <__register_exitproc+0xc0>)
  406c9a:	b30b      	cbz	r3, 406ce0 <__register_exitproc+0xa8>
  406c9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406ca0:	f7fd faf6 	bl	404290 <malloc>
  406ca4:	4603      	mov	r3, r0
  406ca6:	b1d8      	cbz	r0, 406ce0 <__register_exitproc+0xa8>
  406ca8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406cac:	6002      	str	r2, [r0, #0]
  406cae:	2100      	movs	r1, #0
  406cb0:	6041      	str	r1, [r0, #4]
  406cb2:	460a      	mov	r2, r1
  406cb4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406cb8:	f04f 0e01 	mov.w	lr, #1
  406cbc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406cc0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406cc4:	2e00      	cmp	r6, #0
  406cc6:	d0dc      	beq.n	406c82 <__register_exitproc+0x4a>
  406cc8:	e7cc      	b.n	406c64 <__register_exitproc+0x2c>
  406cca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406cce:	430c      	orrs	r4, r1
  406cd0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406cd4:	e7d5      	b.n	406c82 <__register_exitproc+0x4a>
  406cd6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406cda:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406cde:	e7bb      	b.n	406c58 <__register_exitproc+0x20>
  406ce0:	6828      	ldr	r0, [r5, #0]
  406ce2:	f7ff fbd3 	bl	40648c <__retarget_lock_release_recursive>
  406ce6:	f04f 30ff 	mov.w	r0, #4294967295
  406cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406cee:	bf00      	nop
  406cf0:	20400850 	.word	0x20400850
  406cf4:	004072ec 	.word	0x004072ec
  406cf8:	00404291 	.word	0x00404291

00406cfc <_close_r>:
  406cfc:	b538      	push	{r3, r4, r5, lr}
  406cfe:	4c07      	ldr	r4, [pc, #28]	; (406d1c <_close_r+0x20>)
  406d00:	2300      	movs	r3, #0
  406d02:	4605      	mov	r5, r0
  406d04:	4608      	mov	r0, r1
  406d06:	6023      	str	r3, [r4, #0]
  406d08:	f7fb f916 	bl	401f38 <_close>
  406d0c:	1c43      	adds	r3, r0, #1
  406d0e:	d000      	beq.n	406d12 <_close_r+0x16>
  406d10:	bd38      	pop	{r3, r4, r5, pc}
  406d12:	6823      	ldr	r3, [r4, #0]
  406d14:	2b00      	cmp	r3, #0
  406d16:	d0fb      	beq.n	406d10 <_close_r+0x14>
  406d18:	602b      	str	r3, [r5, #0]
  406d1a:	bd38      	pop	{r3, r4, r5, pc}
  406d1c:	2040c894 	.word	0x2040c894

00406d20 <_fclose_r>:
  406d20:	b570      	push	{r4, r5, r6, lr}
  406d22:	b159      	cbz	r1, 406d3c <_fclose_r+0x1c>
  406d24:	4605      	mov	r5, r0
  406d26:	460c      	mov	r4, r1
  406d28:	b110      	cbz	r0, 406d30 <_fclose_r+0x10>
  406d2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406d2c:	2b00      	cmp	r3, #0
  406d2e:	d03c      	beq.n	406daa <_fclose_r+0x8a>
  406d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406d32:	07d8      	lsls	r0, r3, #31
  406d34:	d505      	bpl.n	406d42 <_fclose_r+0x22>
  406d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d3a:	b92b      	cbnz	r3, 406d48 <_fclose_r+0x28>
  406d3c:	2600      	movs	r6, #0
  406d3e:	4630      	mov	r0, r6
  406d40:	bd70      	pop	{r4, r5, r6, pc}
  406d42:	89a3      	ldrh	r3, [r4, #12]
  406d44:	0599      	lsls	r1, r3, #22
  406d46:	d53c      	bpl.n	406dc2 <_fclose_r+0xa2>
  406d48:	4621      	mov	r1, r4
  406d4a:	4628      	mov	r0, r5
  406d4c:	f7fe fee4 	bl	405b18 <__sflush_r>
  406d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406d52:	4606      	mov	r6, r0
  406d54:	b133      	cbz	r3, 406d64 <_fclose_r+0x44>
  406d56:	69e1      	ldr	r1, [r4, #28]
  406d58:	4628      	mov	r0, r5
  406d5a:	4798      	blx	r3
  406d5c:	2800      	cmp	r0, #0
  406d5e:	bfb8      	it	lt
  406d60:	f04f 36ff 	movlt.w	r6, #4294967295
  406d64:	89a3      	ldrh	r3, [r4, #12]
  406d66:	061a      	lsls	r2, r3, #24
  406d68:	d422      	bmi.n	406db0 <_fclose_r+0x90>
  406d6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406d6c:	b141      	cbz	r1, 406d80 <_fclose_r+0x60>
  406d6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406d72:	4299      	cmp	r1, r3
  406d74:	d002      	beq.n	406d7c <_fclose_r+0x5c>
  406d76:	4628      	mov	r0, r5
  406d78:	f7ff f8ec 	bl	405f54 <_free_r>
  406d7c:	2300      	movs	r3, #0
  406d7e:	6323      	str	r3, [r4, #48]	; 0x30
  406d80:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406d82:	b121      	cbz	r1, 406d8e <_fclose_r+0x6e>
  406d84:	4628      	mov	r0, r5
  406d86:	f7ff f8e5 	bl	405f54 <_free_r>
  406d8a:	2300      	movs	r3, #0
  406d8c:	6463      	str	r3, [r4, #68]	; 0x44
  406d8e:	f7fe ffe7 	bl	405d60 <__sfp_lock_acquire>
  406d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406d94:	2200      	movs	r2, #0
  406d96:	07db      	lsls	r3, r3, #31
  406d98:	81a2      	strh	r2, [r4, #12]
  406d9a:	d50e      	bpl.n	406dba <_fclose_r+0x9a>
  406d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406d9e:	f7ff fb71 	bl	406484 <__retarget_lock_close_recursive>
  406da2:	f7fe ffe3 	bl	405d6c <__sfp_lock_release>
  406da6:	4630      	mov	r0, r6
  406da8:	bd70      	pop	{r4, r5, r6, pc}
  406daa:	f7fe ffad 	bl	405d08 <__sinit>
  406dae:	e7bf      	b.n	406d30 <_fclose_r+0x10>
  406db0:	6921      	ldr	r1, [r4, #16]
  406db2:	4628      	mov	r0, r5
  406db4:	f7ff f8ce 	bl	405f54 <_free_r>
  406db8:	e7d7      	b.n	406d6a <_fclose_r+0x4a>
  406dba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406dbc:	f7ff fb66 	bl	40648c <__retarget_lock_release_recursive>
  406dc0:	e7ec      	b.n	406d9c <_fclose_r+0x7c>
  406dc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406dc4:	f7ff fb60 	bl	406488 <__retarget_lock_acquire_recursive>
  406dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406dcc:	2b00      	cmp	r3, #0
  406dce:	d1bb      	bne.n	406d48 <_fclose_r+0x28>
  406dd0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406dd2:	f016 0601 	ands.w	r6, r6, #1
  406dd6:	d1b1      	bne.n	406d3c <_fclose_r+0x1c>
  406dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406dda:	f7ff fb57 	bl	40648c <__retarget_lock_release_recursive>
  406dde:	4630      	mov	r0, r6
  406de0:	bd70      	pop	{r4, r5, r6, pc}
  406de2:	bf00      	nop

00406de4 <_fstat_r>:
  406de4:	b538      	push	{r3, r4, r5, lr}
  406de6:	460b      	mov	r3, r1
  406de8:	4c07      	ldr	r4, [pc, #28]	; (406e08 <_fstat_r+0x24>)
  406dea:	4605      	mov	r5, r0
  406dec:	4611      	mov	r1, r2
  406dee:	4618      	mov	r0, r3
  406df0:	2300      	movs	r3, #0
  406df2:	6023      	str	r3, [r4, #0]
  406df4:	f7fb f8a3 	bl	401f3e <_fstat>
  406df8:	1c43      	adds	r3, r0, #1
  406dfa:	d000      	beq.n	406dfe <_fstat_r+0x1a>
  406dfc:	bd38      	pop	{r3, r4, r5, pc}
  406dfe:	6823      	ldr	r3, [r4, #0]
  406e00:	2b00      	cmp	r3, #0
  406e02:	d0fb      	beq.n	406dfc <_fstat_r+0x18>
  406e04:	602b      	str	r3, [r5, #0]
  406e06:	bd38      	pop	{r3, r4, r5, pc}
  406e08:	2040c894 	.word	0x2040c894

00406e0c <_isatty_r>:
  406e0c:	b538      	push	{r3, r4, r5, lr}
  406e0e:	4c07      	ldr	r4, [pc, #28]	; (406e2c <_isatty_r+0x20>)
  406e10:	2300      	movs	r3, #0
  406e12:	4605      	mov	r5, r0
  406e14:	4608      	mov	r0, r1
  406e16:	6023      	str	r3, [r4, #0]
  406e18:	f7fb f896 	bl	401f48 <_isatty>
  406e1c:	1c43      	adds	r3, r0, #1
  406e1e:	d000      	beq.n	406e22 <_isatty_r+0x16>
  406e20:	bd38      	pop	{r3, r4, r5, pc}
  406e22:	6823      	ldr	r3, [r4, #0]
  406e24:	2b00      	cmp	r3, #0
  406e26:	d0fb      	beq.n	406e20 <_isatty_r+0x14>
  406e28:	602b      	str	r3, [r5, #0]
  406e2a:	bd38      	pop	{r3, r4, r5, pc}
  406e2c:	2040c894 	.word	0x2040c894

00406e30 <_lseek_r>:
  406e30:	b570      	push	{r4, r5, r6, lr}
  406e32:	460d      	mov	r5, r1
  406e34:	4c08      	ldr	r4, [pc, #32]	; (406e58 <_lseek_r+0x28>)
  406e36:	4611      	mov	r1, r2
  406e38:	4606      	mov	r6, r0
  406e3a:	461a      	mov	r2, r3
  406e3c:	4628      	mov	r0, r5
  406e3e:	2300      	movs	r3, #0
  406e40:	6023      	str	r3, [r4, #0]
  406e42:	f7fb f883 	bl	401f4c <_lseek>
  406e46:	1c43      	adds	r3, r0, #1
  406e48:	d000      	beq.n	406e4c <_lseek_r+0x1c>
  406e4a:	bd70      	pop	{r4, r5, r6, pc}
  406e4c:	6823      	ldr	r3, [r4, #0]
  406e4e:	2b00      	cmp	r3, #0
  406e50:	d0fb      	beq.n	406e4a <_lseek_r+0x1a>
  406e52:	6033      	str	r3, [r6, #0]
  406e54:	bd70      	pop	{r4, r5, r6, pc}
  406e56:	bf00      	nop
  406e58:	2040c894 	.word	0x2040c894

00406e5c <_read_r>:
  406e5c:	b570      	push	{r4, r5, r6, lr}
  406e5e:	460d      	mov	r5, r1
  406e60:	4c08      	ldr	r4, [pc, #32]	; (406e84 <_read_r+0x28>)
  406e62:	4611      	mov	r1, r2
  406e64:	4606      	mov	r6, r0
  406e66:	461a      	mov	r2, r3
  406e68:	4628      	mov	r0, r5
  406e6a:	2300      	movs	r3, #0
  406e6c:	6023      	str	r3, [r4, #0]
  406e6e:	f7f9 fdf5 	bl	400a5c <_read>
  406e72:	1c43      	adds	r3, r0, #1
  406e74:	d000      	beq.n	406e78 <_read_r+0x1c>
  406e76:	bd70      	pop	{r4, r5, r6, pc}
  406e78:	6823      	ldr	r3, [r4, #0]
  406e7a:	2b00      	cmp	r3, #0
  406e7c:	d0fb      	beq.n	406e76 <_read_r+0x1a>
  406e7e:	6033      	str	r3, [r6, #0]
  406e80:	bd70      	pop	{r4, r5, r6, pc}
  406e82:	bf00      	nop
  406e84:	2040c894 	.word	0x2040c894

00406e88 <__aeabi_uldivmod>:
  406e88:	b953      	cbnz	r3, 406ea0 <__aeabi_uldivmod+0x18>
  406e8a:	b94a      	cbnz	r2, 406ea0 <__aeabi_uldivmod+0x18>
  406e8c:	2900      	cmp	r1, #0
  406e8e:	bf08      	it	eq
  406e90:	2800      	cmpeq	r0, #0
  406e92:	bf1c      	itt	ne
  406e94:	f04f 31ff 	movne.w	r1, #4294967295
  406e98:	f04f 30ff 	movne.w	r0, #4294967295
  406e9c:	f000 b97a 	b.w	407194 <__aeabi_idiv0>
  406ea0:	f1ad 0c08 	sub.w	ip, sp, #8
  406ea4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406ea8:	f000 f806 	bl	406eb8 <__udivmoddi4>
  406eac:	f8dd e004 	ldr.w	lr, [sp, #4]
  406eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406eb4:	b004      	add	sp, #16
  406eb6:	4770      	bx	lr

00406eb8 <__udivmoddi4>:
  406eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406ebc:	468c      	mov	ip, r1
  406ebe:	460d      	mov	r5, r1
  406ec0:	4604      	mov	r4, r0
  406ec2:	9e08      	ldr	r6, [sp, #32]
  406ec4:	2b00      	cmp	r3, #0
  406ec6:	d151      	bne.n	406f6c <__udivmoddi4+0xb4>
  406ec8:	428a      	cmp	r2, r1
  406eca:	4617      	mov	r7, r2
  406ecc:	d96d      	bls.n	406faa <__udivmoddi4+0xf2>
  406ece:	fab2 fe82 	clz	lr, r2
  406ed2:	f1be 0f00 	cmp.w	lr, #0
  406ed6:	d00b      	beq.n	406ef0 <__udivmoddi4+0x38>
  406ed8:	f1ce 0c20 	rsb	ip, lr, #32
  406edc:	fa01 f50e 	lsl.w	r5, r1, lr
  406ee0:	fa20 fc0c 	lsr.w	ip, r0, ip
  406ee4:	fa02 f70e 	lsl.w	r7, r2, lr
  406ee8:	ea4c 0c05 	orr.w	ip, ip, r5
  406eec:	fa00 f40e 	lsl.w	r4, r0, lr
  406ef0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406ef4:	0c25      	lsrs	r5, r4, #16
  406ef6:	fbbc f8fa 	udiv	r8, ip, sl
  406efa:	fa1f f987 	uxth.w	r9, r7
  406efe:	fb0a cc18 	mls	ip, sl, r8, ip
  406f02:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406f06:	fb08 f309 	mul.w	r3, r8, r9
  406f0a:	42ab      	cmp	r3, r5
  406f0c:	d90a      	bls.n	406f24 <__udivmoddi4+0x6c>
  406f0e:	19ed      	adds	r5, r5, r7
  406f10:	f108 32ff 	add.w	r2, r8, #4294967295
  406f14:	f080 8123 	bcs.w	40715e <__udivmoddi4+0x2a6>
  406f18:	42ab      	cmp	r3, r5
  406f1a:	f240 8120 	bls.w	40715e <__udivmoddi4+0x2a6>
  406f1e:	f1a8 0802 	sub.w	r8, r8, #2
  406f22:	443d      	add	r5, r7
  406f24:	1aed      	subs	r5, r5, r3
  406f26:	b2a4      	uxth	r4, r4
  406f28:	fbb5 f0fa 	udiv	r0, r5, sl
  406f2c:	fb0a 5510 	mls	r5, sl, r0, r5
  406f30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406f34:	fb00 f909 	mul.w	r9, r0, r9
  406f38:	45a1      	cmp	r9, r4
  406f3a:	d909      	bls.n	406f50 <__udivmoddi4+0x98>
  406f3c:	19e4      	adds	r4, r4, r7
  406f3e:	f100 33ff 	add.w	r3, r0, #4294967295
  406f42:	f080 810a 	bcs.w	40715a <__udivmoddi4+0x2a2>
  406f46:	45a1      	cmp	r9, r4
  406f48:	f240 8107 	bls.w	40715a <__udivmoddi4+0x2a2>
  406f4c:	3802      	subs	r0, #2
  406f4e:	443c      	add	r4, r7
  406f50:	eba4 0409 	sub.w	r4, r4, r9
  406f54:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406f58:	2100      	movs	r1, #0
  406f5a:	2e00      	cmp	r6, #0
  406f5c:	d061      	beq.n	407022 <__udivmoddi4+0x16a>
  406f5e:	fa24 f40e 	lsr.w	r4, r4, lr
  406f62:	2300      	movs	r3, #0
  406f64:	6034      	str	r4, [r6, #0]
  406f66:	6073      	str	r3, [r6, #4]
  406f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f6c:	428b      	cmp	r3, r1
  406f6e:	d907      	bls.n	406f80 <__udivmoddi4+0xc8>
  406f70:	2e00      	cmp	r6, #0
  406f72:	d054      	beq.n	40701e <__udivmoddi4+0x166>
  406f74:	2100      	movs	r1, #0
  406f76:	e886 0021 	stmia.w	r6, {r0, r5}
  406f7a:	4608      	mov	r0, r1
  406f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f80:	fab3 f183 	clz	r1, r3
  406f84:	2900      	cmp	r1, #0
  406f86:	f040 808e 	bne.w	4070a6 <__udivmoddi4+0x1ee>
  406f8a:	42ab      	cmp	r3, r5
  406f8c:	d302      	bcc.n	406f94 <__udivmoddi4+0xdc>
  406f8e:	4282      	cmp	r2, r0
  406f90:	f200 80fa 	bhi.w	407188 <__udivmoddi4+0x2d0>
  406f94:	1a84      	subs	r4, r0, r2
  406f96:	eb65 0503 	sbc.w	r5, r5, r3
  406f9a:	2001      	movs	r0, #1
  406f9c:	46ac      	mov	ip, r5
  406f9e:	2e00      	cmp	r6, #0
  406fa0:	d03f      	beq.n	407022 <__udivmoddi4+0x16a>
  406fa2:	e886 1010 	stmia.w	r6, {r4, ip}
  406fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406faa:	b912      	cbnz	r2, 406fb2 <__udivmoddi4+0xfa>
  406fac:	2701      	movs	r7, #1
  406fae:	fbb7 f7f2 	udiv	r7, r7, r2
  406fb2:	fab7 fe87 	clz	lr, r7
  406fb6:	f1be 0f00 	cmp.w	lr, #0
  406fba:	d134      	bne.n	407026 <__udivmoddi4+0x16e>
  406fbc:	1beb      	subs	r3, r5, r7
  406fbe:	0c3a      	lsrs	r2, r7, #16
  406fc0:	fa1f fc87 	uxth.w	ip, r7
  406fc4:	2101      	movs	r1, #1
  406fc6:	fbb3 f8f2 	udiv	r8, r3, r2
  406fca:	0c25      	lsrs	r5, r4, #16
  406fcc:	fb02 3318 	mls	r3, r2, r8, r3
  406fd0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406fd4:	fb0c f308 	mul.w	r3, ip, r8
  406fd8:	42ab      	cmp	r3, r5
  406fda:	d907      	bls.n	406fec <__udivmoddi4+0x134>
  406fdc:	19ed      	adds	r5, r5, r7
  406fde:	f108 30ff 	add.w	r0, r8, #4294967295
  406fe2:	d202      	bcs.n	406fea <__udivmoddi4+0x132>
  406fe4:	42ab      	cmp	r3, r5
  406fe6:	f200 80d1 	bhi.w	40718c <__udivmoddi4+0x2d4>
  406fea:	4680      	mov	r8, r0
  406fec:	1aed      	subs	r5, r5, r3
  406fee:	b2a3      	uxth	r3, r4
  406ff0:	fbb5 f0f2 	udiv	r0, r5, r2
  406ff4:	fb02 5510 	mls	r5, r2, r0, r5
  406ff8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406ffc:	fb0c fc00 	mul.w	ip, ip, r0
  407000:	45a4      	cmp	ip, r4
  407002:	d907      	bls.n	407014 <__udivmoddi4+0x15c>
  407004:	19e4      	adds	r4, r4, r7
  407006:	f100 33ff 	add.w	r3, r0, #4294967295
  40700a:	d202      	bcs.n	407012 <__udivmoddi4+0x15a>
  40700c:	45a4      	cmp	ip, r4
  40700e:	f200 80b8 	bhi.w	407182 <__udivmoddi4+0x2ca>
  407012:	4618      	mov	r0, r3
  407014:	eba4 040c 	sub.w	r4, r4, ip
  407018:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40701c:	e79d      	b.n	406f5a <__udivmoddi4+0xa2>
  40701e:	4631      	mov	r1, r6
  407020:	4630      	mov	r0, r6
  407022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407026:	f1ce 0420 	rsb	r4, lr, #32
  40702a:	fa05 f30e 	lsl.w	r3, r5, lr
  40702e:	fa07 f70e 	lsl.w	r7, r7, lr
  407032:	fa20 f804 	lsr.w	r8, r0, r4
  407036:	0c3a      	lsrs	r2, r7, #16
  407038:	fa25 f404 	lsr.w	r4, r5, r4
  40703c:	ea48 0803 	orr.w	r8, r8, r3
  407040:	fbb4 f1f2 	udiv	r1, r4, r2
  407044:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407048:	fb02 4411 	mls	r4, r2, r1, r4
  40704c:	fa1f fc87 	uxth.w	ip, r7
  407050:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407054:	fb01 f30c 	mul.w	r3, r1, ip
  407058:	42ab      	cmp	r3, r5
  40705a:	fa00 f40e 	lsl.w	r4, r0, lr
  40705e:	d909      	bls.n	407074 <__udivmoddi4+0x1bc>
  407060:	19ed      	adds	r5, r5, r7
  407062:	f101 30ff 	add.w	r0, r1, #4294967295
  407066:	f080 808a 	bcs.w	40717e <__udivmoddi4+0x2c6>
  40706a:	42ab      	cmp	r3, r5
  40706c:	f240 8087 	bls.w	40717e <__udivmoddi4+0x2c6>
  407070:	3902      	subs	r1, #2
  407072:	443d      	add	r5, r7
  407074:	1aeb      	subs	r3, r5, r3
  407076:	fa1f f588 	uxth.w	r5, r8
  40707a:	fbb3 f0f2 	udiv	r0, r3, r2
  40707e:	fb02 3310 	mls	r3, r2, r0, r3
  407082:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407086:	fb00 f30c 	mul.w	r3, r0, ip
  40708a:	42ab      	cmp	r3, r5
  40708c:	d907      	bls.n	40709e <__udivmoddi4+0x1e6>
  40708e:	19ed      	adds	r5, r5, r7
  407090:	f100 38ff 	add.w	r8, r0, #4294967295
  407094:	d26f      	bcs.n	407176 <__udivmoddi4+0x2be>
  407096:	42ab      	cmp	r3, r5
  407098:	d96d      	bls.n	407176 <__udivmoddi4+0x2be>
  40709a:	3802      	subs	r0, #2
  40709c:	443d      	add	r5, r7
  40709e:	1aeb      	subs	r3, r5, r3
  4070a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4070a4:	e78f      	b.n	406fc6 <__udivmoddi4+0x10e>
  4070a6:	f1c1 0720 	rsb	r7, r1, #32
  4070aa:	fa22 f807 	lsr.w	r8, r2, r7
  4070ae:	408b      	lsls	r3, r1
  4070b0:	fa05 f401 	lsl.w	r4, r5, r1
  4070b4:	ea48 0303 	orr.w	r3, r8, r3
  4070b8:	fa20 fe07 	lsr.w	lr, r0, r7
  4070bc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4070c0:	40fd      	lsrs	r5, r7
  4070c2:	ea4e 0e04 	orr.w	lr, lr, r4
  4070c6:	fbb5 f9fc 	udiv	r9, r5, ip
  4070ca:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4070ce:	fb0c 5519 	mls	r5, ip, r9, r5
  4070d2:	fa1f f883 	uxth.w	r8, r3
  4070d6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4070da:	fb09 f408 	mul.w	r4, r9, r8
  4070de:	42ac      	cmp	r4, r5
  4070e0:	fa02 f201 	lsl.w	r2, r2, r1
  4070e4:	fa00 fa01 	lsl.w	sl, r0, r1
  4070e8:	d908      	bls.n	4070fc <__udivmoddi4+0x244>
  4070ea:	18ed      	adds	r5, r5, r3
  4070ec:	f109 30ff 	add.w	r0, r9, #4294967295
  4070f0:	d243      	bcs.n	40717a <__udivmoddi4+0x2c2>
  4070f2:	42ac      	cmp	r4, r5
  4070f4:	d941      	bls.n	40717a <__udivmoddi4+0x2c2>
  4070f6:	f1a9 0902 	sub.w	r9, r9, #2
  4070fa:	441d      	add	r5, r3
  4070fc:	1b2d      	subs	r5, r5, r4
  4070fe:	fa1f fe8e 	uxth.w	lr, lr
  407102:	fbb5 f0fc 	udiv	r0, r5, ip
  407106:	fb0c 5510 	mls	r5, ip, r0, r5
  40710a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40710e:	fb00 f808 	mul.w	r8, r0, r8
  407112:	45a0      	cmp	r8, r4
  407114:	d907      	bls.n	407126 <__udivmoddi4+0x26e>
  407116:	18e4      	adds	r4, r4, r3
  407118:	f100 35ff 	add.w	r5, r0, #4294967295
  40711c:	d229      	bcs.n	407172 <__udivmoddi4+0x2ba>
  40711e:	45a0      	cmp	r8, r4
  407120:	d927      	bls.n	407172 <__udivmoddi4+0x2ba>
  407122:	3802      	subs	r0, #2
  407124:	441c      	add	r4, r3
  407126:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40712a:	eba4 0408 	sub.w	r4, r4, r8
  40712e:	fba0 8902 	umull	r8, r9, r0, r2
  407132:	454c      	cmp	r4, r9
  407134:	46c6      	mov	lr, r8
  407136:	464d      	mov	r5, r9
  407138:	d315      	bcc.n	407166 <__udivmoddi4+0x2ae>
  40713a:	d012      	beq.n	407162 <__udivmoddi4+0x2aa>
  40713c:	b156      	cbz	r6, 407154 <__udivmoddi4+0x29c>
  40713e:	ebba 030e 	subs.w	r3, sl, lr
  407142:	eb64 0405 	sbc.w	r4, r4, r5
  407146:	fa04 f707 	lsl.w	r7, r4, r7
  40714a:	40cb      	lsrs	r3, r1
  40714c:	431f      	orrs	r7, r3
  40714e:	40cc      	lsrs	r4, r1
  407150:	6037      	str	r7, [r6, #0]
  407152:	6074      	str	r4, [r6, #4]
  407154:	2100      	movs	r1, #0
  407156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40715a:	4618      	mov	r0, r3
  40715c:	e6f8      	b.n	406f50 <__udivmoddi4+0x98>
  40715e:	4690      	mov	r8, r2
  407160:	e6e0      	b.n	406f24 <__udivmoddi4+0x6c>
  407162:	45c2      	cmp	sl, r8
  407164:	d2ea      	bcs.n	40713c <__udivmoddi4+0x284>
  407166:	ebb8 0e02 	subs.w	lr, r8, r2
  40716a:	eb69 0503 	sbc.w	r5, r9, r3
  40716e:	3801      	subs	r0, #1
  407170:	e7e4      	b.n	40713c <__udivmoddi4+0x284>
  407172:	4628      	mov	r0, r5
  407174:	e7d7      	b.n	407126 <__udivmoddi4+0x26e>
  407176:	4640      	mov	r0, r8
  407178:	e791      	b.n	40709e <__udivmoddi4+0x1e6>
  40717a:	4681      	mov	r9, r0
  40717c:	e7be      	b.n	4070fc <__udivmoddi4+0x244>
  40717e:	4601      	mov	r1, r0
  407180:	e778      	b.n	407074 <__udivmoddi4+0x1bc>
  407182:	3802      	subs	r0, #2
  407184:	443c      	add	r4, r7
  407186:	e745      	b.n	407014 <__udivmoddi4+0x15c>
  407188:	4608      	mov	r0, r1
  40718a:	e708      	b.n	406f9e <__udivmoddi4+0xe6>
  40718c:	f1a8 0802 	sub.w	r8, r8, #2
  407190:	443d      	add	r5, r7
  407192:	e72b      	b.n	406fec <__udivmoddi4+0x134>

00407194 <__aeabi_idiv0>:
  407194:	4770      	bx	lr
  407196:	bf00      	nop
  407198:	0a05000d 	.word	0x0a05000d
  40719c:	0000004b 	.word	0x0000004b
  4071a0:	00001932 	.word	0x00001932
  4071a4:	0e00008b 	.word	0x0e00008b
  4071a8:	32800008 	.word	0x32800008
  4071ac:	030a0205 	.word	0x030a0205
  4071b0:	0f022003 	.word	0x0f022003
  4071b4:	00000a0f 	.word	0x00000a0f
  4071b8:	18180000 	.word	0x18180000
  4071bc:	00002020 	.word	0x00002020
  4071c0:	0a000000 	.word	0x0a000000
  4071c4:	02020000 	.word	0x02020000
  4071c8:	18180000 	.word	0x18180000
  4071cc:	00030000 	.word	0x00030000
  4071d0:	00000000 	.word	0x00000000
  4071d4:	18010002 	.word	0x18010002
  4071d8:	1e1e1e1e 	.word	0x1e1e1e1e
  4071dc:	1e1e1e1e 	.word	0x1e1e1e1e
  4071e0:	1e1e1e1e 	.word	0x1e1e1e1e
  4071e4:	00001e1e 	.word	0x00001e1e
	...
  4071f8:	454c4449 	.word	0x454c4449
  4071fc:	00000000 	.word	0x00000000
  407200:	51726d54 	.word	0x51726d54
  407204:	00000000 	.word	0x00000000
  407208:	20726d54 	.word	0x20726d54
  40720c:	00637653 	.word	0x00637653
  407210:	00000078 	.word	0x00000078
  407214:	0000004b 	.word	0x0000004b
  407218:	00ff6347 	.word	0x00ff6347
  40721c:	00000000 	.word	0x00000000
  407220:	000000a0 	.word	0x000000a0
  407224:	00000028 	.word	0x00000028
  407228:	00000001 	.word	0x00000001
  40722c:	00000078 	.word	0x00000078
  407230:	0000004b 	.word	0x0000004b
  407234:	00ffff00 	.word	0x00ffff00
  407238:	00000000 	.word	0x00000000
  40723c:	000000a0 	.word	0x000000a0
  407240:	0000008c 	.word	0x0000008c
  407244:	00000001 	.word	0x00000001
  407248:	00000078 	.word	0x00000078
  40724c:	0000004b 	.word	0x0000004b
  407250:	0000ff00 	.word	0x0000ff00
  407254:	00000000 	.word	0x00000000
  407258:	000000a0 	.word	0x000000a0
  40725c:	000000f0 	.word	0x000000f0
  407260:	00000001 	.word	0x00000001
  407264:	00000078 	.word	0x00000078
  407268:	0000004b 	.word	0x0000004b
  40726c:	00ff00ff 	.word	0x00ff00ff
  407270:	00000000 	.word	0x00000000
  407274:	000000a0 	.word	0x000000a0
  407278:	00000154 	.word	0x00000154
  40727c:	00000001 	.word	0x00000001
  407280:	00000078 	.word	0x00000078
  407284:	0000004b 	.word	0x0000004b
  407288:	00ffa500 	.word	0x00ffa500
  40728c:	00000000 	.word	0x00000000
  407290:	000000a0 	.word	0x000000a0
  407294:	000001b8 	.word	0x000001b8
  407298:	00000001 	.word	0x00000001
  40729c:	0074786d 	.word	0x0074786d
  4072a0:	6c696146 	.word	0x6c696146
  4072a4:	74206465 	.word	0x74206465
  4072a8:	7263206f 	.word	0x7263206f
  4072ac:	65746165 	.word	0x65746165
  4072b0:	73657420 	.word	0x73657420
  4072b4:	656c2074 	.word	0x656c2074
  4072b8:	61742064 	.word	0x61742064
  4072bc:	0a0d6b73 	.word	0x0a0d6b73
  4072c0:	00000000 	.word	0x00000000
  4072c4:	0064636c 	.word	0x0064636c
  4072c8:	64253a78 	.word	0x64253a78
  4072cc:	253a7920 	.word	0x253a7920
  4072d0:	00000a64 	.word	0x00000a64
  4072d4:	63617473 	.word	0x63617473
  4072d8:	766f206b 	.word	0x766f206b
  4072dc:	6c667265 	.word	0x6c667265
  4072e0:	2520776f 	.word	0x2520776f
  4072e4:	73252078 	.word	0x73252078
  4072e8:	00000a0d 	.word	0x00000a0d

004072ec <_global_impure_ptr>:
  4072ec:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  4072fc:	46454443 00000000 33323130 37363534     CDEF....01234567
  40730c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40731c:	0000296c                                l)..

00407320 <blanks.7217>:
  407320:	20202020 20202020 20202020 20202020                     

00407330 <zeroes.7218>:
  407330:	30303030 30303030 30303030 30303030     0000000000000000
  407340:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00407350 <_ctype_>:
  407350:	20202000 20202020 28282020 20282828     .         ((((( 
  407360:	20202020 20202020 20202020 20202020                     
  407370:	10108820 10101010 10101010 10101010      ...............
  407380:	04040410 04040404 10040404 10101010     ................
  407390:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4073a0:	01010101 01010101 01010101 10101010     ................
  4073b0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4073c0:	02020202 02020202 02020202 10101010     ................
  4073d0:	00000020 00000000 00000000 00000000      ...............
	...

00407454 <_init>:
  407454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407456:	bf00      	nop
  407458:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40745a:	bc08      	pop	{r3}
  40745c:	469e      	mov	lr, r3
  40745e:	4770      	bx	lr

00407460 <__init_array_start>:
  407460:	00405af9 	.word	0x00405af9

00407464 <__frame_dummy_init_array_entry>:
  407464:	0040018d                                ..@.

00407468 <_fini>:
  407468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40746a:	bf00      	nop
  40746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40746e:	bc08      	pop	{r3}
  407470:	469e      	mov	lr, r3
  407472:	4770      	bx	lr

00407474 <__fini_array_start>:
  407474:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	c870 2040                                   p.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	6bf1 0040 6581 0040 0000 0000 7350 0040     .k@..e@.....Ps@.
20400944:	734c 0040 72c0 0040 72c0 0040 72c0 0040     Ls@..r@..r@..r@.
20400954:	72c0 0040 72c0 0040 72c0 0040 72c0 0040     .r@..r@..r@..r@.
20400964:	72c0 0040 72c0 0040 ffff ffff ffff ffff     .r@..r@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
